Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-11-28T15:00:52+08:00

====== Git ======
Created Thursday 28 November 2013

[[~/Nutstore/resource/Pro_GitÖÐÎÄ.pdf|pro git]]

stage 		      is a place ???
the index         is reference in stage.
working tree is current editing files and dirs

Gitk   -- 一个基于 Tcl/Tk 的 Git 浏览器

===== START =====
客户端并不只提取最新版本的文件快照,而是把原始的代码仓库完整地镜像下来
{{./pasted_image.png}}

==== 直接快照,而非比较差异 ====
Git 和其他版本控制系统的主要差别在于,Git 只关心文件数据的整体是否发生变化,而大多数其他系统则只关心文件内容的具体差异
{{./pasted_image001.png}}
每次提交更新时,它会纵览一遍所有文件的指纹信息并对文件作一快照,然后保存一个指向这次快照的索引。为提高性能,若文件没有变化,Git 不会再次保存,而只对上次保存的快照作一连接
{{./pasted_image002.png}}
Git 更像是个小型的文件系统,但它同时还提供了许多以此为基础的超强工具,而不只是一个简单的 VCS


==== 时刻保持数据完整性 ====
在保存到 Git 之前,所有数据都要进行内容的校验和(checksum)计算,并将此结果作为数据的唯一标识和索引
Git 使用 SHA-1 算法计算数据的校验和,通过对文件的内容或目录的结构计算出一个SHA-1 哈希值,作为指纹字符串。该字串由 40 个十六进制字符(0-9 及 a-f)组成


==== 多数操作仅添加数据 ====
一旦提交快照之后就完全不用担心丢失数据

==== 三种状态 ====
对于任何一个文件,在 Git 内都只有三种状态:已提交(committed),已修改(modified)和已暂存(staged)。
已提交表示该文件已经被安全地保存在本地数据库中了;已修改表示修改了某个文件,但还没有提交保存;已暂存表示把已修改的文件放在下次提交时要保存的清单中。
{{./pasted_image003.png}}
每个项目都有一个 git 目录,它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要,每次克隆镜像仓库的时候,实际拷贝的就是这个目录里面的数据
从项目中取出某个版本的所有文件和目录,用以开始后续工作的叫做工作目录
所谓的暂存区域只不过是个简单的文件,一般都放在 git 目录中。有时候人们会把这个文件叫做索引文件,不过标准说法还是叫暂存区域

==== 初次运行 Git 前的配置 ====
Git 提供了一个叫做 git config 的工具(译注:实际是 git-config 命令,只不过可以通过 git 加一个名字来呼叫此命令。),专门用来配置或读取相应的工作环境变量
而正是由这些环境变量,决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方:
	* /etc/gitconfig文件:系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项,读写的就是这个文件。
	* ~/.gitconfig文件:用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项,读写的就是这个文件。
	* 当前项目的 git 目录中的配置文件(也就是工作目录中的 .git/config 文件):这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置,所以
	.git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$git config --global core.editor emacs
git config --list   查看配置信息
$ git config user.name  直接查阅某个环境变量的设定
有时候会看到重复的变量名,那就说明它们来自不同的配置文件(比如 /etc/gitconfig和 ~/.gitconfig),不过最终 Git 实际采用的是最后一个

===== BASE =====

==== 取得项目的 Git 仓库 ====
	1.从当前目录初始化
	git init
	2.从现有仓库克隆

	git clone git://github.com/schacon/grit.git [dirname] 
	****http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议


==== 记录每次更新到仓库 ====
{{./pasted_image004.png}}
git status
git add README

设置ignore












