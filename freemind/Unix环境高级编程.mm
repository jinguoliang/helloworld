<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1388825541958" ID="ID_950708638" MODIFIED="1395889568042" TEXT="Unix">
<node CREATED="1388825565435" FOLDED="true" ID="ID_545402450" MODIFIED="1391693167740" POSITION="right" TEXT="Unix&#x57fa;&#x7840;&#x77e5;&#x8bc6;">
<node CREATED="1388825585796" ID="ID_674545421" MODIFIED="1388825635770" TEXT="&#x5f15;&#x8a00;"/>
<node CREATED="1388825636250" FOLDED="true" ID="ID_1312466121" MODIFIED="1388850164501" TEXT="&#x767b;&#x5f55;">
<node CREATED="1388826151852" FOLDED="true" ID="ID_1750770617" MODIFIED="1392030831757" TEXT="&#x767b;&#x5f55;&#x540d;">
<node CREATED="1388826163468" FOLDED="true" ID="ID_721832705" MODIFIED="1392030831757" TEXT="/etc/passwd">
<node CREATED="1388826207144" FOLDED="true" ID="ID_208333229" MODIFIED="1392030831757" TEXT="Jinux:x:117:65534::/usr/local/Jinux:/bin/bash">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="5">&#21475;&#20196;&#25991;&#20214;&#20013;&#30340;&#30331;&#24405;&#39033;&#30001; 7&#20010;&#20197;&#20882;&#21495;&#20998;&#38548;&#30340;&#23383;&#27573;&#32452;&#25104;:<b>&#30331;&#24405;&#21517;</b>, </font>
    </p>
    <p>
      <b><font size="5">&#21152;&#23494;&#21475;&#20196;</font></b><font size="5">,<b>&#25968;&#23383;&#29992;&#25143;</b>&#160; ID(224),<b>&#25968;&#23383;&#32452;</b>ID(20),<b>&#27880;&#37322;&#23383;&#27573;</b>, </font>
    </p>
    <p>
      <b><font size="5">&#36215;&#22987;&#30446;&#24405;</font></b><font size="5">&#160;(/home/stevens),&#20197;&#21450;<b>shell&#31243;&#24207;</b>(/bin/ksh)</font>
    </p>
  </body>
</html></richcontent>
<node CREATED="1388826418382" ID="ID_649196069" MODIFIED="1388826420057" TEXT="&#x52a0;&#x5bc6;&#x53e3;&#x4ee4;&#x79fb;&#x5230;&#x53e6;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x4e2d; "/>
</node>
</node>
</node>
<node CREATED="1388826436798" FOLDED="true" ID="ID_51639638" MODIFIED="1392030831757" TEXT="shell">
<node CREATED="1388826884069" ID="ID_963643747" MODIFIED="1388826891957" TEXT="bounce shell"/>
<node CREATED="1388826894673" ID="ID_550215512" MODIFIED="1388826904237" TEXT="c shell"/>
<node CREATED="1388826904986" ID="ID_977557130" MODIFIED="1388826966782" TEXT="Korn Shell"/>
</node>
</node>
<node CREATED="1388825641643" FOLDED="true" ID="ID_1031849720" MODIFIED="1388850163151" TEXT="&#x6587;&#x4ef6;&#x548c;&#x76ee;&#x5f55;">
<node CREATED="1388826992680" FOLDED="true" ID="ID_1992373249" MODIFIED="1392030831757" TEXT="&#x6587;&#x4ef6;&#x7cfb;&#x7edf; ">
<font NAME="SansSerif" SIZE="12"/>
<node CREATED="1388827088042" FOLDED="true" ID="ID_334165158" MODIFIED="1392030831757" TEXT="&#x76ee;&#x5f55;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#30446;&#24405;(directory)&#26159;&#19968;&#20010;&#21253;&#21547;<font size="5">&#30446;&#24405;&#39033;</font>&#30340;&#25991;&#20214;,&#22312;&#36923;&#36753;&#19978;,&#21487;&#20197;&#35748;&#20026;&#27599;&#20010;&#30446;&#24405;&#39033;&#37117;&#21253;&#21547;&#19968;&#20010;
    </p>
    <p>
      &#25991;&#20214;&#21517;,&#21516;&#26102;&#36824;&#21253;&#21547;&#35828;&#26126;&#35813;&#25991;&#20214;&#23646;&#24615;&#30340;&#20449;&#24687;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388827121971" ID="ID_408126909" MODIFIED="1388827168529" TEXT="&#x6587;&#x4ef6;&#x5c5e;&#x6027;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25991;&#20214;&#31867;&#22411;,&#25991;&#20214;&#38271;&#24230;,&#25991;&#20214;&#25152;&#26377;&#32773;,
    </p>
    <p>
      &#25991;&#20214;&#30340;&#35768;&#21487;&#26435;(&#20363;&#22914;,&#20854;&#20182;&#29992;&#25143;&#33021;&#21542;&#33021;&#35775;&#38382;&#35813;&#25991;&#20214;)
    </p>
    <p>
      ,&#25991;&#20214;&#26368;&#21518;&#30340;&#20462;&#25913;&#26102;&#38388;&#31561;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1388827020791" FOLDED="true" ID="ID_993418621" MODIFIED="1392030831757" TEXT="&#x6587;&#x4ef6;&#x540d; ">
<font NAME="SansSerif" SIZE="12"/>
<node CREATED="1388828053378" ID="ID_1191101616" MODIFIED="1388828124415" TEXT="&#x4e0d;&#x80fd;&#x51fa;&#x73b0;&#x5728;&#x6587;&#x4ef6;&#x540d;&#x4e2d;&#x7684;&#x5b57;&#x7b26;&#x53ea;&#x6709;&#x4e24;&#x4e2a;,&#x659c;&#x7ebf; (/) &#x548c;&#x7a7a;&#x64cd;&#x4f5c;&#x7b26;(null) ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26012;&#32447;&#20998;&#38548;&#26500;&#25104;&#36335;&#24452;&#21517; (&#22312;&#19979;&#38754;&#35828;&#26126;)&#30340;&#21508;&#25991;&#20214;&#21517;,&#31354;&#25805;&#20316;&#31526;&#21017;&#32456;&#27490;&#19968;&#20010;&#36335;&#24452;&#21517;
    </p>
    <p>
      &#22909;&#30340;&#20064;&#24815;&#26159;&#21482;&#20351;&#29992;&#21360;&#21047;&#23383;&#31526;&#30340;&#19968;&#20010;&#23376;&#38598;&#20316;&#20026;&#25991;&#20214;&#21517;&#23383;&#31526; (&#21482;&#20351;&#29992;&#23376;&#38598;&#30340;&#29702;&#30001;&#26159;:
    </p>
    <p>
      &#22914;&#26524;&#22312;&#25991;&#20214;&#21517;&#20013;&#20351;&#29992;&#20102;&#26576;&#20123; shell&#29305;&#27530;&#23383;&#31526;,&#21017;&#24517;&#39035;&#20351;&#29992;shell&#30340;&#24341;&#21495;&#26426;&#21046;&#26469;&#24341;&#29992;&#25991;&#20214;&#21517;)&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388828125476" FOLDED="true" ID="ID_148425128" MODIFIED="1392030831757" TEXT="&#x8def;&#x5f84;&#x540d; ">
<node CREATED="1388828152337" ID="ID_1797826451" MODIFIED="1388828153824" TEXT="&#x4ee5; &#x659c;&#x7ebf;&#x5f00;&#x5934;&#x7684;&#x8def;&#x5f84;&#x540d;&#x79f0;&#x4e3a;&#x7edd;&#x5bf9;&#x8def;&#x5f84;&#x540d;( absolute pathname ) ,&#x5426;&#x5219;&#x79f0;&#x4e3a;&#x76f8;&#x5bf9;&#x8def;&#x5f84;&#x540d;( r e l a t i v e pathname) "/>
</node>
<node CREATED="1388832149906" ID="ID_1708533826" MODIFIED="1388832236434" TEXT="&#x5de5;&#x4f5c;&#x76ee;&#x5f55; |&#x5f53;&#x524d;&#x76ee;&#x5f55;"/>
<node CREATED="1388832159123" ID="ID_930633591" MODIFIED="1388832298877" TEXT="&#x8d77;&#x59cb;&#x76ee;&#x5f55;|home directory  "/>
</node>
<node CREATED="1388825645038" FOLDED="true" ID="ID_1052593648" MODIFIED="1388850162322" TEXT="&#x8f93;&#x5165;&#x548c;&#x8f93;&#x51fa;">
<node CREATED="1388837370163" ID="ID_424501980" MODIFIED="1388837438593" TEXT="&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20869;&#26680;&#29992;&#20197;&#26631;&#35782;&#19968;&#20010;&#29305;&#23450;&#36827;&#31243;&#27491;&#22312;&#23384;&#35775;&#30340;&#25991;&#20214;&#12290;
    </p>
    <p>
      &#24403;&#20869;&#26680;&#25171;&#24320;&#19968;&#20010;&#29616;&#23384;&#25991;&#20214;&#25110;&#21019;&#24314;&#19968;&#20010;&#26032;&#25991;&#20214;&#26102;,&#23427;&#23601;&#36820;&#22238;&#19968;&#20010;&#25991;&#20214;&#25551;&#36848;&#31526;&#12290;
    </p>
    <p>
      &#24403;&#35835;&#12289;&#20889;&#25991;&#20214;&#26102;,&#23601;&#21487;&#20351;&#29992;&#23427;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388837439500" ID="ID_1065357062" MODIFIED="1388837537336" TEXT="&#x6807;&#x51c6;&#x8f93;&#x5165;&#x3001;&#x6807;&#x51c6;&#x8f93;&#x51fa;&#x548c;&#x6807;&#x51c6;&#x51fa;&#x9519; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#27599;&#24403;&#36816;&#34892;&#19968;&#20010;&#26032;&#31243;&#24207;&#26102;,&#25152;&#26377;&#30340; shell&#37117;&#20026;&#20854;&#25171;&#24320;&#19977;&#20010;&#25991;&#20214;&#25551;&#36848;&#31526;:&#26631;&#20934;&#36755;&#20837;&#12289;&#26631;&#20934;&#36755;&#20986;&#20197;&#21450;&#26631;&#20934;&#20986;&#38169;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388837485678" FOLDED="true" ID="ID_1204808059" MODIFIED="1392030831757" TEXT="&#x4e0d;&#x7528;&#x7f13;&#x5b58;&#x7684; I/O ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20989;&#25968;o p e n&#12289;r e a d&#12289;w r i t e&#12289;l s e e k&#20197;&#21450;c l o s e&#25552;&#20379;&#20102;&#19981;&#29992;&#32531;&#23384;&#30340; I / O&#12290;&#36825;&#20123;&#20989;&#25968;&#37117;&#29992;&#25991;&#20214;&#25551;&#36848;&#31526;&#36827;&#34892;&#24037;&#20316;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388840320432" ID="ID_243357249" MODIFIED="1388840321725" TEXT="STDIN_FILENO "/>
<node CREATED="1388840327589" ID="ID_774504993" MODIFIED="1388840328692" TEXT="STDOUT_FILENO "/>
</node>
<node CREATED="1388840435635" ID="ID_1702513690" MODIFIED="1388841052568" TEXT="&#x6807;&#x51c6;I/O ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20351;&#29992;&#26631;&#20934; I/O&#21487;&#26080;&#38656;&#25285;&#24515;&#22914;&#20309;&#36873;&#21462;&#26368;&#20339;&#30340;&#32531;&#23384;&#38271;&#24230;
    </p>
    <p>
      &#21478;&#19968;&#20010;&#20351;&#29992;&#26631;&#20934; I / O&#20989;&#25968;&#30340;&#20248;&#28857;&#19982;&#22788;&#29702;&#36755;&#20837;&#34892;&#26377;&#20851; (&#24120;&#24120;&#21457;&#29983;&#22312;UNIX&#30340;&#24212;&#29992;&#20013;)&#12290;
    </p>
    <p>
      fgets&#20989;&#25968;&#35835;&#19968;&#23436;&#25972;&#30340;&#34892;,&#32780;&#21478;&#19968;&#26041;&#38754;, read&#20989;&#25968;&#35835;&#25351;&#23450;&#23383;&#33410;&#25968;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388825649344" FOLDED="true" ID="ID_693148179" MODIFIED="1388850161204" TEXT="&#x7a0b;&#x5e8f;&#x548c;&#x8fdb;&#x7a0b;">
<node CREATED="1388841751117" ID="ID_984931000" MODIFIED="1388841784005" TEXT="&#x7a0b;&#x5e8f; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#31243;&#24207;(program)&#26159;&#23384;&#25918;&#22312;&#30913;&#30424;&#25991;&#20214;&#20013;&#30340;&#21487;&#25191;&#34892;&#25991;&#20214;&#12290;&#20351;&#29992; 6&#20010;exec&#20989;&#25968;&#20013;&#30340;&#19968;&#20010;&#30001;&#20869;&#26680;&#23558; &#31243;&#24207;&#35835;&#20837;&#23384;&#20648;&#22120;,&#24182;&#20351;&#20854;&#25191;&#34892;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388841054259" ID="ID_1347408446" MODIFIED="1388841101363" TEXT="&#x8fdb;&#x7a0b;&#x548c;&#x8fdb;&#x7a0b; ID ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#31243;&#24207;&#30340;&#25191;&#34892;&#23454;&#20363;&#34987;&#31216;&#20026;&#36827;&#31243;( p r o c e s s)
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388841102069" FOLDED="true" ID="ID_1332258103" MODIFIED="1392030831757" TEXT="&#x8fdb;&#x7a0b;&#x63a7;&#x5236; ">
<node CREATED="1388842996745" ID="ID_20866678" MODIFIED="1388842998370" TEXT="fork"/>
<node CREATED="1388843000758" ID="ID_1319268834" MODIFIED="1388843013147" TEXT="exec"/>
<node CREATED="1388842998641" ID="ID_1693123902" MODIFIED="1388843000520" TEXT="wait"/>
</node>
</node>
<node CREATED="1388825670642" FOLDED="true" ID="ID_1807313596" MODIFIED="1388850157182" TEXT="ANSI C">
<node CREATED="1388842987511" ID="ID_1986873864" MODIFIED="1388842988639" TEXT="&#x51fd;&#x6570;&#x539f;&#x578b; "/>
<node CREATED="1388843635986" ID="ID_1177732012" MODIFIED="1388843737036" TEXT="&#x7c7b;&#x5c5e;&#x6307;&#x9488; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20989;&#25968;&#21407;&#22411;&#21644;&#31867;&#23646;&#25351;&#38024;&#30340;&#32452;&#21512;&#28040;&#21435;&#20102;&#24456;&#22810;&#38750; ANSI C &#32534;&#36753;&#31243;&#24207;&#38656;&#35201;&#30340;&#26174;&#24335;&#31867;&#22411;&#24378;&#21046;&#36716;&#25442;&#12290;
    </p>
    <p>
      malloc&#30340;&#21407;&#22411;&#20026;:
    </p>
    <p>
      void * malloc(size_t);
    </p>
    <p>
      &#36825;&#20351;&#24471;&#21487;&#20197;&#26377;&#22914;&#19979;&#31243;&#24207;&#27573;:
    </p>
    <p>
      int * ptr;
    </p>
    <p>
      ptr = malloc (1000 * sizeof(int));
    </p>
    <p>
      &#23427;&#26080;&#38656;&#23558;&#36820;&#22238;&#30340;&#25351;&#38024;&#24378;&#21046;&#36716;&#25442;&#25104; int * &#31867;&#22411;&#12290;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388843738019" FOLDED="true" ID="ID_1630376456" MODIFIED="1392030831757" TEXT="&#x539f;&#x59cb;&#x7cfb;&#x7edf;&#x6570;&#x636e;&#x7c7b;&#x578b; ">
<node CREATED="1388843743530" ID="ID_408844333" MODIFIED="1388843886453" TEXT="&#x4ee5;_ t&#x7ed3;&#x5c3e;&#x7684;&#x8fd9;&#x4e9b;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x88ab;&#x79f0;&#x4e3a;&#x539f;&#x59cb;&#x7cfb;&#x7edf;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x3002;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23427;&#20204;&#36890;&#24120;&#22312;&#22836;&#25991;&#20214; &lt; s y s / t y p e s . h &gt;&#20013;&#23450;&#20041;(&#22836;&#25991;&#20214;&lt;unistd.h&gt;&#24212;&#24050;&#21253;&#25324;&#35813;&#22836;&#25991;&#20214;)&#12290;
    </p>
    <p>
      &#23427;&#20204;&#30340;&#30446;&#30340;&#26159;&#38459;&#27490;&#31243;&#24207;&#20351;&#29992;&#19987;&#38376;&#30340;&#25968;&#25454;&#31867;&#22411;(&#20363;&#22914;int,short&#25110;long) &#26469;&#20801;&#35768;&#23545;&#20110;&#19968;&#31181;&#29305;&#23450;&#31995;&#32479;&#30340;&#27599;&#20010;&#23454;&#29616;&#36873;&#25321;&#25152;&#35201;&#27714;&#30340;&#25968;&#25454;&#31867;&#22411;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1388825687886" FOLDED="true" ID="ID_840979991" MODIFIED="1392030831757" TEXT="&#x51fa;&#x9519;&#x5904;&#x7406;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24403;UNIX&#20989;&#25968;&#20986;&#38169;&#26102;,&#24448;&#24120;&#36820;&#22238;&#19968;&#20010;&#36127;&#20540;,&#32780;&#19988;&#25972;&#22411;&#21464;&#37327;errno&#36890;&#24120;&#35774;&#32622;&#20026;&#20855;&#26377;&#29305;&#23450;&#20449;&#24687;&#30340;&#19968;&#20010;&#20540;&#12290;
    </p>
    <p>
      &#26576;&#20123;&#20989;&#25968;&#24182;&#19981;&#36820;&#22238;&#36127;&#20540;&#32780;&#26159;&#20351;&#29992;&#21478;&#19968;&#31181;&#32422;&#23450;&#12290;&#20363;&#22914;,&#36820;&#22238;&#19968;&#20010;&#25351;&#21521;&#23545;&#35937;&#30340;&#25351;&#38024;&#30340;&#22823;&#22810;&#25968;&#20989;&#25968;,&#22312;&#20986;&#38169;&#26102;,&#23558;&#36820;&#22238;&#19968;&#20010;null&#25351;&#38024;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388844014976" ID="ID_44413152" MODIFIED="1388844016698" TEXT="&#x6587;&#x4ef6;&lt;errno.h&gt;&#x4e2d;&#x5b9a;&#x4e49;&#x4e86;&#x53d8;&#x91cf;errno&#x4ee5;&#x53ca;&#x53ef;&#x4ee5;&#x8d4b;&#x4e0e;&#x5b83;&#x7684;&#x5404;&#x79cd;&#x5e38;&#x6570;&#x3002; "/>
<node CREATED="1388845649319" FOLDED="true" ID="ID_259947776" MODIFIED="1392030831757" TEXT="errno">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23545;&#20110;errno&#24212;&#24403;&#30693;&#36947;&#20004;&#26465;&#35268;&#21017;&#12290;
    </p>
    <p>
      &#31532;&#19968;&#26465;&#35268;&#21017;&#26159;:&#22914;&#26524;&#27809;&#26377;&#20986;&#38169;,&#21017;&#20854;&#20540;&#19981;&#20250;&#34987;&#19968;&#20010;&#20363;&#31243;&#28165;&#38500;&#12290;&#22240;&#27492;,&#20165;&#24403;&#20989;&#25968;&#30340;&#36820;&#22238;&#20540;&#25351;&#26126;&#20986;&#38169;&#26102;,&#25165;&#26816;&#39564;&#20854;&#20540;&#12290;
    </p>
    <p>
      &#31532;&#20108;&#26465;&#26159;:&#20219;&#19968;&#20989;&#25968;&#37117;&#19981;&#20250;&#23558; e r r n o&#20540;&#35774;&#32622;&#20026;0,&#22312;&lt;errno.h&gt;&#20013;&#23450;&#20041;&#30340;&#25152;&#26377;&#24120;&#25968;&#37117;&#19981;&#20026; 0&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388845702026" ID="ID_301528717" MODIFIED="1388845703544" TEXT="s t r e r r o r "/>
<node CREATED="1388845758072" ID="ID_709926094" MODIFIED="1388845759410" TEXT="p e r r o r "/>
</node>
<node CREATED="1391692990178" FOLDED="true" ID="ID_1235965752" MODIFIED="1392030831757" TEXT="supports multithreaded access to errno by defining it as ">
<node CREATED="1391693000311" ID="ID_1645642232" MODIFIED="1391693002051" TEXT="extern int *_ _errno_location(void); "/>
<node CREATED="1391693008738" ID="ID_1908811369" MODIFIED="1391693010473" TEXT="#define errno (*_ _errno_location()) "/>
</node>
</node>
<node CREATED="1388825693436" FOLDED="true" ID="ID_1992885639" MODIFIED="1388850159474" TEXT="&#x7528;&#x6237;&#x6807;&#x8bc6;">
<node CREATED="1388846391773" ID="ID_24908745" MODIFIED="1388846392593" TEXT="&#x7528;&#x6237;ID "/>
<node CREATED="1388846501604" ID="ID_80113687" MODIFIED="1388846502738" TEXT="&#x7ec4;ID "/>
<node CREATED="1388846708668" FOLDED="true" ID="ID_1290438384" MODIFIED="1392030831758" TEXT="&#x6dfb;&#x52a0;&#x7ec4;ID ">
<node CREATED="1388846781864" ID="ID_1427287203" MODIFIED="1388846783737" TEXT="&#x4e00;&#x4e2a;&#x7528;&#x6237;&#x5c5e;&#x4e8e;&#x53e6; &#x5916;&#x4e00;&#x4e9b;&#x7ec4; "/>
</node>
</node>
<node CREATED="1388825699216" FOLDED="true" ID="ID_1141077136" MODIFIED="1388935470121" TEXT="&#x4fe1;&#x53f7;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26159;&#36890;&#30693;&#36827;&#31243;&#24050;&#21457;&#29983;&#26576;&#31181;&#26465;&#20214;&#30340;&#19968;&#31181;&#25216;&#26415;&#12290;&#20363;&#22914;,&#33509;&#26576;&#19968;&#36827;&#31243;&#25191;&#34892;&#38500;&#27861;&#25805;&#20316;,&#20854;&#38500;&#25968;&#20026;0,&#21017;&#23558;&#21517;&#20026;SIGFPE&#30340;&#20449;&#21495;&#21457;&#36865;&#32473;&#35813;&#36827;&#31243;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388847082516" FOLDED="true" ID="ID_1839468733" MODIFIED="1392030831758" TEXT="&#x8fdb;&#x7a0b;&#x5982;&#x4f55;&#x5904;&#x7406;&#x4fe1;&#x53f7;&#x6709;&#x4e09;&#x79cd;&#x9009;&#x62e9;: ">
<node CREATED="1388847094193" ID="ID_1429942507" MODIFIED="1388847095368" TEXT="&#x5ffd;&#x7565;&#x8be5;&#x4fe1;&#x53f7;&#x3002; "/>
<node CREATED="1388847102211" ID="ID_1250840819" MODIFIED="1388847103469" TEXT=" &#x6309;&#x7cfb;&#x7edf;&#x9ed8;&#x8ba4;&#x65b9;&#x5f0f;&#x5904;&#x7406; "/>
<node CREATED="1388847113252" ID="ID_948591312" MODIFIED="1388847114184" TEXT="&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x51fd;&#x6570; "/>
</node>
<node CREATED="1388847172467" FOLDED="true" ID="ID_998407373" MODIFIED="1392030831758" TEXT="&#x5f88;&#x591a;&#x6761;&#x4ef6;&#x4f1a;&#x4ea7;&#x751f;&#x4fe1;&#x53f7; ">
<node CREATED="1388847179308" FOLDED="true" ID="ID_967501233" MODIFIED="1392030831758" TEXT="&#x4e24;&#x79cd;&#x952e;&#x76d8;&#x65b9;&#x5f0f; ">
<node CREATED="1388847187491" ID="ID_1926831582" MODIFIED="1388847188616" TEXT="&#x4e2d;&#x65ad;&#x952e; "/>
<node CREATED="1388847195603" ID="ID_264675066" MODIFIED="1388847196583" TEXT="&#x9000;&#x51fa;&#x952e; "/>
</node>
<node CREATED="1388847220457" FOLDED="true" ID="ID_871159182" MODIFIED="1392030831758" TEXT=" k i l l ">
<node CREATED="1388847262305" ID="ID_1129912397" MODIFIED="1388847263580" TEXT="&#x5f53;&#x5411;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x53d1;&#x9001;&#x4fe1;&#x53f7;&#x65f6;,&#x6211;&#x4eec;&#x5fc5;&#x9700;&#x662f;&#x8be5;&#x8fdb;&#x7a0b;&#x7684;&#x6240;&#x6709;&#x8005;&#x3002; "/>
</node>
</node>
</node>
<node CREATED="1388825703728" FOLDED="true" ID="ID_1948808908" MODIFIED="1388850167032" TEXT="Unix&#x65f6;&#x95f4;&#x503c;">
<node CREATED="1388847793569" FOLDED="true" ID="ID_786573841" MODIFIED="1392030831758" TEXT="&#x4e24;&#x79cd;&#x4e0d;&#x540c;&#x7684;&#x65f6;&#x95f4;&#x503c; ">
<node CREATED="1388847800288" ID="ID_445331430" MODIFIED="1388847845373" TEXT="&#x65e5;&#x5386;&#x65f6;&#x95f4; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#33258;1970&#24180;1&#26376;1&#26085;00:00:00&#20197;&#26469;&#22269;&#38469;&#26631;&#20934;&#26102;&#38388;(UTC)&#25152;&#32463;&#36807;&#30340;&#31186;&#25968;&#32047;
    </p>
    <p>
      &#35745;&#20540;(&#26089;&#26399;&#30340;&#25163;&#20876;&#31216; U T C&#20026;&#26684;&#26519;&#23612;&#27835;&#26631;&#20934;&#26102;&#38388;)
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388847817329" FOLDED="true" ID="ID_150149779" MODIFIED="1392030831758" TEXT="&#x8fdb;&#x7a0b;&#x65f6;&#x95f4;&#x3002;&#x8fd9;&#x4e5f;&#x88ab;&#x79f0;&#x4e3a; C P U&#x65f6;&#x95f4; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#29992;&#20197;&#24230;&#37327;&#36827;&#31243;&#20351;&#29992;&#30340;&#20013;&#22830;&#22788;&#29702;&#26426;&#36164;&#28304;
    </p>
    <p>
      &#36827;&#31243;&#26102;&#38388;&#20197;&#26102;&#38047;&#28404;&#31572;&#35745;&#31639;,&#22810;&#24180;&#26469;,&#27599;&#31186;&#38047;&#21462;&#20026; 50&#12289;60&#25110;100&#20010;&#28404;&#31572;&#12290;&#31995;&#32479;&#22522;&#26412;&#25968;&#25454;&#31867;&#22411; clock_t&#20445;&#23384;&#36825;&#31181;&#26102;&#38388;&#20540;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388847985468" FOLDED="true" ID="ID_1979110553" MODIFIED="1392030831758" TEXT="&#x5ea6;&#x91cf;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x7684;&#x6267;&#x884c;&#x65f6;&#x95f4; ">
<node CREATED="1388847998743" ID="ID_1317016665" MODIFIED="1388848067776" TEXT="&#x65f6;&#x949f;&#x65f6;&#x95f4; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23427;&#26159;&#36827;&#31243;&#36816;&#34892;&#30340;&#26102;&#38388;&#24635;&#37327;,&#20854;&#20540;&#19982;&#31995;&#32479;&#20013;&#21516;&#26102;&#36816;&#34892;&#30340;&#36827;&#31243;&#25968;&#26377;&#20851;&#12290;&#22312;&#25105;&#20204;&#25253;&#21578;&#26102;&#38047;&#26102;&#38388;&#26102;,&#37117;&#26159;&#22312;&#31995;&#32479;&#20013;&#27809;&#26377;&#20854;&#20182;&#27963;&#21160;&#26102;&#36827;&#34892;&#24230;&#37327;&#30340;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388848006035" ID="ID_638490608" MODIFIED="1388848079416" TEXT="&#x7528;&#x6237;CPU&#x65f6;&#x95f4; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#29992;&#25143;C P U&#26102;&#38388;&#26159;&#25191;&#34892;&#29992;&#25143;&#25351;&#20196;&#25152;&#29992;&#30340;&#26102;&#38388;&#37327;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388848013054" ID="ID_1799756580" MODIFIED="1388848085400" TEXT="&#x7cfb;&#x7edf;CPU&#x65f6;&#x95f4; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25191;&#34892;&#20869;&#26680;&#25152;&#32463;&#21382;&#30340;&#26102;&#38388;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388848130841" ID="ID_772102717" MODIFIED="1388848133472" TEXT="time"/>
</node>
</node>
</node>
<node CREATED="1388825721217" ID="ID_1144318902" MODIFIED="1388825729256" TEXT="&#x7cfb;&#x7edf;&#x8c03;&#x7528;&#x548c;&#x5e93;&#x51fd;&#x6570;"/>
<node CREATED="1388825731754" FOLDED="true" ID="ID_1901148502" MODIFIED="1392030831758" TEXT="&#x5c0f;&#x7ed3;">
<node CREATED="1388850063110" ID="ID_456555537" MODIFIED="1388850097576" TEXT="&#x80fd;&#x8fd0;&#x884c;497&#x5929;"/>
<node CREATED="1388850098184" ID="ID_10467189" MODIFIED="1388850123135" TEXT="&#x65f6;&#x95f4;&#x5230;2106&#x5e74;&#x6ea2;&#x51fa;"/>
</node>
</node>
<node CREATED="1388832083566" ID="ID_603060085" MODIFIED="1392030836628" POSITION="left" TEXT="&#x4e00;&#x4e9b;&#x96f6;&#x788e;">
<node CREATED="1388832096636" ID="ID_1506824430" MODIFIED="1388832097542" TEXT="&#x6309;&#x60ef;&#x4f8b;,&#x53c2;&#x6570; 0&#x7684;&#x610f;&#x601d;&#x662f; &#x6b63;&#x5e38;&#x7ed3;&#x675f;,&#x53c2;&#x6570;&#x503c; 1~255&#x5219;&#x8868;&#x793a;&#x51fa;&#x9519; "/>
<node CREATED="1389958915485" ID="ID_481011001" MODIFIED="1389958917644" TEXT="&#x5f53;&#x6b63;&#x5728;&#x8bfb;&#x4e00;&#x4e2a;&#x8f93;&#x5165;&#x6d41;,&#x5e76;&#x8fdb;&#x884c;&#x67d0;&#x79cd;&#x5f62;&#x5f0f;&#x7684;&#x5206;&#x5b57;&#x6216;&#x5206;&#x8bb0;&#x53f7;&#x64cd;&#x4f5c;&#x65f6;,&#x4f1a;&#x7ecf;&#x5e38;&#x7528;&#x5230;&#x56de;&#x9001;&#x5b57;&#x7b26;&#x64cd;&#x4f5c;&#x3002; &#x6709;&#x65f6;&#x9700;&#x8981;&#x5148;&#x770b;&#x4e00;&#x770b;&#x4e0b;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;,&#x4ee5;&#x51b3;&#x5b9a;&#x5982;&#x4f55;&#x5904;&#x7406;&#x5f53;&#x524d;&#x5b57;&#x7b26;&#x3002;&#x7136;&#x540e;&#x5c31;&#x9700;&#x8981;&#x65b9;&#x4fbf;&#x5730;&#x5c06;&#x521a;&#x67e5;&#x770b;&#x7684;&#x5b57;&#x7b26; &#x9001;&#x56de;,&#x4ee5;&#x4fbf;&#x4e0b;&#x4e00;&#x6b21;&#x8c03;&#x7528; getc&#x65f6;&#x8fd4;&#x56de;&#x8be5;&#x5b57;&#x7b26;&#x3002;&#x5982;&#x679c;&#x6807;&#x51c6; I/O&#x5e93;&#x4e0d;&#x63d0;&#x4f9b;&#x56de;&#x9001;&#x80fd;&#x529b;,&#x5c31;&#x9700;&#x5c06;&#x8be5;&#x5b57;&#x7b26;&#x5b58;&#x653e; &#x5230;&#x4e00;&#x4e2a;&#x6211;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x53d8;&#x91cf;&#x4e2d;,&#x5e76;&#x8bbe;&#x7f6e;&#x4e00;&#x4e2a;&#x6807;&#x5fd7;&#x4ee5;&#x4fbf;&#x5224;&#x522b;&#x5728;&#x4e0b;&#x4e00;&#x6b21;&#x9700;&#x8981;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x65f6;&#x662f;&#x8c03;&#x7528; getc,&#x8fd8; &#x662f;&#x4ece;&#x6211;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x53d8;&#x91cf;&#x4e2d;&#x53d6;&#x7528;&#x3002; "/>
<node CREATED="1390273891402" FOLDED="true" ID="ID_1737279723" MODIFIED="1392030831758" TEXT="what&apos;s the meas of setuid ">
<icon BUILTIN="help"/>
<node CREATED="1391266139496" ID="ID_1258781298" MODIFIED="1391266150824" TEXT="linux &#x4e0d;&#x8d77;&#x4f5c;&#x7528;&#x5417;"/>
</node>
<node CREATED="1391266105484" ID="ID_396109468" MODIFIED="1391267197964" TEXT="execl(&quot;/bin/sh&quot;, &quot;-sh&quot;, (char *)0); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The minus sign as the first character of argv[0] is a flag to all the shells that they are
    </p>
    <p>
      being invoked as a login shell. The shells can look at this character and modify their start-
    </p>
    <p>
      up accordingly.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1391268680182" ID="ID_1774630511" MODIFIED="1391268687197" TEXT="inetd"/>
<node CREATED="1391268708396" FOLDED="true" ID="ID_1762602717" MODIFIED="1392030840539" TEXT="init">
<node CREATED="1391268712288" FOLDED="true" ID="ID_313579494" MODIFIED="1392030831759" TEXT="shell /etc/rc">
<node CREATED="1391268748139" FOLDED="true" ID="ID_133934757" MODIFIED="1392030831758" TEXT="inetd">
<node CREATED="1391268766094" ID="ID_961325797" MODIFIED="1391268770906" TEXT="wait request"/>
<node CREATED="1391268780350" ID="ID_760754207" MODIFIED="1391268838796" TEXT="fork and exec appropriate program"/>
</node>
</node>
</node>
</node>
<node CREATED="1388850344181" FOLDED="true" ID="ID_1356394570" MODIFIED="1389068502855" POSITION="right" TEXT="Unix&#x6807;&#x51c6;&#x5316;&#x53ca;&#x5b9e;&#x73b0;">
<node CREATED="1388850359328" FOLDED="true" ID="ID_1505898779" MODIFIED="1392030831761" TEXT="Unix&#x6807;&#x51c6;&#x5316;">
<node CREATED="1388850425620" ID="ID_85845027" MODIFIED="1388850430177" TEXT="ANSI C"/>
<node CREATED="1388850431287" FOLDED="true" ID="ID_1616365650" MODIFIED="1392030831760" TEXT="IEEE POSIX">
<node CREATED="1388922447180" ID="ID_448064538" MODIFIED="1388922448505" TEXT="IEEE 1003.1 "/>
<node CREATED="1388922457067" ID="ID_1352225559" MODIFIED="1388922458149" TEXT="1003.1a "/>
</node>
<node CREATED="1388850446252" FOLDED="true" ID="ID_1758152917" MODIFIED="1392030831760" TEXT="X/Open XPG3">
<node CREATED="1388922470282" ID="ID_776404941" MODIFIED="1388935470151" TEXT="X/Open&#x662f;&#x4e00;&#x4e2a;&#x56fd;&#x9645;&#x8ba1;&#x7b97;&#x673a;&#x5236;&#x9020;&#x5546;&#x7ec4;&#x7ec7; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23427;&#25552;&#20986;&#20102;&#19968;&#20010;7&#21367;&#26412;&#21487;&#31227;&#26893;&#24615;&#25351;&#21335;X/Open Portability
    </p>
    <p>
      Guide (X/Open&#21487;&#31227;&#26893;&#24615;&#25351;&#21335;)&#31532;3&#29256;&#12308;X/Open 1989&#12309;
    </p>
    <p>
      &#25105;&#20204;&#23558;&#20854;&#31216;&#20043;&#20026;XPG3
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388850458513" FOLDED="true" ID="ID_1868187500" MODIFIED="1392030831760" TEXT="FIPS">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      FIPS&#30340;&#21547;&#20041;&#26159;&#32852;&#37030;&#20449;&#24687;&#22788;&#29702;&#26631;&#20934; (Federal Information Processing Standard),&#36825;&#20123;&#26631;&#20934;&#26159;&#30001;
    </p>
    <p>
      &#32654;&#22269;&#25919;&#24220;&#20986;&#29256;&#30340;,&#24182;&#30001;&#32654;&#22269;&#25919;&#24220;&#29992;&#20110;&#35745;&#31639;&#26426;&#31995;&#32479;&#30340;&#37319;&#36141;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1388922570620" ID="ID_1561567936" MODIFIED="1388922571888" TEXT=" F I P S 1 5 1 - 1 "/>
<node CREATED="1388922589310" FOLDED="true" ID="ID_598870906" MODIFIED="1392030831760" TEXT="POSIX.1 FIPS ">
<node CREATED="1388922620495" ID="ID_1095366947" MODIFIED="1388922622150" TEXT="&#x5b83;&#x53ea;&#x662f;&#x4e00;&#x4e2a;&#x66f4;&#x52a0;&#x4e25;&#x683c;&#x7684;POSIX.1&#x6807;&#x51c6;&#x3002; "/>
</node>
</node>
<node CREATED="1388921287434" FOLDED="true" ID="ID_1513903013" MODIFIED="1388921934328" TEXT="&#x6807;&#x51c6;&#x5934;&#x6587;&#x4ef6;">
<node CREATED="1388921296785" ID="ID_1194848078" MODIFIED="1388921303217" TEXT="assert.h"/>
<node CREATED="1388921304120" ID="ID_858018660" MODIFIED="1388921307434" TEXT="cpio.h"/>
<node CREATED="1388921307953" ID="ID_456152488" MODIFIED="1388921312831" TEXT="ctype.h"/>
<node CREATED="1388921313849" ID="ID_1506243802" MODIFIED="1388921317547" TEXT="dirent.h"/>
<node CREATED="1388921318101" ID="ID_1390826885" MODIFIED="1388921323108" TEXT="errno.h"/>
<node CREATED="1388921323656" ID="ID_441429921" MODIFIED="1388921326909" TEXT="fcntl.h"/>
<node CREATED="1388921327563" ID="ID_1924616555" MODIFIED="1388921330783" TEXT="float.h"/>
<node CREATED="1388921331189" FOLDED="true" ID="ID_1254348744" MODIFIED="1392030831760" TEXT="ftw.h">
<node CREATED="1388921351862" ID="ID_1971698851" MODIFIED="1388921363888" TEXT="&#x6587;&#x4ef6;&#x6811;&#x6f2b;&#x6e38;&#xff1f;&#xff1f;">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1388921366436" FOLDED="true" ID="ID_1849978334" MODIFIED="1392030831760" TEXT="grp.h">
<node CREATED="1388921383349" ID="ID_1479501514" MODIFIED="1388921387853" TEXT="group"/>
</node>
<node CREATED="1388921390504" FOLDED="true" ID="ID_1784379784" MODIFIED="1392030831760" TEXT="langinfo.h">
<node CREATED="1388921400410" ID="ID_124511863" MODIFIED="1388921407979" TEXT="&#x8bed;&#x8a00;&#x4fe1;&#x606f;&#x5e38;&#x91cf;"/>
</node>
<node CREATED="1388921409902" FOLDED="true" ID="ID_1370819348" MODIFIED="1392030831760" TEXT="limits.h">
<node CREATED="1388921421686" ID="ID_1493629031" MODIFIED="1388921426800" TEXT="&#x4e00;&#x4e9b;&#x5e38;&#x91cf;"/>
</node>
<node CREATED="1388921427903" FOLDED="true" ID="ID_905582492" MODIFIED="1392030831760" TEXT="locale.h">
<node CREATED="1388921440723" ID="ID_944718127" MODIFIED="1388921452200" TEXT="&#x672c;&#x5730;&#x7c7b;&#x522b;">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1388921455849" ID="ID_1316757357" MODIFIED="1388921460228" TEXT="math.h"/>
<node CREATED="1388921464036" FOLDED="true" ID="ID_1665841437" MODIFIED="1392030831760" TEXT="nl_types.h">
<node CREATED="1388921478781" ID="ID_337278853" MODIFIED="1388921485954" TEXT="&#x6d88;&#x606f;&#x7c7b;&#x522b;"/>
</node>
<node CREATED="1388921488212" FOLDED="true" ID="ID_1939049598" MODIFIED="1392030831760" TEXT="pwd.h">
<node CREATED="1388921500011" ID="ID_358247715" MODIFIED="1388921505804" TEXT="&#x53e3;&#x4ee4;"/>
</node>
<node CREATED="1388921507917" ID="ID_1598623298" MODIFIED="1388921511828" TEXT="regex.h"/>
<node CREATED="1388921516184" FOLDED="true" ID="ID_1653560690" MODIFIED="1392030831760" TEXT="search.h">
<node CREATED="1388921528286" ID="ID_1675847530" MODIFIED="1388921548055" TEXT="&#x641c;&#x7d22;&#x8868;">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1388921534215" FOLDED="true" ID="ID_1576254343" MODIFIED="1392030831760" TEXT="setjmp.h">
<node CREATED="1388921560389" ID="ID_1557601148" MODIFIED="1388921573853" TEXT="&#x975e;&#x5c40;&#x90e8;goto">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1388921578150" ID="ID_1049054226" MODIFIED="1388921583244" TEXT="signal.h"/>
<node CREATED="1388921584691" ID="ID_1891152047" MODIFIED="1388921587772" TEXT="stdarg.h"/>
<node CREATED="1388921588243" FOLDED="true" ID="ID_775364638" MODIFIED="1392030831760" TEXT="stddef.h">
<node CREATED="1388921599068" ID="ID_331641405" MODIFIED="1388921606821" TEXT="&#x6807;&#x51c6;&#x5b9a;&#x4e49;">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1388921608831" ID="ID_904800138" MODIFIED="1388921618639" TEXT="stdio.h"/>
<node CREATED="1388921618996" ID="ID_141181907" MODIFIED="1388921622967" TEXT="stdlib.h"/>
<node CREATED="1388921624272" ID="ID_726104038" MODIFIED="1388921626247" TEXT="string.h"/>
<node CREATED="1388921627261" FOLDED="true" ID="ID_950009564" MODIFIED="1392030831760" TEXT="tar.h">
<node CREATED="1388921634326" ID="ID_1816343938" MODIFIED="1388921644896" TEXT="tar&#x5f52;&#x6863;&#x503c;"/>
</node>
<node CREATED="1388921660768" FOLDED="true" ID="ID_1207188679" MODIFIED="1392030831760" TEXT="termios.h">
<node CREATED="1388921669769" ID="ID_1128460982" MODIFIED="1388921675228" TEXT="&#x7ec8;&#x7aef;IO"/>
</node>
<node CREATED="1388921678909" ID="ID_138440017" MODIFIED="1388921684849" TEXT="time.h"/>
<node CREATED="1388921690271" FOLDED="true" ID="ID_899892314" MODIFIED="1392030831760" TEXT="ulimit.h">
<node CREATED="1388921698234" ID="ID_395873335" MODIFIED="1388921704817" TEXT="&#x7528;&#x6237;&#x9650;&#x5236;"/>
</node>
<node CREATED="1388921708670" FOLDED="true" ID="ID_51688131" MODIFIED="1392030831760" TEXT="unistd.h">
<node CREATED="1388921719933" ID="ID_1865146253" MODIFIED="1388921725556" TEXT="&#x7b26;&#x53f7;&#x5e38;&#x91cf;"/>
</node>
<node CREATED="1388921727135" FOLDED="true" ID="ID_851321723" MODIFIED="1392030831760" TEXT="utime.h">
<node CREATED="1388921737941" ID="ID_189285999" MODIFIED="1388921742592" TEXT="&#x6587;&#x4ef6;&#x65f6;&#x95f4;"/>
</node>
<node CREATED="1388921743985" ID="ID_1810473535" MODIFIED="1388921752259" TEXT="sys/ipc.h"/>
<node CREATED="1388921756718" FOLDED="true" ID="ID_1369337716" MODIFIED="1392030831760" TEXT="sys/msg.h">
<node CREATED="1388921881359" ID="ID_632328800" MODIFIED="1388921893572" TEXT="&#x6d88;&#x606f;&#x961f;&#x5217;"/>
</node>
<node CREATED="1388921761894" FOLDED="true" ID="ID_1926928072" MODIFIED="1392030831760" TEXT="sys/sem.h">
<node CREATED="1388921904156" ID="ID_1262066610" MODIFIED="1388921905327" TEXT="&#x4fe1;&#x53f7;&#x91cf; "/>
</node>
<node CREATED="1388921768676" FOLDED="true" ID="ID_874690281" MODIFIED="1392030831760" TEXT="sys/shm.h">
<node CREATED="1388921912743" ID="ID_913448988" MODIFIED="1388921915188" TEXT="&#x5171;&#x4eab;&#x5b58;&#x50a8;"/>
</node>
<node CREATED="1388921773256" ID="ID_17940763" MODIFIED="1388921778839" TEXT="sys/stat.h"/>
<node CREATED="1388921779409" FOLDED="true" ID="ID_1261213304" MODIFIED="1392030831760" TEXT="sys/times.h">
<node CREATED="1388921845121" ID="ID_876397065" MODIFIED="1388921847780" TEXT="&#x8fdb;&#x7a0b;&#x65f6;&#x95f4;"/>
</node>
<node CREATED="1388921785045" FOLDED="true" ID="ID_50908978" MODIFIED="1392030831761" TEXT="sys/types.h">
<node CREATED="1388921855548" ID="ID_477709550" MODIFIED="1388921857315" TEXT="&#x539f;&#x7cfb;&#x7edf;&#x6570;&#x636e;&#x7c7b;&#x578b; "/>
</node>
<node CREATED="1388921789825" FOLDED="true" ID="ID_870179447" MODIFIED="1392030831761" TEXT="sys/utsname.h">
<node CREATED="1388921823371" ID="ID_292959443" MODIFIED="1388921827881" TEXT="&#x7cfb;&#x7edf;&#x540d;&#x79f0;"/>
</node>
<node CREATED="1388921802052" FOLDED="true" ID="ID_1529433325" MODIFIED="1392030831761" TEXT="sys/wait.h">
<node CREATED="1388921830777" ID="ID_1112709739" MODIFIED="1388921833380" TEXT="&#x8fdb;&#x7a0b;&#x63a7;&#x5236;"/>
</node>
</node>
</node>
<node CREATED="1388850365877" FOLDED="true" ID="ID_602326939" MODIFIED="1392030831761" TEXT="Unix&#x5b9e;&#x73b0;">
<node CREATED="1388850463879" FOLDED="true" ID="ID_1397911331" MODIFIED="1392030831761" TEXT="SVR4">
<node CREATED="1388922923445" FOLDED="true" ID="ID_1473727093" MODIFIED="1392030831761" TEXT="&#x6c47;&#x96c6; ">
<node CREATED="1388922932337" ID="ID_693786576" MODIFIED="1388922933438" TEXT=" AT&amp;T UNIX &#x7cfb;&#x7edf;V&#x7b2c; 3.2&#x7248;(SVR3.2) "/>
<node CREATED="1388922942339" ID="ID_739138446" MODIFIED="1388922944751" TEXT="Sun &#x516c;&#x53f8;&#x7684;S u nO S&#x7cfb;&#x7edf; "/>
<node CREATED="1388922946431" ID="ID_1703170481" MODIFIED="1388922956804" TEXT="&#x52a0;&#x5dde;&#x5927;&#x5b66;&#x4f2f;&#x514b;&#x5229;&#x5206;&#x6821;&#x7684; 4.3BSD "/>
<node CREATED="1388922970220" ID="ID_1396563147" MODIFIED="1388922971359" TEXT="&#x5fae;&#x8f6f;&#x7684;Xenix&#x7cfb;&#x7edf; "/>
</node>
<node CREATED="1388922993972" ID="ID_1260322877" MODIFIED="1388922995481" TEXT="SVR4&#x7b26;&#x5408;POSIX 1003.1&#x6807;&#x51c6;&#x548c;X/Open XPG3&#x6807;&#x51c6; "/>
</node>
<node CREATED="1388850470919" ID="ID_1881084831" MODIFIED="1388935470198" TEXT="4.3+BSD">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      B S D&#26159;&#30001;&#21152;&#24030;&#22823;&#23398;&#20271;&#20811;&#21033;&#20998;&#26657;&#30340;&#35745;&#31639;&#26426;&#31995;&#32479;&#30740;&#31350;&#32452;&#30740;&#31350;&#24320;&#21457;&#21644;&#20998;&#21457;&#30340;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388922707433" FOLDED="true" ID="ID_351616533" MODIFIED="1392030831761" TEXT="PDP-11 ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      v6 v7
    </p>
  </body>
</html></richcontent>
<node CREATED="1388922797160" FOLDED="true" ID="ID_1593022635" MODIFIED="1392030831761" TEXT="AT&amp;T&#x5206;&#x652f; ">
<node CREATED="1388922815520" ID="ID_1305304191" MODIFIED="1388922817308" TEXT="&#x7cfb;&#x7edf;III&#x548c;&#x7cfb;&#x7edf;V "/>
</node>
<node CREATED="1388922834604" FOLDED="true" ID="ID_1329361795" MODIFIED="1392030831761" TEXT="&#x52a0;&#x5dde;&#x5927;&#x5b66;&#x4f2f;&#x514b;&#x5229;&#x5206;&#x6821;&#x5206;&#x652f; ">
<node CREATED="1388922842339" ID="ID_1711321336" MODIFIED="1388922843885" TEXT="4.xBSD "/>
</node>
<node CREATED="1388922853755" FOLDED="true" ID="ID_1724657096" MODIFIED="1392030831761" TEXT="AT&amp;T&#x8d1d;&#x5c14;&#x5b9e;&#x9a8c;&#x5ba4; ">
<node CREATED="1388922870741" ID="ID_1422826686" MODIFIED="1388922872021" TEXT="&#x7b2c;8&#x3001;&#x7b2c;9&#x548c;&#x7b2c;10&#x7248; "/>
</node>
</node>
</node>
<node CREATED="1388850485699" FOLDED="true" ID="ID_924173964" MODIFIED="1392030831761" TEXT="&#x6807;&#x51c6;&#x4e0e;&#x5b9e;&#x73b0;&#x7684;&#x5173;&#x7cfb;">
<node CREATED="1388923344075" ID="ID_466112568" MODIFIED="1388923345252" TEXT="&#x6807;&#x51c6;&#x5b9a;&#x4e49;&#x4e86;&#x4efb;&#x4e00;&#x5b9e;&#x9645;&#x7cfb;&#x7edf;&#x7684;&#x5b50;&#x96c6;&#x3002; "/>
</node>
<node CREATED="1388850370919" FOLDED="true" ID="ID_1922211888" MODIFIED="1388930173556" TEXT="&#x9650;&#x5236;">
<node CREATED="1388850498829" FOLDED="true" ID="ID_1899521638" MODIFIED="1392030831761" TEXT="ANSI C&#x9650;&#x5236;">
<node CREATED="1388925021835" ID="ID_705683720" MODIFIED="1388925022915" TEXT="&#x6240;&#x6709;&#x7531;ANSI C&#x5b9a;&#x4e49;&#x7684;&#x9650;&#x5236;&#x90fd;&#x662f;&#x7f16;&#x8bd1;&#x65f6;&#x95f4;&#x9650;&#x5236; "/>
</node>
<node CREATED="1388850509659" ID="ID_1622881210" MODIFIED="1388925741625" TEXT="POSIX&#x9650;&#x5236;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#38382;&#39064;&#26159;&#25152;&#26377;&#36825; 1 3&#20010;&#23454;&#29616;&#20540;&#24182;&#19981;&#33021;&#30830;&#20445;&#22312; &lt;limit.h&gt;&#22836;&#25991;&#20214;&#20013;&#23450;&#20041;
    </p>
    <p>
      &#26576;&#20010;&#29305;&#23450;&#20540;&#21487;&#33021;&#19981;&#22312;&#27492;&#22836;&#25991;&#20214;&#20013;&#23450;&#20041;&#30340;&#29702;&#30001;&#26159;:&#23545;&#20110;&#19968;&#20010;&#32473;&#23450;&#36827;&#31243;&#30340;
    </p>
    <p>
      &#23454;&#38469;&#20540;&#21487;&#33021;&#20381;&#36182;&#20110;&#31995;&#32479;&#30340;&#23384;&#20648;&#22120;&#24635;&#37327;
    </p>
    <p>
      &#22914;&#26524;&#27809;&#26377;&#22312;&#22836;&#25991;&#20214;&#20013;&#23450;&#20041;&#23427;&#20204;,&#21017;&#19981;&#33021;&#22312;&#32534;&#35793;&#26102;&#20351;&#29992;&#23427;
    </p>
    <p>
      &#20204;&#20316;&#20026;&#25968;&#32452;&#36793;&#30028;&#12290;&#25152;&#20197;, POSIX.1&#20915;&#23450;&#25552;&#20379;&#19977;&#20010;&#36816;&#34892;&#26102;&#38388;&#20989;&#25968;&#20197;&#20379;&#35843;&#29992;: sysconf, pathconf&#20197;&#21450;
    </p>
    <p>
      fpathconf,&#29992;&#23427;&#20204;&#21487;&#20197;&#22312;&#36816;&#34892;&#26102;&#38388;&#24471;&#21040;&#23454;&#38469;&#30340;&#23454;&#29616;&#20540;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388850514947" ID="ID_165288085" MODIFIED="1388850520565" TEXT="XPG3&#x9650;&#x5236;"/>
<node CREATED="1388850520863" FOLDED="true" ID="ID_407849348" MODIFIED="1388930169451" TEXT="sysconf&#xff0c;pathconf&#x548c;fpathconf&#x51fd;&#x6570;">
<node COLOR="#338800" CREATED="1388926073109" FOLDED="true" ID="ID_1742597909" MODIFIED="1392030831761">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <img src="../../Nutstore/MyNotes/Linux/Unix环境高级编程/pasted_image.png" />
  </body>
</html></richcontent>
<node CREATED="1388926332423" ID="ID_145692957" MODIFIED="1388926336765" TEXT="&#x5bf9;_ S C _ C L K _ T C K&#x7684;&#x8fd4;&#x56de;&#x503c;&#x662f;&#x6bcf;&#x79d2;&#x7684;&#x65f6;&#x949f;&#x6ef4;&#x7b54;&#x6570;,&#x4ee5;&#x7528;&#x4e8e; t i m e s&#x51fd;&#x6570;&#x7684;&#x8fd4;&#x56de;&#x503c;(&#x89c1; 8 . 1 5 &#x8282;) &#x3002; "/>
</node>
<node CREATED="1388926352715" ID="ID_475062961" MODIFIED="1388926360004" TEXT="&#x5bf9;_ S C _ C L K _ T C K&#x7684;&#x8fd4;&#x56de;&#x503c;&#x662f;&#x6bcf;&#x79d2;&#x7684;&#x65f6;&#x949f;&#x6ef4;&#x7b54;&#x6570;,&#x4ee5;&#x7528;&#x4e8e; t i m e s&#x51fd;&#x6570;&#x7684;&#x8fd4;&#x56de;&#x503c;(&#x89c1; 8 . 1 5 &#x8282;) &#x3002; "/>
</node>
<node CREATED="1388850552402" ID="ID_18507019" MODIFIED="1388850566257" TEXT="FIPS 151-1 &#x8981;&#x6c42;"/>
<node CREATED="1388850566750" ID="ID_432958976" MODIFIED="1388850573028" TEXT="&#x9650;&#x5236;&#x603b;&#x7ed3;"/>
<node CREATED="1388850541658" ID="ID_1096931254" MODIFIED="1388850584631" TEXT="&#x4e3a;&#x786e;&#x5b9a;&#x7684;&#x8fd0;&#x884c;&#x65f6;&#x95f4;&#x9650;&#x5236;"/>
<node CREATED="1388923426348" FOLDED="true" ID="ID_1271452484" MODIFIED="1392030831761" TEXT="&#x4e09;&#x79cd;&#x7c7b;&#x578b;&#x529f;&#x80fd;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21069;&#20004;&#20010;,&#32534;&#35793;&#26102;&#38388;&#36873;&#25321;&#39033;&#21644;&#38480;&#21046;&#21487;&#22312;&#22836;&#25991;&#20214;&#20013;&#23450;&#20041;&#12290;&#31243;&#24207;&#22312;&#32534;&#35793;&#26102;&#21487;&#20197;&#21253;&#21547;&#36825;&#20123;&#22836;&#25991;&#20214;&#12290;
    </p>
    <p>
      &#20294;&#26159;,&#36816;&#34892;&#26102;&#38388;&#38480;&#21046;&#21017;&#35201;&#27714;&#36827;&#31243;&#35843;&#29992;&#19968;&#20010;&#20989;&#25968;&#20197;&#33719;&#24471;&#27492;&#31181;&#38480;&#21046;&#20540;&#12290;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
<node CREATED="1388923440507" ID="ID_1175835608" MODIFIED="1388923441834" TEXT="&#x7f16;&#x8bd1;&#x65f6;&#x95f4;&#x9009;&#x62e9;&#x9879;(&#x8be5;&#x7cfb;&#x7edf;&#x662f;&#x5426;&#x652f;&#x6301;&#x4f5c;&#x4e1a;&#x63a7;&#x5236;) "/>
<node CREATED="1388923448147" ID="ID_430348321" MODIFIED="1388923449723" TEXT="&#x7f16;&#x8bd1;&#x65f6;&#x95f4;&#x9650;&#x5236;(&#x77ed;&#x6574;&#x578b;&#x7684;&#x6700;&#x5927;&#x503c;&#x662f;&#x4ec0;&#x4e48;) "/>
<node CREATED="1388923456101" ID="ID_1219689976" MODIFIED="1388923457658" TEXT="&#x8fd0;&#x884c;&#x65f6;&#x95f4;&#x9650;&#x5236;(&#x6587;&#x4ef6;&#x540d;&#x7684;&#x6700;&#x5927;&#x5b57;&#x7b26;&#x6570;&#x4e3a;&#x591a;&#x5c11;) "/>
</node>
<node CREATED="1388924836525" FOLDED="true" ID="ID_1230157807" MODIFIED="1392030831761" TEXT="&#x4e09;&#x79cd;&#x9650;&#x5236; ">
<node CREATED="1388924879847" ID="ID_515762682" MODIFIED="1388924881670" TEXT="&#x7f16;&#x8f91;&#x65f6;&#x95f4;&#x9009;&#x62e9;&#x9879;&#x53ca;&#x9650;&#x5236;(&#x5934;&#x6587;&#x4ef6;) ">
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
</node>
<node CREATED="1388924887594" ID="ID_96846900" MODIFIED="1388924889386" TEXT="&#x4e0d;&#x4e0e;&#x6587;&#x4ef6;&#x6216;&#x76ee;&#x5f55;&#x76f8;&#x5173;&#x8054;&#x7684;&#x8fd0;&#x884c;&#x65f6;&#x95f4;&#x9650;&#x5236; "/>
<node CREATED="1388924894934" ID="ID_1837938667" MODIFIED="1388924896082" TEXT="&#x4e0e;&#x6587;&#x4ef6;&#x6216;&#x76ee;&#x5f55;&#x76f8;&#x5173;&#x8054;&#x7684;&#x8fd0;&#x884c;&#x65f6;&#x95f4;&#x9650;&#x5236; "/>
</node>
</node>
<node CREATED="1388850389617" FOLDED="true" ID="ID_695511664" MODIFIED="1392030831761" TEXT="&#x529f;&#x80fd;&#x6d4b;&#x8bd5;&#x5b8f;">
<node CREATED="1388930183638" ID="ID_1798720683" MODIFIED="1388930224290" TEXT="&#x53ea;&#x7f16;&#x8bd1;posix">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#27491;&#22914;&#21069;&#36848;,&#22312;&#22836;&#25991;&#20214;&#20013;&#23450;&#20041;&#20102;&#24456;&#22810; P O S I X . 1&#21644;X P G 3&#30340;&#31526;&#21495;&#12290;&#20294;&#26159;&#38500;&#20102; P O S I X . 1&#21644;X P G 3&#23450;
    </p>
    <p>
      &#20041;&#22806;,&#22823;&#22810;&#25968;&#23454;&#29616;&#22312;&#36825;&#20123;&#22836;&#25991;&#20214;&#20013;&#20063;&#21152;&#19978;&#20102;&#23427;&#20204;&#33258;&#24049;&#30340;&#23450;&#20041;&#12290;&#22914;&#26524;&#22312;&#32534;&#35793;&#19968;&#20010;&#31243;&#24207;&#26102;,&#24076;&#26395;&#23427;
    </p>
    <p>
      &#21482;&#20351;&#29992;POSIX&#23450;&#20041;&#32780;&#19981;&#20351;&#29992;&#20219;&#20309;&#23454;&#29616;&#23450;&#20041;&#30340;&#38480;&#21046;,&#37027;&#20040;&#23601;&#38656;&#23450;&#20041;&#24120;&#25968; _POSIX_SOURCE,&#25152;&#26377;
    </p>
    <p>
      POSIX.1&#22836;&#25991;&#20214;&#20013;&#37117;&#20351;&#29992;&#27492;&#24120;&#25968;&#12290;&#24403;&#35813;&#24120;&#25968;&#23450;&#20041;&#26102;,&#23601;&#33021;&#25490;&#38500;&#20219;&#20309;&#23454;&#29616;&#19987;&#26377;&#30340;&#23450;&#20041;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388930347780" ID="ID_982323992" MODIFIED="1388930349204" TEXT="&#x5e38;&#x6570;_ P O S I X _ S O U R C E&#x53ca;&#x5176;&#x5bf9;&#x5e94;&#x7684;&#x5e38;&#x6570; _ X O P E N _ S O U R C E&#x88ab;&#x79f0;&#x4e4b;&#x4e3a;&#x529f;&#x80fd;&#x6d4b;&#x8bd5;&#x5b8f; "/>
<node CREATED="1388930364642" ID="ID_1193882298" MODIFIED="1388930366046" TEXT="cc -D_POSIX_SOURCE file.c "/>
<node CREATED="1388930442149" ID="ID_111529238" MODIFIED="1388930652855" TEXT="&#x53e6;&#x4e00;&#x4e2a;&#x529f;&#x80fd;&#x6d4b;&#x8bd5;&#x5b8f;&#x662f;: _ _STDC_ _,&#x5b83;&#x7531;&#x7b26;&#x5408; ANSI C&#x6807;&#x51c6;&#x7684;&#x7f16;&#x8bd1;&#x7a0b;&#x5e8f;&#x81ea;&#x52a8;&#x5b9a;&#x4e49;&#x3002; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#36825;&#26679;&#23601;
    </p>
    <p>
      &#20801;&#35768;&#25105;&#20204;&#32534;&#20889;ANSI C&#32534;&#35793;&#31243;&#24207;&#21644;&#38750; ANSI C&#32534;&#35793;&#31243;&#24207;&#37117;&#33021;&#32534;&#35793;&#30340;&#31243;&#24207;&#12290;&#20363;&#22914;,&#19968;&#20010;&#22836;&#25991;&#20214;&#21487;&#33021;
    </p>
    <p>
      &#20250;&#26159;:
    </p>
    <p>
      # i f d e f _STDC__
    </p>
    <p>
      void *myfunc(const char *, int);
    </p>
    <p>
      #else
    </p>
    <p>
      void *myfunc();
    </p>
    <p>
      #endif
    </p>
    <p>
      &#36825;&#26679;&#23601;&#33021;&#21457;&#25381; ANSI C&#21407;&#22411;&#21151;&#33021;&#30340;&#38271;&#22788;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1388850396000" FOLDED="true" ID="ID_1876742685" MODIFIED="1392030831761" TEXT="&#x57fa;&#x672c;&#x7cfb;&#x7edf;&#x6570;&#x636e;&#x7c7b;&#x578b;">
<node CREATED="1388930653960" ID="ID_347755803" MODIFIED="1388930664309" TEXT="&#x5934;&#x6587;&#x4ef6;&lt;sys/types.h&gt;&#x4e2d;&#x5b9a;&#x4e49;&#x4e86;&#x67d0;&#x4e9b;&#x4e0e;&#x5b9e;&#x73b0;&#x6709;&#x5173;&#x7684;&#x6570;&#x636e;&#x7c7b;&#x578b;,&#x5b83;&#x4eec;&#x88ab;&#x79f0;&#x4e4b;&#x4e3a;&#x57fa;&#x672c;&#x7cfb;&#x7edf;&#x6570;&#x636e;&#x7c7b; &#x578b;(primitive system data type) &#x3002; "/>
<node CREATED="1388930683131" ID="ID_750571719" MODIFIED="1388930684240" TEXT="&#x5728;&#x5934;&#x6587;&#x4ef6;&#x4e2d;&#x8fd9;&#x4e9b; &#x6570;&#x636e;&#x7c7b;&#x578b;&#x90fd;&#x662f;&#x7528;C&#x7684;typedef&#x8bbe;&#x65bd;&#x6765;&#x5b9a;&#x4e49;&#x7684;&#x3002;&#x5b83;&#x4eec;&#x7edd;&#x5927;&#x591a;&#x6570;&#x90fd;&#x4ee5; _t &#x7ed3;&#x5c3e; "/>
<node CREATED="1388930742388" ID="ID_1938473833" MODIFIED="1388930743085" TEXT="&#x7528;&#x8fd9;&#x79cd;&#x65b9;&#x5f0f;&#x5b9a;&#x4e49;&#x4e86;&#x8fd9;&#x4e9b;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x540e;, &#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x5c31;&#x4e0d;&#x518d;&#x9700;&#x8981;&#x8003;&#x8651;&#x968f;&#x7cfb;&#x7edf;&#x4e0d;&#x540c;&#x800c;&#x53d8;&#x7684;&#x5b9e;&#x65bd;&#x7ec6;&#x8282;, "/>
</node>
<node CREATED="1388850408672" ID="ID_263165164" MODIFIED="1388850415069" TEXT="&#x6807;&#x51c6;&#x4e4b;&#x95f4;&#x7684;&#x51b2;&#x7a81;"/>
<node CREATED="1388850592615" FOLDED="true" ID="ID_556937884" MODIFIED="1392030831761" TEXT="&#x5c0f;&#x7ed3;">
<node CREATED="1388932197801" FOLDED="true" ID="ID_288408083" MODIFIED="1392030831761" TEXT="&#x591a;&#x4e2a;&#x5730;&#x65b9;&#x90fd;&#x5b9a;&#x4e49;&#x4e86;size_t,&#x4f46;C&#x6807;&#x51c6;&#x7981;&#x6b62;&#x91cd;&#x590d;&#x5b9a;&#x4e49;&#x7c7b;&#x578b;">
<node CREATED="1388932241163" ID="ID_610220215" MODIFIED="1388932250814" TEXT="&#x4f7f;&#x7528;&#x5b8f;&#x5224;&#x65ad;"/>
</node>
</node>
</node>
<node CREATED="1388932050313" FOLDED="true" ID="ID_701901400" MODIFIED="1389267794691" POSITION="right" TEXT="&#x6587;&#x4ef6;I/O">
<node CREATED="1388932073540" ID="ID_1410614037" MODIFIED="1389069068592" TEXT="&#x5f15;&#x8a00;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26412;&#31456;&#24320;&#22987;&#35752;&#35770;UNIX&#31995;&#32479;,&#20808;&#35828;&#26126;&#21487;&#29992;&#30340;&#25991;&#20214;I/O&#20989;&#25968;&#8212;&#8212;&#25171;&#24320;&#25991;&#20214;&#12289;&#35835;&#25991;&#20214;&#12289;&#20889;&#25991;&#20214;&#31561;&#31561;&#12290;
    </p>
    <p>
      &#22823;&#22810;&#25968;UNIX&#25991;&#20214;I/O&#21482;&#38656;&#29992;&#21040;5&#20010;&#20989;&#25968;:open&#12289;read&#12289;write&#12289;lseek &#20197;&#21450;close&#12290;&#28982;&#21518;&#35828;&#26126;&#19981;&#21516;&#32531;
    </p>
    <p>
      &#23384;&#22120;&#38271;&#24230;&#23545;read&#21644;write&#20989;&#25968;&#30340;&#24433;&#21709;&#12290;
    </p>
    <p>
      &#26412;&#31456;&#25152;&#35828;&#26126;&#30340;&#20989;&#25968;&#32463;&#24120;&#34987;&#31216;&#20043;&#20026;&#19981;&#24102;&#32531;&#23384;&#30340; I/O(unbuffered I/O,&#19982;&#23558;&#22312;&#31532;5&#31456;&#20013;&#35828;&#26126;&#30340;&#26631;
    </p>
    <p>
      &#20934;I / O&#20989;&#25968;&#30456;&#23545;&#29031;)
    </p>
    <p>
      &#12290;&#26415;&#35821;&#8212;&#8212;&#19981;&#24102;&#32531;&#23384;&#25351;&#30340;&#26159;&#27599;&#20010; r e a d&#21644;w r i t e&#37117;&#35843;&#29992;&#20869;&#26680;&#20013;&#30340;&#19968;&#20010;&#31995;&#32479;&#35843;&#29992;&#12290;
    </p>
    <p>
      &#36825;&#20123;&#19981;&#24102;&#32531;&#23384;&#30340;I/O&#20989;&#25968;&#19981;&#26159;ANSI C &#30340;&#32452;&#25104;&#37096;&#20998;,&#20294;&#26159;&#26159; POSIX.1&#21644;XPG3&#30340;&#32452;&#25104;&#37096;&#20998;&#12290;
    </p>
    <p>
      &#21482;&#35201;&#28041;&#21450;&#22312;&#22810;&#20010;&#36827;&#31243;&#38388;&#20849;&#20139;&#36164;&#28304;,&#21407;&#23376;&#25805;&#20316;&#30340;&#27010;&#24565;&#23601;&#21464;&#25104;&#38750;&#24120;&#37325;&#35201;&#12290;&#25105;&#20204;&#23558;&#36890;&#36807;&#25991;&#20214; I / O
    </p>
    <p>
      &#21644;&#20256;&#36865;&#32473;open&#20989;&#25968;&#30340;&#21442;&#25968;&#26469;&#35752;&#35770;&#27492;&#27010;&#24565;&#12290;&#24182;&#36827;&#19968;&#27493;&#35752;&#35770;&#22312;&#22810;&#20010;&#36827;&#31243;&#38388;&#22914;&#20309;&#20849;&#20139;&#25991;&#20214;,&#24182;&#28041;&#21450;&#20869;
    </p>
    <p>
      &#26680;&#30340;&#26377;&#20851;&#25968;&#25454;&#32467;&#26500;&#12290;&#22312;&#35752;&#35770;&#20102;&#36825;&#20123;&#29305;&#24449;&#21518;,&#23558;&#35828;&#26126; dup&#12289;fcntl&#21644;ioctl&#20989;&#25968;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388932080200" FOLDED="true" ID="ID_1731363983" MODIFIED="1392030831761" TEXT="&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;">
<node CREATED="1389075185404" FOLDED="true" ID="ID_946756148" MODIFIED="1392030831761" TEXT="&#x6309;&#x7167;&#x60ef;&#x4f8b; ----UNIX shell init 3 file identifier">
<node CREATED="1389075252884" FOLDED="true" ID="ID_769404075" MODIFIED="1392030831761" TEXT="0:stand read">
<node CREATED="1389075308413" ID="ID_689734499" MODIFIED="1389075309284" TEXT="S T D I N _ F I L E N O "/>
</node>
<node CREATED="1389075262620" FOLDED="true" ID="ID_692976929" MODIFIED="1392030831761" TEXT="1:stand out">
<node CREATED="1389075320005" ID="ID_1619964058" MODIFIED="1389075320689" TEXT="S T D I N _ F I L E N O "/>
</node>
<node CREATED="1389075268348" FOLDED="true" ID="ID_1133607672" MODIFIED="1392030831761" TEXT="2:stand error out">
<node CREATED="1389075327558" ID="ID_246481145" MODIFIED="1389075329165" TEXT="STDERR_FILENO "/>
</node>
</node>
</node>
<node CREATED="1388932092171" FOLDED="true" ID="ID_147068006" MODIFIED="1392030831762" TEXT="open">
<node CREATED="1389075871410" ID="ID_50198569" MODIFIED="1389075873034" TEXT="&#x8c03;&#x7528;open&#x51fd;&#x6570;&#x53ef;&#x4ee5;&#x6253;&#x5f00;&#x6216;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x3002; "/>
<node CREATED="1389085191141" ID="ID_1674292145" MODIFIED="1389085196108" TEXT="&#x7531;open&#x8fd4;&#x56de;&#x7684;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x4e00;&#x5b9a;&#x662f;&#x6700;&#x5c0f;&#x7684;&#x672a;&#x7528;&#x63cf;&#x8ff0;&#x7b26;&#x6570;&#x5b57; "/>
<node CREATED="1389085280135" ID="ID_761853140" MODIFIED="1389085900857" TEXT="&#x4ec5;&#x5f53;&#x521b;&#x5efa;&#x65b0;&#x6587;&#x4ef6;&#x65f6;&#x624d;&#x4f7f;&#x7528;&#x7b2c;&#x4e09;&#x4e2a;&#x53c2;&#x6570; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      the open use ... (changable var) so look like a overload
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1389085555936" FOLDED="true" ID="ID_810097333" MODIFIED="1392030831761" TEXT="&#x6587;&#x4ef6;&#x540d;&#x548c;&#x8def;&#x5f84;&#x540d;&#x622a;&#x77ed; ">
<node CREATED="1389085571696" ID="ID_223257375" MODIFIED="1389085572279" TEXT="&#x5c06;&#x6587; &#x4ef6;&#x540d;&#x622a;&#x77ed;&#x4e3a; 1 4&#x4e2a;&#x5b57;&#x7b26; "/>
<node CREATED="1389085583945" ID="ID_1629789753" MODIFIED="1389085584529" TEXT="&#x8fd4;&#x56de;&#x51fa;&#x9519; E N A M E TO O L O N G "/>
</node>
</node>
<node CREATED="1388932101966" FOLDED="true" ID="ID_1471228827" MODIFIED="1392030831762" TEXT="create">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;&#26089;&#26399;&#30340; U N I X&#29256;&#26412;&#20013;, o p e n&#30340;&#31532;&#20108;&#20010;&#21442;&#25968;&#21482;&#33021;&#26159; 0&#12289;1&#25110;2&#12290;&#27809;&#26377;&#21150;&#27861;&#25171;&#24320;&#19968;
    </p>
    <p>
      &#20010;&#23578;&#26410;&#23384;&#22312;&#30340;&#25991;&#20214;,&#22240;&#27492;&#38656;&#35201;&#21478;&#19968;&#20010;&#31995;&#32479;&#35843;&#29992; c r e a t&#20197;&#21019;&#24314;&#26032;&#25991;&#20214;&#12290;&#29616;&#22312;, o p e n&#20989;
    </p>
    <p>
      &#25968;&#25552;&#20379;&#20102;&#36873;&#25321;&#39033;O_CREAT&#21644;O_TRUNC,&#20110;&#26159;&#20063;&#23601;&#19981;&#20877;&#38656;&#35201;creat&#20989;&#25968;&#20102;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389085908833" ID="ID_1757693494" MODIFIED="1389085913447" TEXT="= o p e n(pathname, O _ W R O N L|O _ C R E A T|O _ T R U N C , mode) ; "/>
<node CREATED="1389085972532" ID="ID_817063313" MODIFIED="1389085973722" TEXT="creat&#x7684;&#x4e00;&#x4e2a;&#x4e0d;&#x8db3;&#x4e4b;&#x5904;&#x662f;&#x5b83;&#x4ee5;&#x53ea;&#x5199;&#x65b9;&#x5f0f;&#x6253;&#x5f00;&#x6240;&#x521b;&#x5efa;&#x7684;&#x6587;&#x4ef6; "/>
</node>
<node CREATED="1388932113693" FOLDED="true" ID="ID_1164320880" MODIFIED="1392030831762" TEXT="close">
<node CREATED="1389086006796" ID="ID_830236541" MODIFIED="1389086007489" TEXT="&#x5173;&#x95ed;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x65f6;&#x4e5f;&#x91ca;&#x653e;&#x8be5;&#x8fdb;&#x7a0b;&#x52a0;&#x5728;&#x8be5;&#x6587;&#x4ef6;&#x4e0a;&#x7684;&#x6240;&#x6709;&#x8bb0;&#x5f55;&#x9501; "/>
<node CREATED="1389086026397" ID="ID_1189890150" MODIFIED="1389086027260" TEXT="&#x5f53;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x7ec8;&#x6b62;&#x65f6;,&#x5b83;&#x6240;&#x6709;&#x7684;&#x6253;&#x5f00;&#x6587;&#x4ef6;&#x90fd;&#x7531;&#x5185;&#x6838;&#x81ea;&#x52a8;&#x5173;&#x95ed; "/>
</node>
<node CREATED="1388932117225" FOLDED="true" ID="ID_554016240" MODIFIED="1392030831762" TEXT="lseek">
<node CREATED="1389086043694" ID="ID_1984108178" MODIFIED="1389086044285" TEXT="&#x5f53;&#x524d;&#x6587;&#x4ef6;&#x4f4d;&#x79fb;&#x91cf; "/>
<node CREATED="1389086556061" ID="ID_587102694" MODIFIED="1389086557699" TEXT="&#x56e0;&#x4e3a;&#x4f4d;&#x79fb;&#x91cf;&#x53ef;&#x80fd;&#x662f;&#x8d1f;&#x503c;,&#x6240;&#x4ee5;&#x5728;&#x6bd4;&#x8f83; lseek&#x7684;&#x8fd4;&#x56de; &#x503c;&#x65f6;&#x5e94;&#x5f53;&#x8c28;&#x614e;,&#x4e0d;&#x8981;&#x6d4b;&#x8bd5;&#x5b83;&#x662f;&#x5426;&#x5c0f;&#x4e8e; 0,&#x800c;&#x8981;&#x6d4b;&#x8bd5;&#x5b83;&#x662f;&#x5426;&#x7b49;&#x4e8e;- 1 "/>
<node CREATED="1389086512242" FOLDED="true" ID="ID_1235660569" MODIFIED="1392030831762" TEXT="&#x6587;&#x4ef6;&#x4f4d;&#x79fb;&#x91cf;&#x53ef;&#x4ee5;&#x5927;&#x4e8e;&#x6587;&#x4ef6;&#x7684;&#x5f53;&#x524d;&#x957f;&#x5ea6;,&#x5728;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;,&#x5bf9;&#x8be5;&#x6587;&#x4ef6;&#x7684;&#x4e0b;&#x4e00;&#x6b21;&#x5199;&#x5c06;&#x5ef6;&#x957f;&#x8be5;&#x6587;&#x4ef6; ">
<node CREATED="1389086522948" ID="ID_1486694790" MODIFIED="1389086523555" TEXT="&#x4f4d;&#x4e8e;&#x6587;&#x4ef6;&#x4e2d;&#x4f46;&#x6ca1;&#x6709;&#x5199;&#x8fc7;&#x7684;&#x5b57;&#x8282;&#x90fd;&#x88ab;&#x8bfb;&#x4e3a; 0 "/>
</node>
</node>
<node CREATED="1388932125837" ID="ID_1389642594" MODIFIED="1389087499649" TEXT="read">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26377;&#22810;&#31181;&#24773;&#20917;&#21487;&#20351;&#23454;&#38469;&#35835;&#21040;&#30340;&#23383;&#33410;&#25968;&#23569;&#20110;&#35201;&#27714;&#35835;&#23383;&#33410;&#25968;:
    </p>
    <p>
      &#8226; &#35835;&#26222;&#36890;&#25991;&#20214;&#26102;,&#22312;&#35835;&#21040;&#35201;&#27714;&#23383;&#33410;&#25968;&#20043;&#21069;&#24050;&#21040;&#36798;&#20102;&#25991;&#20214;&#23614;&#31471;&#12290;&#20363;&#22914;,&#33509;&#22312;&#21040;&#36798;&#25991;&#20214;&#23614;&#31471;&#20043;
    </p>
    <p>
      &#21069;&#36824;&#26377;30&#20010;&#23383;&#33410;,&#32780;&#35201;&#27714;&#35835; 100&#20010;&#23383;&#33410;,&#21017;read&#36820;&#22238;30,&#19979;&#19968;&#27425;&#20877;&#35843;&#29992;read&#26102;,&#23427;&#23558;&#36820;&#22238; 0(&#25991;&#20214;
    </p>
    <p>
      &#23614;&#31471;)&#12290;
    </p>
    <p>
      &#8226; &#24403;&#20174;&#32456;&#31471;&#35774;&#22791;&#35835;&#26102;,&#36890;&#24120;&#19968;&#27425;&#26368;&#22810;&#35835;&#19968;&#34892; (&#31532;11&#31456;&#23558;&#20171;&#32461;&#22914;&#20309;&#25913;&#21464;&#36825;&#19968;&#28857; )&#12290;
    </p>
    <p>
      &#8226; &#24403;&#20174;&#32593;&#32476;&#35835;&#26102;,&#32593;&#32476;&#20013;&#30340;&#32531;&#20914;&#26426;&#26500;&#21487;&#33021;&#36896;&#25104;&#36820;&#22238;&#20540;&#23567;&#20110;&#25152;&#35201;&#27714;&#35835;&#30340;&#23383;&#33410;&#25968;&#12290;
    </p>
    <p>
      &#8226; &#26576;&#20123;&#38754;&#21521;&#35760;&#24405;&#30340;&#35774;&#22791;,&#20363;&#22914;&#30913;&#24102;,&#19968;&#27425;&#26368;&#22810;&#36820;&#22238;&#19968;&#20010;&#35760;&#24405;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1388932129320" FOLDED="true" ID="ID_330189689" MODIFIED="1392030831762" TEXT="write">
<node CREATED="1389087501422" ID="ID_719381093" MODIFIED="1389087507525" TEXT="&#x5bf9;&#x4e8e;&#x666e;&#x901a;&#x6587;&#x4ef6;,&#x5199;&#x64cd;&#x4f5c;&#x4ece;&#x6587;&#x4ef6;&#x7684;&#x5f53;&#x524d;&#x4f4d;&#x79fb;&#x91cf;&#x5904;&#x5f00;&#x59cb; "/>
<node CREATED="1389087521455" ID="ID_248113450" MODIFIED="1389087527469" TEXT="&#x6307;&#x5b9a;&#x4e86; O _ A P P E N D&#x9009;&#x62e9;&#x9879;,&#x5219;&#x5728;&#x6bcf;&#x6b21;&#x5199;&#x64cd;&#x4f5c;&#x4e4b;&#x524d;,&#x5c06;&#x6587;&#x4ef6;&#x4f4d;&#x79fb;&#x91cf;&#x8bbe;&#x7f6e;&#x5728;&#x6587;&#x4ef6;&#x7684;&#x5f53;&#x524d;&#x7ed3;&#x5c3e;&#x5904; "/>
</node>
<node CREATED="1388932133889" ID="ID_140563908" MODIFIED="1388932142970" TEXT="I/O&#x7684;&#x6548;&#x7387;"/>
<node CREATED="1388932146342" FOLDED="true" ID="ID_585577534" MODIFIED="1392030831762" TEXT="&#x6587;&#x4ef6;&#x5171;&#x4eab;">
<node CREATED="1389155479616" FOLDED="true" ID="ID_308755969" MODIFIED="1392030831762" TEXT="&#x5185;&#x6838;&#x4f7f;&#x7528;&#x4e86;&#x4e09;&#x79cd;&#x6570;&#x636e;&#x7ed3;&#x6784;,&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x7684;&#x5173;&#x7cfb;&#x51b3;&#x5b9a;&#x4e86;&#x5728;&#x6587;&#x4ef6;&#x5171;&#x4eab;&#x65b9;&#x9762;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x5bf9;&#x53e6;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b; &#x53ef;&#x80fd;&#x4ea7;&#x751f;&#x7684;&#x5f71;&#x54cd;&#x3002; ">
<node CREATED="1389155597469" FOLDED="true" ID="ID_764723266" MODIFIED="1392030831762" TEXT="kenel">
<node CREATED="1389155608044" FOLDED="true" ID="ID_683907941" MODIFIED="1392030831762" TEXT="&#x8fdb;&#x7a0b;&#x8868; ">
<node CREATED="1389155622540" FOLDED="true" ID="ID_202599140" MODIFIED="1392030831762" TEXT="&#x8fdb;&#x7a0b; &#x8bb0;&#x5f55;&#x9879; ">
<node CREATED="1389155636484" FOLDED="true" ID="ID_189884302" MODIFIED="1392030831762" TEXT="&#x6253;&#x5f00;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x8868; ">
<node CREATED="1389155645572" ID="ID_1210916579" MODIFIED="1389155646088" TEXT="&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x6807;&#x5fd7; "/>
<node CREATED="1389155652140" ID="ID_315767934" MODIFIED="1389155652571" TEXT="&#x6307;&#x5411;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x8868;&#x9879;&#x7684;&#x6307;&#x9488; "/>
</node>
</node>
</node>
<node CREATED="1389155676436" FOLDED="true" ID="ID_1198278729" MODIFIED="1392030831762" TEXT="&#x6587;&#x4ef6;&#x8868; ">
<node CREATED="1389155684172" ID="ID_1669520979" MODIFIED="1389155685203" TEXT="&#x6587;&#x4ef6;&#x72b6;&#x6001;&#x6807;&#x5fd7;(&#x8bfb;&#x3001;&#x5199;&#x3001;&#x589e;&#x5199;&#x3001;&#x540c;&#x6b65;&#x3001;&#x975e;&#x963b;&#x585e;&#x7b49; ) "/>
<node CREATED="1389155691268" ID="ID_892353465" MODIFIED="1389155692755" TEXT="&#x5f53;&#x524d;&#x6587;&#x4ef6;&#x4f4d;&#x79fb;&#x91cf; "/>
<node CREATED="1389155703762" ID="ID_1098339702" MODIFIED="1389155739748" TEXT="vnode&#x6307;&#x9488; "/>
</node>
<node CREATED="1389155725124" FOLDED="true" ID="ID_1757193394" MODIFIED="1392030831762" TEXT="&#x6bcf;&#x4e2a;&#x6253;&#x5f00;&#x6587;&#x4ef6;(&#x6216;&#x8bbe;&#x5907;)&#x90fd;&#x6709;&#x4e00;&#x4e2a; vnode">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      v&#33410;&#28857;&#32467;&#26500;&#26159;&#36817;&#26469;&#22686;&#35774;&#30340;&#12290;&#24403;&#22312;&#19968;&#20010;&#32473;&#23450;&#30340;&#31995;&#32479;&#19978;&#23545;&#22810;&#31181;&#25991;&#20214;&#31995;&#32479;&#31867;&#22411;&#25552;&#20379;&#25903;
    </p>
    <p>
      &#25345;&#26102;,&#23601;&#38656;&#35201;&#36825;&#31181;&#32467;&#26500;,&#36825;&#19968;&#24037;&#20316;&#26159;&#30001; Peter Weinberger(&#36125;&#23572;&#23454;&#39564;&#23460;)&#21644; Bill Joy
    </p>
    <p>
      (S u n&#20844;&#21496;)&#20998;&#21035;&#29420;&#31435;&#23436;&#25104;&#30340;&#12290;
    </p>
    <p>
      S u n&#31216;&#27492;&#31181;&#25991;&#20214;&#31995;&#32479;&#20026;&#34394;&#25311;&#25991;&#20214;&#31995;&#32479;( Virtual File
    </p>
    <p>
      S y s t e m)
    </p>
    <p>
      ,&#31216;&#19982;&#25991;&#20214;&#31995;&#32479;&#31867;&#22411;&#26080;&#20851;&#30340; i&#33410;&#28857;&#37096;&#20998;&#20026; v&#33410;&#28857;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389155764716" ID="ID_1669149806" MODIFIED="1389155765387" TEXT="&#x6587;&#x4ef6;&#x7c7b;&#x578b; "/>
<node CREATED="1389155778892" ID="ID_1228533182" MODIFIED="1389155780258" TEXT="&#x5bf9;&#x6b64;&#x6587;&#x4ef6;&#x8fdb; &#x884c;&#x5404;&#x79cd;&#x64cd;&#x4f5c;&#x7684;&#x51fd;&#x6570;&#x7684;&#x6307;&#x9488; "/>
<node CREATED="1389155799452" ID="ID_1303036663" MODIFIED="1389155802706" TEXT="&#x5305;&#x542b;&#x4e86;&#x8be5;&#x6587;&#x4ef6;&#x7684; inode"/>
</node>
</node>
</node>
</node>
<node CREATED="1388932150013" FOLDED="true" ID="ID_1672702809" MODIFIED="1392030831762" TEXT="&#x539f;&#x5b50;&#x64cd;&#x4f5c;">
<node CREATED="1389171654499" FOLDED="true" ID="ID_1497308071" MODIFIED="1392030831762" TEXT="&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x6587;&#x4ef6; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      if ((fd = open(pathname, O_WRONLY)) &lt;0)
    </p>
    <p>
      if (errno == ENOENT) {
    </p>
    <p>
      if ((fd = creat(pathname, mode)) &lt; 0)
    </p>
    <p>
      err_sys(&quot;creat error&quot;);
    </p>
    <p>
      } else
    </p>
    <p>
      err_sys(&quot;open error&quot;);
    </p>
  </body>
</html></richcontent>
<node CREATED="1389171727533" FOLDED="true" ID="ID_584705597" MODIFIED="1392030831762" TEXT="O _ C R E AT&#x548c;O _ E X C L ">
<node CREATED="1389171752302" ID="ID_1111713757" MODIFIED="1389172583486" TEXT="if  file exit ,open failed"/>
</node>
</node>
<node CREATED="1389172440935" FOLDED="true" ID="ID_1856367186" MODIFIED="1392030831762" TEXT="append file">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      if (lseek(fd, 0L, 2) &lt; 0)
    </p>
    <p>
      /*position to EOF*/
    </p>
    <p>
      err_sys(&quot;lseek error&quot;);
    </p>
    <p>
      if (write(fd, buff, 100) != 100)
    </p>
    <p>
      /*and write*/
    </p>
    <p>
      err_sys(&quot;write error&quot;);
    </p>
  </body>
</html></richcontent>
<node CREATED="1389171552800" FOLDED="true" ID="ID_1568684007" MODIFIED="1392030831762" TEXT="&#x6253;&#x5f00;&#x6587;&#x4ef6;&#x65f6;&#x8bbe;&#x7f6e; O _ A P P E N D&#x6807;&#x5fd7; ">
<node CREATED="1389171573472" ID="ID_1497124199" MODIFIED="1389171576387" TEXT="&#x5185;&#x6838;&#x6bcf;&#x6b21;&#x5bf9;&#x8fd9;&#x79cd;&#x6587;&#x4ef6;&#x8fdb;&#x884c;&#x5199;&#x4e4b;&#x524d;,&#x90fd;&#x5c06;&#x8fdb;&#x7a0b;&#x7684; &#x5f53;&#x524d;&#x4f4d;&#x79fb;&#x91cf;&#x8bbe;&#x7f6e;&#x5230;&#x8be5;&#x6587;&#x4ef6;&#x7684;&#x5c3e;&#x7aef;&#x5904;,&#x4e8e;&#x662f;&#x5728;&#x6bcf;&#x6b21;&#x5199;&#x4e4b;&#x524d;&#x5c31;&#x4e0d;&#x518d;&#x9700;&#x8981;&#x8c03;&#x7528; lseek&#x3002; "/>
</node>
</node>
</node>
<node CREATED="1388932154189" FOLDED="true" ID="ID_169158916" MODIFIED="1392030831762" TEXT="dup&#x548c;dup2">
<node CREATED="1389174449127" ID="ID_335927202" MODIFIED="1389174454302" TEXT="&#x7531;dup&#x8fd4;&#x56de;&#x7684;&#x65b0;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x4e00;&#x5b9a;&#x662f;&#x5f53;&#x524d;&#x53ef;&#x7528;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x4e2d;&#x7684;&#x6700;&#x5c0f;&#x6570;&#x503c; "/>
<node CREATED="1389174478224" ID="ID_1159645562" MODIFIED="1389174480399" TEXT="&#x7528; dup2&#x5219;&#x53ef;&#x4ee5;&#x7528;filedes2 &#x53c2;&#x6570;&#x6307;&#x5b9a;&#x65b0;&#x63cf;&#x8ff0;&#x7b26;&#x7684;&#x6570;&#x503c;&#x3002; "/>
<node CREATED="1389174485952" ID="ID_1298528415" MODIFIED="1389174488631" TEXT="&#x5982;&#x679c; filedes2&#x5df2;&#x7ecf;&#x6253;&#x5f00;,&#x5219;&#x5148;&#x5c06;&#x5176;&#x5173;&#x95ed;&#x3002;&#x5982;&#x82e5; filedes&#x7b49;&#x4e8e;filedes2,&#x5219; dup2&#x8fd4;&#x56de;filedes2,&#x800c;&#x4e0d;&#x5173;&#x95ed;&#x5b83;&#x3002; "/>
<node CREATED="1389174509489" ID="ID_800399451" MODIFIED="1389174512392" TEXT="&#x51fd;&#x6570;&#x8fd4;&#x56de;&#x7684;&#x65b0;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x4e0e;&#x53c2;&#x6570; filedes&#x5171;&#x4eab;&#x540c;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x8868;&#x9879; "/>
<node CREATED="1389174592948" ID="ID_1295906758" MODIFIED="1389174596355" TEXT="&#x56e0;&#x4e3a;&#x4e24;&#x4e2a;&#x63cf;&#x8ff0;&#x7b26;&#x6307;&#x5411;&#x540c;&#x4e00;&#x6587;&#x4ef6;&#x8868;&#x9879;,&#x6240;&#x4ee5;&#x5b83;&#x4eec;&#x5171;&#x4eab;&#x540c;&#x4e00;&#x6587;&#x4ef6;&#x72b6;&#x6001;&#x6807;&#x5fd7; (&#x8bfb;&#x3001;&#x5199;&#x3001;&#x6dfb;&#x5199;&#x7b49; ) &#x4ee5;&#x53ca;&#x540c;&#x4e00;&#x5f53;&#x524d;&#x6587;&#x4ef6;&#x4f4d;&#x79fb;&#x91cf; "/>
<node CREATED="1389174637101" ID="ID_1409985396" MODIFIED="1389174640316" TEXT="&#x6bcf;&#x4e2a;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x90fd;&#x6709;&#x5b83;&#x81ea;&#x5df1;&#x7684;&#x4e00;&#x5957;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x6807;&#x5fd7; "/>
<node CREATED="1389174653190" FOLDED="true" ID="ID_537194701" MODIFIED="1392030831762" TEXT="dup(filedes); ">
<node CREATED="1389174671382" ID="ID_499985751" MODIFIED="1389174673405" TEXT="fcntl (filedes, F_DUPFD, 0); "/>
</node>
<node CREATED="1389174660822" FOLDED="true" ID="ID_1373251928" MODIFIED="1392030831762" TEXT="dup2(filedes, filedes2) ">
<node CREATED="1389174680645" ID="ID_1171257910" MODIFIED="1389174683589" TEXT="close(filedes2); fcntl(filedes, F_DUPFD, filedes2); "/>
<node CREATED="1389174697631" FOLDED="true" ID="ID_1473019637" MODIFIED="1392030831762" TEXT="dup2&#x5e76;&#x4e0d;&#x5b8c;&#x5168;&#x7b49;&#x540c;&#x4e8e;close&#x52a0;&#x4e0a;fcntl ">
<node CREATED="1389174700911" ID="ID_1317182851" MODIFIED="1389174713294" TEXT="dup2&#x662f;&#x4e00;&#x4e2a;&#x539f;&#x5b50;&#x64cd;&#x4f5c;,&#x800c; close&#x53ca;fcntl&#x5219;&#x5305;&#x62ec;&#x4e24;&#x4e2a;&#x51fd;&#x6570;&#x8c03;&#x7528; "/>
<node CREATED="1389174718864" ID="ID_1588298917" MODIFIED="1389174720846" TEXT="&#x5728;dup2&#x548c;fcntl&#x4e4b;&#x95f4;&#x6709;&#x67d0;&#x4e9b;&#x4e0d;&#x540c;&#x7684;errno&#x3002; "/>
</node>
</node>
</node>
<node CREATED="1388932160541" FOLDED="true" ID="ID_1531314046" MODIFIED="1392030831763" TEXT="fcntl">
<node CREATED="1389175258985" FOLDED="true" ID="ID_973770067" MODIFIED="1392030831762" TEXT="&#x590d;&#x5236;&#x4e00;&#x4e2a;&#x73b0;&#x5b58;&#x7684;&#x63cf;&#x8ff0;&#x7b26; ">
<node CREATED="1389175309378" FOLDED="true" ID="ID_996890514" MODIFIED="1392030831762" TEXT="F_DUPFD ">
<node CREATED="1389175362092" ID="ID_1683622146" MODIFIED="1389175365248" TEXT="&#x65b0;&#x63cf;&#x8ff0;&#x7b26;&#x4e0e; filedes &#x5171;&#x4eab;&#x540c; &#x4e00;&#x6587;&#x4ef6;&#x8868;&#x9879; "/>
<node CREATED="1389175375363" ID="ID_366468006" MODIFIED="1389175377955" TEXT="&#x65b0;&#x63cf;&#x8ff0;&#x7b26;&#x6709;&#x5b83;&#x81ea;&#x5df1;&#x7684;&#x4e00;&#x5957;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x6807;&#x5fd7;,&#x5176; F D _ C L O E X E C &#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x6807;&#x5fd7;&#x5219;&#x88ab;&#x6e05;&#x9664; "/>
</node>
</node>
<node CREATED="1389175271273" FOLDED="true" ID="ID_1489485047" MODIFIED="1392030831763" TEXT="&#x83b7;&#x5f97;/&#x8bbe;&#x7f6e;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;&#x6807;&#x8bb0; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      F D _ C L O E X E C,&#32780;&#26159;&#23558;&#27492;
    </p>
    <p>
      &#26631;&#24535;&#35774;&#32622;&#20026;0(&#31995;&#32479;&#40664;&#35748;,&#22312;exec&#26102;&#19981;&#20851;&#38381;)&#25110;1(&#22312;exec&#26102;&#20851;&#38381;)&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389175435542" ID="ID_482428983" MODIFIED="1389175438597" TEXT="F_GETFD "/>
<node CREATED="1389175444390" ID="ID_1730471083" MODIFIED="1389175446773" TEXT=" F_SETFD "/>
</node>
<node CREATED="1389175279329" FOLDED="true" ID="ID_1890529815" MODIFIED="1392030831763" TEXT="&#x83b7;&#x5f97;/&#x8bbe;&#x7f6e;&#x6587;&#x4ef6;&#x72b6;&#x6001;&#x6807;&#x5fd7; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#34920;3-2 &#23545;&#20110;fcntl&#30340;&#25991;&#20214;&#29366;&#24577;&#26631;&#24535;
    </p>
    <p>
      &#25991;&#20214;&#29366;&#24577;&#26631;&#24535;
    </p>
    <p>
      &#35828;
    </p>
    <p>
      &#26126;
    </p>
    <p>
      O_RDONLY &#21482;&#35835;&#25171;&#24320;
    </p>
    <p>
      O_WRONLY &#21482;&#20889;&#25171;&#24320;
    </p>
    <p>
      O_RDWR &#35835;/&#20889;&#25171;&#24320;
    </p>
    <p>
      O_APPEND &#20889;&#26102;&#37117;&#28155;&#21152;&#33267;&#25991;&#20214;&#23614;
    </p>
    <p>
      O_NONBLOCK &#38750;&#38459;&#22622;&#26041;&#24335;
    </p>
    <p>
      O_SYNC &#31561;&#24453;&#20889;&#23436;&#25104;
    </p>
    <p>
      O_ASYNC &#24322;&#27493;I/O(&#20165;4.3+BSD)
    </p>
  </body>
</html></richcontent>
<node CREATED="1389175532897" ID="ID_1177553621" MODIFIED="1389175537720" TEXT="F_GETFL "/>
<node CREATED="1389175932597" FOLDED="true" ID="ID_41072945" MODIFIED="1392030831763" TEXT="F_SETFL ">
<node CREATED="1389175941925" ID="ID_1152606206" MODIFIED="1389175945188" TEXT="&#x53ef;&#x4ee5;&#x66f4;&#x6539;&#x7684;&#x51e0;&#x4e2a;&#x6807;&#x5fd7;&#x662f;: O_APPEND,O_NONBLOCK,O_SYNC&#x548c;O_ASYNC&#x3002; "/>
</node>
</node>
<node CREATED="1389175288913" FOLDED="true" ID="ID_1675303554" MODIFIED="1392030831763" TEXT="&#x83b7;&#x5f97;/&#x8bbe;&#x7f6e;&#x5f02;&#x6b65;I/O&#x6743; ">
<node CREATED="1389176025056" FOLDED="true" ID="ID_909983227" MODIFIED="1392030831763" TEXT="F_GETOWN ">
<node CREATED="1389176045008" ID="ID_1310588500" MODIFIED="1389176047255" TEXT="&#x53d6;&#x5f53;&#x524d;&#x63a5;&#x6536;SIGIO&#x548c;SIGURG&#x4fe1;&#x53f7;&#x7684;&#x8fdb;&#x7a0b;ID&#x6216;&#x8fdb;&#x7a0b;&#x7ec4;ID "/>
</node>
<node CREATED="1389176032512" FOLDED="true" ID="ID_229390527" MODIFIED="1392030831763" TEXT="F_SETOWN ">
<node CREATED="1389176058801" ID="ID_507984447" MODIFIED="1389176060911" TEXT="&#x6b63;&#x7684;arg&#x6307;&#x5b9a;&#x4e00;&#x4e2a;&#x8fdb; &#x7a0b;ID,&#x8d1f;&#x7684;arg&#x8868;&#x793a;&#x7b49;&#x4e8e;arg&#x7edd;&#x5bf9;&#x503c;&#x7684;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x7ec4;ID&#x3002; "/>
</node>
</node>
<node CREATED="1389175297354" ID="ID_901573034" MODIFIED="1389175300792" TEXT="&#x83b7;&#x5f97;/&#x8bbe;&#x7f6e;&#x8bb0;&#x5f55;&#x9501; "/>
</node>
<node CREATED="1388932164905" ID="ID_1961880396" MODIFIED="1388932170005" TEXT="ioctl"/>
<node CREATED="1388932170699" FOLDED="true" ID="ID_1210432751" MODIFIED="1392030831763" TEXT="/dev/fd">
<node CREATED="1389267235837" ID="ID_51810259" MODIFIED="1389267238094" TEXT="&#x6253;&#x5f00;&#x6587;&#x4ef6; /dev/fd/n&#x7b49;&#x6548;&#x4e8e;&#x590d;&#x5236;&#x63cf;&#x8ff0;&#x7b26; n "/>
<node CREATED="1389267266553" ID="ID_600085405" MODIFIED="1389267267846" TEXT="&#x5927;&#x591a;&#x6570;&#x7cfb;&#x7edf;&#x5ffd;&#x7565;&#x6240;&#x6307;&#x5b9a;&#x7684; m o d e,&#x800c;&#x53e6;&#x5916;&#x4e00;&#x4e9b;&#x5219;&#x8981;&#x6c42; m o d e&#x662f;&#x6240;&#x6d89;&#x53ca;&#x7684;&#x6587;&#x4ef6; (&#x5728;&#x8fd9;&#x91cc;&#x5219;&#x662f;&#x6807;&#x51c6;&#x8f93; &#x5165;)&#x539f;&#x5148;&#x6253;&#x5f00;&#x65f6;&#x6240;&#x4f7f;&#x7528;&#x7684;mode&#x7684;&#x5b50;&#x96c6; "/>
</node>
<node CREATED="1388932182188" FOLDED="true" ID="ID_740226426" MODIFIED="1392030831763" TEXT="&#x5c0f;&#x7ed3;">
<node CREATED="1389267709535" ID="ID_1948033871" MODIFIED="1389267710611" TEXT="3 . 2 "/>
</node>
</node>
<node CREATED="1389267780891" FOLDED="true" ID="ID_1434174460" MODIFIED="1391172355709" POSITION="right" TEXT="file and directory">
<node CREATED="1389267800145" FOLDED="true" ID="ID_503020766" MODIFIED="1392030831763" TEXT="&#x5f15;&#x8a00; ">
<node CREATED="1389268481724" ID="ID_958415145" MODIFIED="1389268482432" TEXT="s t a t&#x51fd;&#x6570;&#x5f00; &#x59cb;,&#x9010;&#x4e2a;&#x8bf4;&#x660e; s t a t&#x7ed3;&#x6784;&#x7684;&#x6bcf;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x4ee5;&#x4e86;&#x89e3;&#x6587;&#x4ef6;&#x7684;&#x6240;&#x6709;&#x5c5e;&#x6027;&#x3002; "/>
<node CREATED="1389268494109" ID="ID_1277573516" MODIFIED="1389268494528" TEXT="&#x66f4;&#x8be6;&#x7ec6;&#x5730;&#x5bdf;&#x770b; U N I X&#x6587;&#x4ef6;&#x7cfb;&#x7edf;&#x7684;&#x7ed3;&#x6784;&#x4ee5; &#x53ca;&#x7b26;&#x53f7;&#x8fde;&#x63a5; "/>
<node CREATED="1389268501668" ID="ID_1832640770" MODIFIED="1389268502036" TEXT="&#x4ecb;&#x7ecd;&#x5bf9;&#x76ee;&#x5f55;&#x8fdb;&#x884c;&#x64cd;&#x4f5c;&#x7684;&#x5404;&#x4e2a;&#x51fd;&#x6570; "/>
<node CREATED="1389268507491" ID="ID_502728248" MODIFIED="1389268508393" TEXT="&#x5f00;&#x53d1;&#x4e86;&#x4e00;&#x4e2a;&#x4ee5;&#x964d;&#x5e8f;&#x904d;&#x5386;&#x76ee;&#x5f55; &#x5c42;&#x6b21;&#x7ed3;&#x6784;&#x7684;&#x51fd;&#x6570; "/>
</node>
<node CREATED="1389267855436" FOLDED="true" ID="ID_1564449828" MODIFIED="1392030831763" TEXT="stat&#x3001;fstat &#x548c;lstat &#x51fd;&#x6570; ">
<font BOLD="true" NAME="SansSerif" SIZE="12"/>
<node CREATED="1389268590903" ID="ID_1781245111" MODIFIED="1389268591882" TEXT="lstat&#x51fd;&#x6570;&#x7c7b;&#x4f3c;&#x4e8e;stat,&#x4f46;&#x662f;&#x5f53;&#x547d;&#x540d;&#x7684;&#x6587;&#x4ef6;&#x662f;&#x4e00;&#x4e2a;&#x7b26;&#x53f7;&#x8fde;&#x63a5;&#x65f6;, lstat&#x8fd4;&#x56de;&#x8be5;&#x7b26;&#x53f7;&#x8fde;&#x63a5;&#x7684;&#x6709;&#x5173;&#x4fe1;&#x606f;,&#x800c;&#x4e0d;&#x662f;&#x7531;&#x8be5;&#x7b26;&#x53f7;&#x8fde;&#x63a5;&#x5f15;&#x7528;&#x7684;&#x6587;&#x4ef6;&#x7684;&#x4fe1;&#x606f;&#x3002; "/>
</node>
<node CREATED="1389267877891" FOLDED="true" ID="ID_1332617616" MODIFIED="1392030831763" TEXT="&#x6587;&#x4ef6;&#x7c7b;&#x578b; ">
<node CREATED="1389268965047" FOLDED="true" ID="ID_341897323" MODIFIED="1392030831763" TEXT="macro">
<node CREATED="1389268971490" ID="ID_1887947238" MODIFIED="1389269027558" TEXT="S_ISREG()  &#x666e;&#x901a;&#x6587;&#x4ef6; "/>
<node CREATED="1389269028009" ID="ID_505435632" MODIFIED="1389269034776" TEXT="S_ISDIR() &#x76ee;&#x5f55;&#x6587;&#x4ef6; "/>
<node CREATED="1389269035098" ID="ID_422016871" MODIFIED="1389269044057" TEXT="S_ISCHR() &#x5b57;&#x7b26;&#x7279;&#x6b8a;&#x6587;&#x4ef6; "/>
<node CREATED="1389269044457" ID="ID_477687831" MODIFIED="1389269045161" TEXT="S_ISBLK() &#x5757;&#x7279;&#x6b8a;&#x6587;&#x4ef6;"/>
<node CREATED="1389269064987" ID="ID_1276021428" MODIFIED="1389269065622" TEXT="S_ISFIFO() &#x7ba1;&#x9053;&#x6216;FIFO "/>
<node CREATED="1389269071306" ID="ID_1353839651" MODIFIED="1389269072504" TEXT="S_ISLNK() &#x7b26;&#x53f7;&#x8fde;&#x63a5;( POSIX.1&#x6216;SVR4&#x65e0;&#x6b64;&#x7c7b;&#x578b;) "/>
<node CREATED="1389269077450" ID="ID_1218106880" MODIFIED="1389269078223" TEXT="S_ISSOCK() &#x5957;&#x63a5;&#x5b57;(POSIX.1&#x6216;SVR4&#x65e0;&#x6b64;&#x7c7b;&#x578b;) "/>
</node>
</node>
<node CREATED="1389267889210" FOLDED="true" ID="ID_134925367" MODIFIED="1392030831763" TEXT="set-uid&#x548c;set-gid">
<icon BUILTIN="help"/>
<node CREATED="1389269920506" FOLDED="true" ID="ID_311017957" MODIFIED="1392030831763" TEXT="&#x4e0e;&#x4e00;&#x4e2a;&#x8fdb;&#x7a0b;&#x76f8;&#x5173;&#x8054;&#x7684; ID&#x6709;&#x516d;&#x4e2a;&#x6216;&#x66f4;&#x591a; ">
<node CREATED="1389270198726" ID="ID_390953904" MODIFIED="1389353491440" TEXT="&#x6211;&#x4eec;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x8c01; uid and gid"/>
<node CREATED="1389270206414" ID="ID_3170587" MODIFIED="1389353510929" TEXT="&#x7528;&#x4e8e;&#x6587;&#x4ef6;&#x5b58;&#x53d6;&#x8bb8;&#x53ef;&#x6743;&#x68c0;&#x67e5; euid egid"/>
<node CREATED="1389270238302" FOLDED="true" ID="ID_359810321" MODIFIED="1392030831763" TEXT="st_mode">
<node CREATED="1389270600124" ID="ID_949008606" MODIFIED="1389271372465" TEXT="&#x5f53;&#x6267;&#x884c;&#x6b64;&#x6587;&#x4ef6;&#x65f6;, &#x5c06;&#x8fdb;&#x7a0b;&#x7684;&#x6709;&#x6548;&#x7528;&#x6237; ID&#x8bbe;&#x7f6e;&#x4e3a;&#x6587;&#x4ef6;&#x7684;&#x6240;&#x6709;&#x8005; (st_uid)&#x201d; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      But the capability exists to set a special flag in the
    </p>
    <p>
      file's mode word (st_mode) that says &quot;when this file is executed, set the effective user ID of the
    </p>
    <p>
      process to be the owner of the file (st_uid).&quot;
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="help"/>
</node>
</node>
</node>
</node>
<node CREATED="1389267906548" FOLDED="true" ID="ID_769652034" MODIFIED="1392030831763" TEXT="&#x6587;&#x4ef6;&#x5b58;&#x53d6;&#x8bb8;&#x53ef;&#x6743; ">
<node CREATED="1389271382765" FOLDED="true" ID="ID_936589365" MODIFIED="1392030831763" TEXT="9&#x4e2a;&#x5b58;&#x53d6;&#x8bb8;&#x53ef;&#x6743;&#x4f4d; ">
<node CREATED="1389271484407" ID="ID_1519953924" MODIFIED="1389271485059" TEXT="S_IRUSR &#x7528;&#x6237;-&#x8bfb; "/>
<node CREATED="1389271495160" ID="ID_1452921883" MODIFIED="1389271495875" TEXT="S_IWUSR &#x7528;&#x6237;-&#x5199; "/>
<node CREATED="1389271533047" ID="ID_583326206" MODIFIED="1389271533556" TEXT="S_IXUSR &#x7528;&#x6237;-&#x6267;&#x884c; "/>
<node CREATED="1389271542911" ID="ID_932708923" MODIFIED="1389271543413" TEXT="S_IRGRP &#x7ec4;-&#x8bfb; "/>
<node CREATED="1389271548095" ID="ID_373393732" MODIFIED="1389271548591" TEXT="S_IWGRP &#x7ec4;-&#x5199; "/>
<node CREATED="1389271554383" ID="ID_870384107" MODIFIED="1389271554913" TEXT="S_IXGRP &#x7ec4;-&#x6267;&#x884c; "/>
<node CREATED="1389271561167" ID="ID_1297661737" MODIFIED="1389271561708" TEXT="S_IROTH &#x5176;&#x4ed6;-&#x8bfb; "/>
<node CREATED="1389271566383" ID="ID_1445043191" MODIFIED="1389271566932" TEXT="S_IWOTH &#x5176;&#x4ed6;-&#x5199; "/>
<node CREATED="1389271571375" ID="ID_285126769" MODIFIED="1389271572231" TEXT="S_IXOTH &#x5176;&#x4ed6;-&#x6267;&#x884c; "/>
</node>
<node CREATED="1389271890629" FOLDED="true" ID="ID_418337803" MODIFIED="1392030831763" TEXT="rules">
<node CREATED="1389271913429" ID="ID_1204256427" MODIFIED="1389271914012" TEXT="The first rule is that whenever we want to open any type of file by name, we must have execute permission in each directory mentioned in the name, including the current directory, if it is implied. "/>
<node CREATED="1389271926500" ID="ID_796907937" MODIFIED="1389271927057" TEXT="read permission for a directory and execute permission for a directory mean different things. "/>
<node CREATED="1389272322797" ID="ID_1870073843" MODIFIED="1389272325555" TEXT="To delete an existing file, we need write permission and execute permission in the directory containing the file. We do not need read permission or write permission for the file itself. "/>
</node>
<node CREATED="1389272963426" FOLDED="true" ID="ID_558740302" MODIFIED="1392030831763" TEXT="The file access tests of kernel">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      These four steps are tried in sequence. Note that if the process owns the file (step 2), access is
    </p>
    <p>
      granted or denied based only on the user access permissions; the group permissions are never
    </p>
    <p>
      looked at
    </p>
  </body>
</html></richcontent>
<node CREATED="1389272994864" ID="ID_278151530" MODIFIED="1389272995590" TEXT="The two owner IDs are properties of the file, whereas the two effective IDs and the supplementary group IDs are properties of the process "/>
<node CREATED="1389273011298" ID="ID_1216433489" MODIFIED="1389273017673" TEXT="1.superuser"/>
<node CREATED="1389273017995" ID="ID_307698744" MODIFIED="1389273022926" TEXT="2.user id"/>
<node CREATED="1389273023209" ID="ID_91733898" MODIFIED="1389273027689" TEXT="3.group id"/>
<node CREATED="1389273027930" ID="ID_452252075" MODIFIED="1389273042943" TEXT="4.other"/>
</node>
</node>
<node CREATED="1389267915796" FOLDED="true" ID="ID_75194178" MODIFIED="1392030831764" TEXT="&#x65b0;&#x6587;&#x4ef6;&#x548c;&#x76ee;&#x5f55;&#x7684;&#x6240;&#x6709;&#x6743; ">
<node CREATED="1389273367968" ID="ID_47419139" MODIFIED="1389273369038" TEXT="&#x65b0;&#x6587;&#x4ef6;&#x7684;&#x7528;&#x6237; ID&#x8bbe;&#x7f6e;&#x4e3a;&#x8fdb;&#x7a0b;&#x7684;&#x6709;&#x6548;&#x7528;&#x6237; ID "/>
<node CREATED="1389273394922" FOLDED="true" ID="ID_647577741" MODIFIED="1392030831763" TEXT="&#x5173;&#x4e8e;&#x7ec4;ID, ">
<node CREATED="1389273412417" ID="ID_1739156579" MODIFIED="1389273413561" TEXT="&#x8fdb;&#x7a0b;&#x7684;&#x6709;&#x6548;&#x7ec4;ID "/>
<node CREATED="1389273414242" ID="ID_1792674941" MODIFIED="1389273428633" TEXT="or &#x5b83;&#x6240;&#x5728;&#x76ee;&#x5f55;&#x7684;&#x7ec4;ID "/>
</node>
</node>
<node CREATED="1389267925573" FOLDED="true" ID="ID_1193264185" MODIFIED="1392030831764" TEXT="access&#x51fd;&#x6570; ">
<node CREATED="1389357203702" ID="ID_153782176" MODIFIED="1389357219244" TEXT="not work">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1389267937469" ID="ID_247077787" MODIFIED="1389267941577" TEXT="umask&#x51fd;&#x6570; "/>
<node CREATED="1389267948317" FOLDED="true" ID="ID_328812717" MODIFIED="1391171913519" TEXT="chmod&#x548c;fchmod&#x51fd;&#x6570; ">
<node CREATED="1389358916619" ID="ID_1504976576" MODIFIED="1389358917754" TEXT="S_ISUID  "/>
<node CREATED="1389358922371" ID="ID_710349199" MODIFIED="1389358925304" TEXT="S_ISGID  "/>
<node CREATED="1389358928156" ID="ID_1338865251" MODIFIED="1389358931567" TEXT="S_ISVTX  "/>
<node CREATED="1389358934082" FOLDED="true" ID="ID_583802599" MODIFIED="1392030831764" TEXT="S_IRWXU  ">
<node CREATED="1389358940484" ID="ID_749294602" MODIFIED="1389358942505" TEXT="S_IRUSR "/>
<node CREATED="1389358947492" ID="ID_1246335404" MODIFIED="1389358949705" TEXT="S_IWUSR "/>
<node CREATED="1389358898987" ID="ID_1473101765" MODIFIED="1389358956347" TEXT="S_IXUSR "/>
</node>
<node CREATED="1389358963061" FOLDED="true" ID="ID_573221133" MODIFIED="1392030831764" TEXT="S_IRWXG ">
<node CREATED="1389358971571" ID="ID_792172559" MODIFIED="1389358974386" TEXT="S_IRGRP "/>
<node CREATED="1389359002182" ID="ID_1351015098" MODIFIED="1389359004380" TEXT="S_IWGRP "/>
<node CREATED="1389359013134" ID="ID_1991327965" MODIFIED="1389359015484" TEXT="S_IXGRP "/>
</node>
<node CREATED="1389359019238" FOLDED="true" ID="ID_1441297433" MODIFIED="1392030831764" TEXT="S_IRWXO ">
<node CREATED="1389359025142" ID="ID_164709567" MODIFIED="1389359027180" TEXT="S_IROTH "/>
<node CREATED="1389359030486" ID="ID_1113635160" MODIFIED="1389359032469" TEXT="S_IWOTH "/>
<node CREATED="1389359036071" ID="ID_856240188" MODIFIED="1389359038381" TEXT="S_IXOTH "/>
</node>
</node>
<node CREATED="1389267959468" ID="ID_411502781" MODIFIED="1389360065192" TEXT="Sticky Bit "/>
<node CREATED="1389267969012" ID="ID_1751972803" MODIFIED="1389267969857" TEXT="chown, fchown&#x548c;lchown&#x51fd;&#x6570; "/>
<node CREATED="1389267975766" ID="ID_662506635" MODIFIED="1389267976436" TEXT="&#x6587;&#x4ef6;&#x957f;&#x5ea6; "/>
<node CREATED="1389267984487" ID="ID_252565048" MODIFIED="1389267985004" TEXT="&#x6587;&#x4ef6;&#x622a;&#x77ed; "/>
<node CREATED="1389267992481" ID="ID_1825827422" MODIFIED="1389267993084" TEXT="&#x6587;&#x4ef6;&#x7cfb;&#x7edf; "/>
<node CREATED="1389267999886" ID="ID_1159111203" MODIFIED="1389268000485" TEXT="link,unlink,remove&#x548c;rename&#x51fd;&#x6570; "/>
<node CREATED="1389268009190" ID="ID_1454263191" MODIFIED="1389268010005" TEXT="&#x7b26;&#x53f7;&#x8fde;&#x63a5; "/>
<node CREATED="1389268017093" ID="ID_830306934" MODIFIED="1389268017797" TEXT="symlink&#x548c;readlink&#x51fd;&#x6570; "/>
<node CREATED="1389268047702" ID="ID_140137008" MODIFIED="1389268048310" TEXT="&#x6587;&#x4ef6;&#x7684;&#x65f6;&#x95f4; "/>
<node CREATED="1389268024527" ID="ID_323834099" MODIFIED="1389268025149" TEXT="utime&#x51fd;&#x6570; "/>
<node CREATED="1389268033783" ID="ID_960220071" MODIFIED="1389268035715" TEXT="mkdir&#x548c;rmdir&#x51fd;&#x6570; "/>
<node CREATED="1389268063223" ID="ID_1702584292" MODIFIED="1389268064670" TEXT="&#x8bfb;&#x76ee;&#x5f55; "/>
<node CREATED="1389268072080" ID="ID_1225337312" MODIFIED="1389268072575" TEXT="chdir, fchdir &#x548c;getcwd &#x51fd;&#x6570; "/>
<node CREATED="1389268080399" ID="ID_99953322" MODIFIED="1389268081071" TEXT="&#x7279;&#x6b8a;&#x8bbe;&#x5907;&#x6587;&#x4ef6; "/>
<node CREATED="1389268090623" ID="ID_136098853" MODIFIED="1389268090951" TEXT="sync&#x548c;fsync&#x51fd;&#x6570; "/>
<node CREATED="1389268101561" ID="ID_1133816704" MODIFIED="1389268101941" TEXT="&#x6587;&#x4ef6;&#x5b58;&#x53d6;&#x8bb8;&#x53ef;&#x6743;&#x4f4d;&#x5c0f;&#x7ed3; "/>
<node CREATED="1389268108082" ID="ID_1377269460" MODIFIED="1389268108440" TEXT="&#x5c0f;&#x7ed3; "/>
</node>
<node CREATED="1389955991440" FOLDED="true" ID="ID_474467445" MODIFIED="1390210210912" POSITION="right" TEXT="&#x6807; &#x51c6; I/O &#x5e93; ">
<node CREATED="1389956001200" FOLDED="true" ID="ID_40213422" MODIFIED="1392030831764" TEXT="&#x6d41;&#x548c;FILE&#x5bf9;&#x8c61; ">
<node CREATED="1389956033665" ID="ID_347955784" MODIFIED="1389956035791" TEXT="&#x5b83;&#x5305;&#x542b;&#x4e86;I/O&#x5e93;&#x4e3a;&#x7ba1;&#x7406;&#x8be5;&#x6d41;&#x6240;&#x9700;&#x8981;&#x7684;&#x6240;&#x6709;&#x4fe1;&#x606f;:&#x7528;&#x4e8e;&#x5b9e;&#x9645; I/O&#x7684;&#x6587;&#x4ef6;&#x63cf;&#x8ff0;&#x7b26;,&#x6307;&#x5411;&#x6d41;&#x7f13;&#x5b58;&#x7684; &#x6307;&#x9488;,&#x7f13;&#x5b58;&#x7684;&#x957f;&#x5ea6;,&#x5f53;&#x524d;&#x5728;&#x7f13;&#x5b58;&#x4e2d;&#x7684;&#x5b57;&#x7b26;&#x6570;,&#x51fa;&#x9519;&#x6807;&#x5fd7;&#x7b49;&#x7b49; "/>
</node>
<node CREATED="1389956009217" FOLDED="true" ID="ID_1089851351" MODIFIED="1392030831764" TEXT="&#x6807;&#x51c6;&#x8f93;&#x5165;&#x3001;&#x6807;&#x51c6;&#x8f93;&#x51fa;&#x548c;&#x6807;&#x51c6;&#x51fa;&#x9519; ">
<node CREATED="1389956082714" ID="ID_1593767073" MODIFIED="1389956084977" TEXT=" STDIN_FILENO,STDOUT_FILENO&#x548c;STDERR_FILENO "/>
<node CREATED="1389956090274" ID="ID_273904718" MODIFIED="1389956092313" TEXT="s t d i n , s t d o u t&#x548c;s t d e r r "/>
</node>
<node CREATED="1389956098067" FOLDED="true" ID="ID_671076263" MODIFIED="1389956496647" TEXT="&#x7f13;&#x5b58; ">
<node CREATED="1389956108171" FOLDED="true" ID="ID_520681632" MODIFIED="1392030831764" TEXT="&#x4e09;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x7f13;&#x5b58; ">
<node CREATED="1389956114443" FOLDED="true" ID="ID_1856088015" MODIFIED="1392030831764" TEXT="&#x5168;&#x7f13;&#x5b58; ">
<node CREATED="1389956157556" ID="ID_1728911265" MODIFIED="1389956159755" TEXT="&#x5f53;&#x586b;&#x6ee1;&#x6807;&#x51c6; I/O&#x7f13;&#x5b58;&#x540e;&#x624d;&#x8fdb;&#x884c;&#x5b9e;&#x9645;I/O&#x64cd;&#x4f5c; "/>
<node CREATED="1389956171300" ID="ID_1762991393" MODIFIED="1389956173387" TEXT="&#x5728;&#x4e00;&#x4e2a;&#x6d41;&#x4e0a;&#x6267;&#x884c;&#x7b2c;&#x4e00;&#x6b21; I/O&#x64cd;&#x4f5c;&#x65f6;,&#x76f8;&#x5173;&#x6807;&#x51c6;I/O&#x51fd;&#x6570;&#x901a; &#x5e38;&#x8c03;&#x7528;malloc(&#x89c1;7.8&#x8282;)&#x83b7;&#x5f97;&#x9700;&#x4f7f;&#x7528;&#x7684;&#x7f13;&#x5b58; "/>
</node>
<node CREATED="1389956121323" FOLDED="true" ID="ID_574297974" MODIFIED="1392030831764" TEXT="&#x884c;&#x7f13;&#x5b58; ">
<node CREATED="1389956201404" ID="ID_1966900853" MODIFIED="1389956203787" TEXT="&#x5f53;&#x5728;&#x8f93;&#x5165;&#x548c;&#x8f93;&#x51fa;&#x4e2d;&#x9047;&#x5230;&#x65b0;&#x884c;&#x7b26;&#x65f6;,&#x6807;&#x51c6; I/O&#x5e93;&#x6267;&#x884c;I/O&#x64cd;&#x4f5c; "/>
<node CREATED="1389956221597" FOLDED="true" ID="ID_1075449417" MODIFIED="1392030831764" TEXT="&#x4e24;&#x4e2a;&#x9650;&#x5236; ">
<node CREATED="1389956234742" ID="ID_1586148916" MODIFIED="1389956236924" TEXT="&#x56e0;&#x4e3a;&#x6807;&#x51c6; I / O&#x5e93;&#x7528;&#x6765;&#x6536;&#x96c6;&#x6bcf;&#x4e00;&#x884c;&#x7684;&#x7f13;&#x5b58;&#x7684;&#x957f;&#x5ea6;&#x662f;&#x56fa;&#x5b9a; &#x7684;,&#x6240;&#x4ee5;&#x53ea;&#x8981;&#x586b;&#x6ee1;&#x4e86;&#x7f13;&#x5b58;,&#x90a3;&#x4e48;&#x5373;&#x4f7f;&#x8fd8;&#x6ca1;&#x6709;&#x5199;&#x4e00;&#x4e2a;&#x65b0;&#x884c;&#x7b26;,&#x4e5f;&#x8fdb;&#x884c; I / O&#x64cd;&#x4f5c; "/>
<node CREATED="1389956249806" ID="ID_1451680962" MODIFIED="1389956251645" TEXT="&#x4efb;&#x4f55; &#x65f6;&#x5019;&#x53ea;&#x8981;&#x901a;&#x8fc7;&#x6807;&#x51c6;&#x8f93;&#x5165;&#x8f93;&#x51fa;&#x5e93;&#x8981;&#x6c42;&#x4ece; ( a )&#x4e00;&#x4e2a;&#x4e0d;&#x5e26;&#x7f13;&#x5b58;&#x7684;&#x6d41;,&#x6216;&#x8005; ( b )&#x4e00;&#x4e2a;&#x884c;&#x7f13;&#x5b58;&#x7684;&#x6d41;(&#x5b83;&#x9884;&#x5148; &#x8981;&#x6c42;&#x4ece;&#x5185;&#x6838;&#x5f97;&#x5230;&#x6570;&#x636e;)&#x5f97;&#x5230;&#x8f93;&#x5165;&#x6570;&#x636e;,&#x90a3;&#x4e48;&#x5c31;&#x4f1a;&#x9020;&#x6210;&#x5237;&#x65b0;&#x6240;&#x6709;&#x884c;&#x7f13;&#x5b58;&#x8f93;&#x51fa;&#x6d41; "/>
</node>
</node>
<node CREATED="1389956127643" FOLDED="true" ID="ID_1733096592" MODIFIED="1392030831764" TEXT="&#x4e0d;&#x5e26;&#x7f13;&#x5b58; ">
<node CREATED="1389956272975" ID="ID_1404555521" MODIFIED="1389956274885" TEXT="&#x76f8;&#x5f53;&#x4e8e;&#x7528; w r i t e&#x7cfb;&#x7edf;&#x8c03;&#x7528;&#x51fd;&#x6570;&#x5c06;&#x8fd9;&#x4e9b;&#x5b57;&#x7b26;&#x5199;&#x81f3;&#x76f8;&#x5173;&#x8054;&#x7684;&#x6253;&#x5f00;&#x6587;&#x4ef6;&#x4e0a; "/>
</node>
</node>
<node CREATED="1389956295976" FOLDED="true" ID="ID_1459334114" MODIFIED="1392030831764" TEXT="ANSI C&#x8981;&#x6c42;&#x4e0b;&#x5217;&#x7f13;&#x5b58;&#x7279;&#x5f81;: ">
<node CREATED="1389956303959" ID="ID_913381373" MODIFIED="1389956305982" TEXT="&#x5f53;&#x4e14;&#x4ec5;&#x5f53;&#x6807;&#x51c6;&#x8f93;&#x5165;&#x548c;&#x6807;&#x51c6;&#x8f93;&#x51fa;&#x5e76;&#x4e0d;&#x6d89;&#x53ca;&#x4ea4;&#x4e92;&#x4f5c;&#x7528;&#x8bbe;&#x5907;&#x65f6;,&#x5b83;&#x4eec;&#x624d;&#x662f;&#x5168;&#x7f13;&#x5b58;&#x7684; "/>
<node CREATED="1389956311095" ID="ID_240982362" MODIFIED="1389956313574" TEXT="&#x6807;&#x51c6;&#x51fa;&#x9519;&#x51b3;&#x4e0d;&#x4f1a;&#x662f;&#x5168;&#x7f13;&#x5b58;&#x7684; "/>
</node>
<node CREATED="1389956323288" FOLDED="true" ID="ID_1554376916" MODIFIED="1392030831764" TEXT="S V R 4&#x548c;4 . 3 + B S D&#x7684;&#x7cfb;&#x7edf;&#x9ed8;&#x8ba4;&#x4f7f;&#x7528; &#x4e0b;&#x5217;&#x7c7b;&#x578b;&#x7684;&#x7f13;&#x5b58;: ">
<node CREATED="1389956332064" ID="ID_1837894912" MODIFIED="1389956334559" TEXT="&#x6807;&#x51c6;&#x51fa;&#x9519;&#x662f;&#x4e0d;&#x5e26;&#x7f13;&#x5b58;&#x7684; "/>
<node CREATED="1389956342720" ID="ID_909408153" MODIFIED="1389956344695" TEXT="&#x5982;&#x82e5;&#x662f;&#x6d89;&#x53ca;&#x7ec8;&#x7aef;&#x8bbe;&#x5907;&#x7684;&#x5176;&#x4ed6;&#x6d41;,&#x5219;&#x5b83;&#x4eec;&#x662f;&#x884c;&#x7f13;&#x5b58;&#x7684;;&#x5426;&#x5219;&#x662f;&#x5168;&#x7f13;&#x5b58;&#x7684;&#x3002; "/>
</node>
<node CREATED="1389956364745" FOLDED="true" ID="ID_1451931516" MODIFIED="1392030831764" TEXT="&#x66f4;&#x6539;&#x7f13;&#x5b58;&#x7c7b;&#x578b; :">
<node CREATED="1389956373105" ID="ID_1967776986" MODIFIED="1389956375087" TEXT="v o i d s e t b u f ( F I L E fp, char * uf) ; "/>
<node CREATED="1389956380345" FOLDED="true" ID="ID_1773329015" MODIFIED="1392030831764" TEXT="i n t s e t v b u f ( F I L Efp, char * uf, i n t mode, s i z e _ t size) ; ">
<node CREATED="1389956415018" ID="ID_539945421" MODIFIED="1389956416913" TEXT="_IOFBF &#x5168;&#x7f13;&#x5b58; "/>
<node CREATED="1389956421601" ID="ID_743868095" MODIFIED="1389956423529" TEXT="_IOLBF &#x884c;&#x7f13;&#x5b58; "/>
<node CREATED="1389956428450" ID="ID_1830357853" MODIFIED="1389956430417" TEXT="_ I O N B F &#x4e0d;&#x5e26;&#x7f13;&#x5b58; "/>
</node>
</node>
<node CREATED="1389956483659" ID="ID_1467746384" MODIFIED="1389956485282" TEXT="i n t f f l u s h ( F I L E fp) ; "/>
</node>
<node CREATED="1389956499035" FOLDED="true" ID="ID_927107916" MODIFIED="1392030831767" TEXT="&#x6253;&#x5f00;&#x6d41; ">
<node CREATED="1389956869401" FOLDED="true" ID="ID_1107494655" MODIFIED="1392030831764" TEXT="i n t f c l o s e ( F I L E fp) ; ">
<node CREATED="1389958143998" ID="ID_695955279" MODIFIED="1389958144861" TEXT="&#x5728;&#x8be5;&#x6587;&#x4ef6;&#x88ab;&#x5173;&#x95ed;&#x4e4b;&#x524d;,&#x5237;&#x65b0;&#x7f13;&#x5b58;&#x4e2d;&#x7684;&#x8f93;&#x51fa;&#x6570;&#x636e; "/>
<node CREATED="1389958152182" ID="ID_86455056" MODIFIED="1389958153347" TEXT="&#x7f13;&#x5b58;&#x4e2d;&#x7684;&#x8f93;&#x5165;&#x6570;&#x636e;&#x88ab;&#x4e22;&#x5f03; "/>
<node CREATED="1389958160863" ID="ID_1849285824" MODIFIED="1389958162653" TEXT="&#x5982;&#x679c;&#x6807;&#x51c6; I / O&#x5e93;&#x5df2; &#x7ecf;&#x4e3a;&#x8be5;&#x6d41;&#x81ea;&#x52a8;&#x5206;&#x914d;&#x4e86;&#x4e00;&#x4e2a;&#x7f13;&#x5b58;,&#x5219;&#x91ca;&#x653e;&#x6b64;&#x7f13;&#x5b58; "/>
</node>
<node CREATED="1389956955717" ID="ID_1311734039" MODIFIED="1389956956752" TEXT="F I L E * f o p e n ( c o n s t c h a rathname, c o n s t c h a r type) ; "/>
<node CREATED="1389956960946" FOLDED="true" ID="ID_1965231472" MODIFIED="1392030831764" TEXT="F I L E * f r e o p e n ( c o n s t c h a pathname, c o n s t c h a r type, F I L E fp) ; ">
<node CREATED="1389957013883" ID="ID_1888350029" MODIFIED="1389957018329" TEXT="&#x6b64;&#x51fd;&#x6570;&#x4e00;&#x822c;&#x7528;&#x4e8e;&#x5c06;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7684;&#x6587;&#x4ef6;&#x6253;&#x5f00;&#x4e3a;&#x4e00;&#x4e2a;&#x9884;&#x5b9a;&#x4e49;&#x7684;&#x6d41;: &#x6807;&#x51c6;&#x8f93;&#x5165;&#x3001;&#x6807;&#x51c6;&#x8f93;&#x51fa;&#x6216;&#x6807;&#x51c6;&#x51fa;&#x9519;&#x3002; "/>
</node>
<node CREATED="1389956974554" FOLDED="true" ID="ID_1408695189" MODIFIED="1392030831764" TEXT="F I L E * f d o p e n ( i n tiledes, c o n s t c h a r type) ; ">
<node CREATED="1389957029259" ID="ID_1094773936" MODIFIED="1389957090815" TEXT="&#x6b64;&#x51fd;&#x6570;&#x5e38;&#x7528;&#x4e8e;&#x7531;&#x521b;&#x5efa;&#x7ba1;&#x9053;&#x548c;&#x7f51;&#x7edc;&#x901a;&#x4fe1;&#x901a; &#x9053;&#x51fd;&#x6570;&#x83b7;&#x5f97;&#x7684;&#x63d2;&#x8ff0;&#x7b26; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22240;&#20026;&#36825;&#20123;&#29305;&#27530;&#31867;&#22411;&#30340;&#25991;&#20214;&#19981;&#33021;&#29992;&#26631;&#20934; I/O fopen&#20989;&#25968;&#25171;&#24320;,&#39318;&#20808;&#24517;&#39035;&#20808;&#35843;
    </p>
    <p>
      &#29992;&#35774;&#22791;&#19987;&#29992;&#20989;&#25968;&#20197;&#33719;&#24471;&#19968;&#20010;&#25991;&#20214;&#25551;&#36848;&#31526;,&#28982;&#21518;&#29992; fdopen&#20351;&#19968;&#20010;&#26631;&#20934;I/O&#27969;&#19982;&#35813;&#25551;&#36848;&#31526;&#30456;&#32467;&#21512;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389957092100" FOLDED="true" ID="ID_1974602522" MODIFIED="1389958141920" TEXT="type&#x53c2;&#x6570; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20351;&#29992;&#23383;&#31526; b&#20316;&#20026;t y p e&#30340;&#19968;&#37096;&#20998;,&#20351;&#24471;&#26631;&#20934; I / O&#31995;&#32479;&#21487;&#20197;&#21306;&#20998;&#25991;&#26412;&#25991;&#20214;&#21644;&#20108;&#36827;&#21046;&#25991;&#20214;
    </p>
    <p>
      &#22240;&#20026;
    </p>
    <p>
      U N I X&#20869;&#26680;&#24182;&#19981;&#23545;&#36825;&#20004;&#31181;&#25991;&#20214;&#36827;&#34892;&#21306;&#20998;,&#25152;&#20197;&#22312; U N I X&#31995;&#32479;&#29615;&#22659;&#19979;&#25351;&#23450;&#23383;&#31526; b&#20316;&#20026;t y p e&#30340;&#19968;&#37096;&#20998;
    </p>
    <p>
      &#23454;&#38469;&#19978;&#24182;&#26080;&#20316;&#29992;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389957100956" FOLDED="true" ID="ID_172762239" MODIFIED="1392030831764" TEXT="&#x4e3a;&#x8bfb;&#x800c;&#x6253;&#x5f00; ">
<node CREATED="1389957209301" ID="ID_44336445" MODIFIED="1389957217780" TEXT="r &#x6216; rb "/>
</node>
<node CREATED="1389957110164" FOLDED="true" ID="ID_1739382575" MODIFIED="1392030831764" TEXT="&#x4f7f;&#x6587;&#x4ef6;&#x6210;&#x4e3a; 0&#x957f;,&#x6216;&#x4e3a;&#x5199;&#x800c;&#x521b;&#x5efa; ">
<node CREATED="1389957203389" ID="ID_102954255" MODIFIED="1389957205211" TEXT="w &#x6216; wb  "/>
</node>
<node CREATED="1389957122836" FOLDED="true" ID="ID_1373883079" MODIFIED="1392030831764" TEXT="&#x6dfb;&#x52a0;;&#x4e3a;&#x5728;&#x6587;&#x4ef6;&#x5c3e;&#x5199;&#x800c;&#x6253;&#x5f00;,&#x6216;&#x4e3a;&#x5199;&#x800c;&#x521b;&#x5efa; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24403;&#29992;&#28155;&#21152;&#31867;&#22411;&#25171;&#24320;&#19968;&#25991;&#20214;&#21518;,&#21017;&#27599;&#27425;&#20889;&#37117;&#23558;&#25968;&#25454;&#20889;&#21040;&#25991;&#20214;&#30340;&#24403;&#21069;&#23614;&#31471;&#22788;&#12290;&#22914;&#33509;&#26377;&#22810;&#20010;&#36827;&#31243;
    </p>
    <p>
      &#29992;&#26631;&#20934;I/O&#28155;&#21152;&#26041;&#24335;&#25171;&#24320;&#20102;&#21516;&#19968;&#25991;&#20214;,&#37027;&#20040;&#26469;&#33258;&#27599;&#20010;&#36827;&#31243;&#30340;&#25968;&#25454;&#37117;&#23558;&#27491;&#30830;&#22320;&#20889;&#21040;&#25991;&#20214;&#20013;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389957197120" ID="ID_1763064102" MODIFIED="1389957199228" TEXT="a &#x6216; ab  "/>
</node>
<node CREATED="1389957722606" FOLDED="true" ID="ID_654932593" MODIFIED="1392030831767" TEXT="+">
<node CREATED="1389957159774" FOLDED="true" ID="ID_274405817" MODIFIED="1392030831764" TEXT="&#x4e3a;&#x5728;&#x6587;&#x4ef6;&#x5c3e;&#x8bfb;&#x548c;&#x5199;&#x800c;&#x6253;&#x5f00;&#x6216;&#x521b;&#x5efa; ">
<node CREATED="1389957173731" ID="ID_257573756" MODIFIED="1389957175907" TEXT="a+ &#x6216; a+b &#x6216; a b +  "/>
</node>
<node CREATED="1389957151621" FOLDED="true" ID="ID_446593202" MODIFIED="1392030831764" TEXT="&#x4f7f;&#x6587;&#x4ef6;&#x4e3a;0&#x957f;,&#x6216;&#x4e3a;&#x8bfb;&#x548c;&#x5199;&#x800c;&#x6253;&#x5f00; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20855;&#26377;&#19979;&#21015;&#38480;&#21046;:
    </p>
    <p>
      &#8226; &#22914;&#26524;&#20013;&#38388;&#27809;&#26377;fflush&#12289;fseek&#12289;fsetpos&#25110;rewind,&#21017;&#22312;&#36755;&#20986;&#30340;&#21518;&#38754;&#19981;&#33021;&#30452;&#25509;&#36319;&#38543;&#36755;&#20837;&#12290;
    </p>
    <p>
      &#8226; &#22914;&#26524;&#20013;&#38388;&#27809;&#26377; fseek&#12289;fsetpos&#25110;rewind,&#25110;&#32773;&#19968;&#20010;&#36755;&#20986;&#25805;&#20316;&#27809;&#26377;&#21040;&#36798;&#25991;&#20214;&#23614;&#31471;,&#21017;&#22312;&#36755;&#20837;&#25805;
    </p>
    <p>
      &#20316;&#20043;&#21518;&#19981;&#33021;&#30452;&#25509;&#36319;&#38543;&#36755;&#20986;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1389957181269" ID="ID_626346664" MODIFIED="1389957183265" TEXT="w+ &#x6216; w+b &#x6216; w b +  "/>
</node>
<node CREATED="1389957144181" FOLDED="true" ID="ID_492084160" MODIFIED="1392030831765" TEXT="&#x4e3a;&#x8bfb;&#x548c;&#x5199;&#x800c;&#x6253;&#x5f00; ">
<node CREATED="1389957187885" ID="ID_118851558" MODIFIED="1389957189819" TEXT="r+ &#x6216; r+b &#x6216; r b +  "/>
</node>
</node>
<node CREATED="1389957501089" FOLDED="true" ID="ID_1093955507" MODIFIED="1392030831767" TEXT="&#x5bf9;&#x4e8e;f d o p e n,t y p e&#x53c2;&#x6570;&#x7684;&#x610f;&#x4e49;&#x5219;&#x7a0d;&#x6709;&#x533a;&#x522b; ">
<node CREATED="1389957562291" ID="ID_1435769701" MODIFIED="1389957564426" TEXT="f d o p e n&#x4e3a;&#x5199;&#x800c;&#x6253; &#x5f00;&#x5e76;&#x4e0d;&#x622a;&#x77ed;&#x8be5;&#x6587;&#x4ef6; "/>
<node CREATED="1389957592228" ID="ID_259417603" MODIFIED="1389957594522" TEXT="&#x6807;&#x51c6; I / O&#x6dfb;&#x52a0;&#x65b9;&#x5f0f;&#x4e5f;&#x4e0d;&#x80fd;&#x7528;&#x4e8e;&#x521b;&#x5efa;&#x8be5;&#x6587;&#x4ef6;(&#x56e0;&#x4e3a;&#x5982;&#x82e5;&#x4e00;&#x4e2a;&#x63cf;&#x8ff0;&#x7b26;&#x5f15;&#x7528;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;,&#x5219;&#x8be5;&#x6587;&#x4ef6; &#x4e00;&#x5b9a;&#x5df2;&#x7ecf;&#x5b58;&#x5728;) &#x3002; "/>
</node>
</node>
</node>
<node CREATED="1389956513348" FOLDED="true" ID="ID_374687144" MODIFIED="1392030831768" TEXT="&#x8bfb;&#x548c;&#x5199;&#x6d41; ">
<node CREATED="1389958263392" FOLDED="true" ID="ID_513747071" MODIFIED="1392030831767" TEXT="&#x975e;&#x683c;&#x5f0f;&#x5316; ">
<node CREATED="1389958278457" FOLDED="true" ID="ID_571811112" MODIFIED="1389959156319" TEXT="&#x6bcf;&#x6b21;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x7684;I/O ">
<node CREATED="1389959005880" FOLDED="true" ID="ID_6203197" MODIFIED="1392030831767" TEXT="&#x8f93;&#x5165;&#x51fd;&#x6570; ">
<node CREATED="1389958366330" ID="ID_1704758982" MODIFIED="1389958374059" TEXT="i n t g e t c ( F I L E fp) ; "/>
<node CREATED="1389958398531" ID="ID_738750561" MODIFIED="1389958400658" TEXT="i n t f g e t c ( F I L E fp) ; "/>
<node CREATED="1389958423171" FOLDED="true" ID="ID_1240890727" MODIFIED="1392030831767" TEXT="int getchar(void); ">
<node CREATED="1389958445684" ID="ID_1739985246" MODIFIED="1389958448147" TEXT="&#x7b49;&#x540c;&#x4e8e;getc(stdin) "/>
</node>
<node CREATED="1389958506477" FOLDED="true" ID="ID_1746526340" MODIFIED="1392030831767" TEXT="&#x524d;&#x4e24;&#x4e2a;&#x51fd;&#x6570;&#x7684;&#x533a;&#x522b;&#x662f;getc&#x53ef;&#x88ab;&#x5b9e;&#x73b0;&#x4e3a;&#x5b8f;,&#x800c;fgetc&#x5219;&#x4e0d;&#x80fd;&#x5b9e;&#x73b0;&#x4e3a;&#x5b8f; ">
<node CREATED="1389958519421" FOLDED="true" ID="ID_1232197096" MODIFIED="1392030831767" TEXT="&#x8fd9;&#x610f;&#x5473;&#x7740;: ">
<node CREATED="1389958527710" ID="ID_62785857" MODIFIED="1389958529820" TEXT="getc&#x7684;&#x53c2;&#x6570;&#x4e0d;&#x5e94;&#x5f53;&#x662f;&#x5177;&#x6709;&#x526f;&#x4f5c;&#x7528;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x3002; "/>
<node CREATED="1389958542566" ID="ID_352467255" MODIFIED="1389958545500" TEXT="&#x56e0;&#x4e3a;fgetc&#x4e00;&#x5b9a;&#x662f;&#x4e2a;&#x51fd;&#x6570;,&#x6240;&#x4ee5;&#x53ef;&#x4ee5;&#x5f97;&#x5230;&#x5176;&#x5730;&#x5740;&#x3002;&#x8fd9;&#x5c31;&#x5141;&#x8bb8;&#x5c06; fgetc&#x7684;&#x5730;&#x5740;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x53c2;&#x6570; &#x4f20;&#x9001;&#x7ed9;&#x53e6;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x3002; "/>
<node CREATED="1389958563294" ID="ID_84905479" MODIFIED="1389958565364" TEXT="&#x8c03;&#x7528;fgetc&#x6240;&#x9700;&#x65f6;&#x95f4;&#x5f88;&#x53ef;&#x80fd;&#x957f;&#x4e8e;&#x8c03;&#x7528; getc,&#x56e0;&#x4e3a;&#x8c03;&#x7528;&#x51fd;&#x6570;&#x901a;&#x5e38;&#x6240;&#x9700;&#x7684;&#x65f6;&#x95f4;&#x957f;&#x4e8e;&#x8c03;&#x7528;&#x5b8f;&#x3002; "/>
</node>
</node>
<node CREATED="1389958660936" ID="ID_661222996" MODIFIED="1389958671311" TEXT="&#x5728; &lt;stdio.h&gt;&#x4e2d;&#x7684;&#x5e38;&#x6570;EOF&#x88ab;&#x8981; &#x6c42;&#x662f;&#x4e00;&#x4e2a;&#x8d1f;&#x503c;,&#x5176;&#x503c;&#x7ecf;&#x5e38;&#x662f;- 1 "/>
<node CREATED="1389958745426" FOLDED="true" ID="ID_463337152" MODIFIED="1392030831767" TEXT="&#x4e0d;&#x7ba1;&#x662f;&#x51fa;&#x9519;&#x8fd8;&#x662f;&#x5230;&#x8fbe;&#x6587;&#x4ef6;&#x5c3e;&#x7aef;,&#x8fd9;&#x4e09;&#x4e2a;&#x51fd;&#x6570;&#x90fd;&#x8fd4;&#x56de;&#x540c;&#x6837;&#x7684;&#x503c; ">
<node CREATED="1389958762810" FOLDED="true" ID="ID_1451199902" MODIFIED="1392030831767" TEXT="&#x4e3a;&#x4e86;&#x533a;&#x5206;&#x8fd9;&#x4e24;&#x79cd;&#x4e0d;&#x540c; &#x7684;&#x60c5;&#x51b5;,&#x5fc5;&#x987b;&#x8c03;&#x7528; ferror&#x6216;feof ">
<node CREATED="1389958769249" ID="ID_377463470" MODIFIED="1389958772329" TEXT="i n t f e r r o r ( F I L E fp) ; "/>
<node CREATED="1389958777042" ID="ID_61566183" MODIFIED="1389958779233" TEXT="i n t f e o f ( F I L E fp) ; "/>
<node CREATED="1389958786419" ID="ID_1386441841" MODIFIED="1389958788545" TEXT="v o i d c l e a r e r r ( F I L Efp) ; "/>
</node>
</node>
<node CREATED="1389958944110" ID="ID_213433068" MODIFIED="1389958975336" TEXT="i n t u n g e t c ( i n t FILE *p) ; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#34429;
    </p>
    <p>
      &#28982;ANSI C&#20801;&#35768;&#25903;&#25345;&#20219;&#20309;&#25968;&#37327;&#30340;&#23383;&#31526;&#22238;&#36865;&#30340;&#23454;&#29616;,&#20294;&#26159;&#23427;&#35201;&#27714;&#20219;&#20309;&#19968;&#31181;&#23454;&#29616;&#37117;&#35201;&#25903;&#25345;&#19968;&#20010;&#23383;&#31526;
    </p>
    <p>
      &#30340;&#22238;&#36865;&#21151;&#33021;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1389958993335" FOLDED="true" ID="ID_1649020678" MODIFIED="1392030831767" TEXT="&#x8f93;&#x51fa;&#x51fd;&#x6570; ">
<node CREATED="1389959052328" ID="ID_568232899" MODIFIED="1389959054231" TEXT="int putc(int c, FILE *p) ; "/>
<node CREATED="1389959067049" ID="ID_98123371" MODIFIED="1389959090778" TEXT="int fputc(int c, F I L E * fp); "/>
<node CREATED="1389959097082" ID="ID_1416964746" MODIFIED="1389959099664" TEXT="int putchar(int ; "/>
</node>
</node>
<node CREATED="1389958289361" FOLDED="true" ID="ID_405611844" MODIFIED="1392030831767" TEXT="&#x6bcf;&#x6b21;&#x4e00;&#x884c;&#x7684;I/O ">
<node CREATED="1389959126210" ID="ID_1761395127" MODIFIED="1389959128056" TEXT="c h a r * f g e t s ( c h a r buf, i n t n,FILE * fp) ; "/>
<node CREATED="1389959132786" FOLDED="true" ID="ID_428800017" MODIFIED="1392030831767" TEXT="c h a r * g e t s ( c h a r buf) ; ">
<node CREATED="1389959460091" ID="ID_939527034" MODIFIED="1389959466977" TEXT="not approval to use"/>
<node CREATED="1389959471876" ID="ID_1442648644" MODIFIED="1389959486155" TEXT="not contraint the buffer size"/>
</node>
<node CREATED="1389959355632" FOLDED="true" ID="ID_1136925321" MODIFIED="1392030831767" TEXT="i n t f p u t s ( c o n s t c h a r tr, F I L E * ; ">
<node CREATED="1389959449491" ID="ID_88441960" MODIFIED="1389959453665" TEXT="not add newline"/>
</node>
<node CREATED="1389959365216" FOLDED="true" ID="ID_601685168" MODIFIED="1392030831767" TEXT="i n t p u t s ( c o n s t c h a r tr) ; ">
<node CREATED="1389959438419" ID="ID_727480949" MODIFIED="1389959445409" TEXT="add newline"/>
</node>
</node>
<node CREATED="1389958294921" FOLDED="true" ID="ID_831304038" MODIFIED="1392030831767" TEXT=" &#x76f4;&#x63a5;I/O ">
<node CREATED="1389958344098" ID="ID_1780601015" MODIFIED="1389958346361" TEXT="&#x4e8c;&#x8fdb;&#x5236; I / O&#x3001; &#x4e00;&#x6b21;&#x4e00;&#x4e2a;&#x5bf9;&#x8c61;I/O&#x3001;&#x9762;&#x5411;&#x8bb0;&#x5f55;&#x7684;I/O&#x6216;&#x9762;&#x5411;&#x7ed3;&#x6784;&#x7684;I/O&#x3002; "/>
</node>
</node>
</node>
<node CREATED="1389956522652" ID="ID_409067120" MODIFIED="1389956524362" TEXT="&#x6bcf;&#x6b21;&#x4e00;&#x884c; I/O "/>
<node CREATED="1389956529788" ID="ID_258424900" MODIFIED="1389956531985" TEXT="&#x6807;&#x51c6;I/O&#x7684;&#x6548;&#x7387; "/>
<node CREATED="1389956539492" ID="ID_543740978" MODIFIED="1389956541978" TEXT="&#x4e8c;&#x8fdb;&#x5236;I/O "/>
<node CREATED="1389956546620" ID="ID_848704849" MODIFIED="1389956549139" TEXT="&#x5b9a;&#x4f4d;&#x6d41; "/>
<node CREATED="1389956554852" ID="ID_1731257747" MODIFIED="1389956557338" TEXT="&#x683c;&#x5f0f;&#x5316;I/O "/>
<node CREATED="1389956563916" ID="ID_767301656" MODIFIED="1389956566002" TEXT="&#x5b9e;&#x73b0;&#x7ec6;&#x8282; "/>
<node CREATED="1389956571652" ID="ID_1026826128" MODIFIED="1389956573850" TEXT="&#x4e34;&#x65f6;&#x6587;&#x4ef6; "/>
<node CREATED="1389956580060" ID="ID_338618398" MODIFIED="1389956582523" TEXT="&#x6807;&#x51c6;I/O&#x7684;&#x66ff;&#x4ee3;&#x8f6f;&#x4ef6; "/>
<node CREATED="1389956585293" ID="ID_704904692" MODIFIED="1389956587491" TEXT="&#x5c0f;&#x7ed3; "/>
</node>
<node CREATED="1390210219660" FOLDED="true" ID="ID_500171807" MODIFIED="1390353718419" POSITION="right" TEXT="System Data Files and Information ">
<node CREATED="1390210236733" ID="ID_1352563031" MODIFIED="1390210244132" TEXT="Introduction "/>
<node CREATED="1390210249405" FOLDED="true" ID="ID_1340235074" MODIFIED="1392030831768" TEXT="Password File ">
<node CREATED="1390267890078" FOLDED="true" ID="ID_131347962" MODIFIED="1390273297557" TEXT="passwd  structure ">
<node CREATED="1390267928837" ID="ID_1551505867" MODIFIED="1390267930900" TEXT="&lt;pwd.h&gt; "/>
<node CREATED="1390267941605" ID="ID_99896505" MODIFIED="1390267945364" TEXT="pw_name  "/>
<node CREATED="1390267949957" ID="ID_1669560497" MODIFIED="1390268219014" TEXT="pw_passwd  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If the encrypted password field is empty, it
    </p>
    <p>
      usually means that the user does not have a password.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390267956469" ID="ID_912000775" MODIFIED="1390267959091" TEXT="pw_uid  "/>
<node CREATED="1390267963260" ID="ID_1449596262" MODIFIED="1390267965444" TEXT="pw_gid  "/>
<node CREATED="1390267998518" ID="ID_1469013120" MODIFIED="1390268818631" TEXT="pw_gecos  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Some systems that provide the finger(1) command support additional information in the
    </p>
    <p>
      comment field. Each of these fields is separated by a comma: the user's name, office location,
    </p>
    <p>
      office phone number, and home phone number. Additionally, an ampersand in the comment
    </p>
    <p>
      field is replaced with the login name (capitalized) by some utilities. For example, we could have
    </p>
    <p>
      
    </p>
    <p>
      sar:x:205:105:Steve Rago, SF 5-121, 555-1111, 555-2222:/home/sar:/bin/sh
    </p>
    <p>
      
    </p>
    <p>
      Then we could use finger to print information about Steve Rago.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390268005510" ID="ID_1653597000" MODIFIED="1390268007957" TEXT="pw_dir  "/>
<node CREATED="1390268011310" ID="ID_212480421" MODIFIED="1390268415386" TEXT="pw_shell  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;The default value for an empty shell field is usually /bin/sh
    </p>
    <p>
      There are several alternatives to using /dev/null to prevent a particular user from logging in to
    </p>
    <p>
      a system. It is common to see /bin/false used as the login shell. It simply exits with an
    </p>
    <p>
      unsuccessful (nonzero) status; the shell evaluates the exit status as false. It is also common to
    </p>
    <p>
      see /bin/true used to disable an account. All it does is exit with a successful (zero) status.
    </p>
    <p>
      Some systems provide the nologin command. It prints a customizable error message and exits
    </p>
    <p>
      with a nonzero exit status.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390268017846" ID="ID_355942769" MODIFIED="1390268019783" TEXT="pw_class  "/>
<node CREATED="1390268023518" ID="ID_1530486005" MODIFIED="1390268025878" TEXT="pw_change  "/>
<node CREATED="1390268030006" ID="ID_741808438" MODIFIED="1390268032496" TEXT="pw_expire  "/>
</node>
<node CREATED="1390267916908" FOLDED="true" ID="ID_752932933" MODIFIED="1390273295884" TEXT="/etc/passwd ">
<node CREATED="1390268059527" ID="ID_1424704909" MODIFIED="1390268061307" TEXT="root:x:0:0:root:/root:/bin/bash "/>
<node CREATED="1390268476598" ID="ID_952372635" MODIFIED="1390268503550" TEXT="squid:x:23:23::/var/spool/squid:/dev/null&#xa;">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Many services have separate user IDs for the daemon processes (Chapter 13) that help
    </p>
    <p>
      implement the service. The squid enTRy is for the processes implementing the squid proxy
    </p>
    <p>
      cache service.
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390268482406" ID="ID_725187019" MODIFIED="1390268509417" TEXT="nobody:x:65534:65534:Nobody:/home:/bin/sh ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The nobody user name can be used to allow people to log in to a system, but with a user ID
    </p>
    <p>
      (65534) and group ID (65534) that provide no privileges. The only files that this user ID and
    </p>
    <p>
      group ID can access are those that are readable or writable by the world. (This assumes that
    </p>
    <p>
      there are no files specifically owned by user ID 65534 or group ID 65534, which should be the
    </p>
    <p>
      case.)
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390268827986" FOLDED="true" ID="ID_706303368" MODIFIED="1392030831768" TEXT="vipw">
<node CREATED="1390268831994" ID="ID_1177813029" MODIFIED="1390268847286" TEXT="Some systems provide the vipw command to allow administrators to edit the password file&#xa;"/>
</node>
<node CREATED="1390270133125" FOLDED="true" ID="ID_1497568584" MODIFIED="1390273296749" TEXT="functions">
<node CREATED="1390270138813" ID="ID_1315811316" MODIFIED="1390270145164" TEXT="struct passwd *getpwuid(uid_t uid); "/>
<node CREATED="1390270152078" ID="ID_1210380994" MODIFIED="1390270154172" TEXT="struct passwd *getpwnam(const char *name); "/>
<node CREATED="1390270160662" FOLDED="true" ID="ID_1329588601" MODIFIED="1392030831768" TEXT="struct passwd *getpwent(void); ">
<node CREATED="1390270195366" ID="ID_1309185253" MODIFIED="1390270197734" TEXT="We call getpwent to return the next entry in the password file "/>
<node CREATED="1390270377650" ID="ID_1485071083" MODIFIED="1390270379658" TEXT="getpwent returns a pointer to a structure that it has filled in. This structure is normally overwritten each time we call this function "/>
<node CREATED="1390270387202" FOLDED="true" ID="ID_246247218" MODIFIED="1392030831768" TEXT="There is no order implied when we use this function ">
<node CREATED="1390270395644" ID="ID_434324496" MODIFIED="1390270397625" TEXT="because some systems use a hashed version of the file /etc/passwd "/>
</node>
</node>
<node CREATED="1390270170142" FOLDED="true" ID="ID_683838056" MODIFIED="1392030831768" TEXT="void setpwent(void); ">
<node CREATED="1390270465052" ID="ID_1185112934" MODIFIED="1390270467736" TEXT="The function setpwent rewinds whatever files it uses "/>
</node>
<node CREATED="1390270178126" FOLDED="true" ID="ID_1414971656" MODIFIED="1392030831768" TEXT="void endpwent(void); ">
<node CREATED="1390270488892" ID="ID_1159045992" MODIFIED="1390270492490" TEXT="endpwent closes these files "/>
<node CREATED="1390270503460" ID="ID_691339369" MODIFIED="1390270505515" TEXT="When using getpwent , we must always be sure to close these files by calling endpwent when we&apos;re through "/>
<node CREATED="1390270637087" ID="ID_1604693567" MODIFIED="1390270638968" TEXT="The call to endpwent when we&apos;re done is because neither getpwnam nor getpwuid should leave any of the files open. "/>
</node>
</node>
</node>
<node CREATED="1390210257188" FOLDED="true" ID="ID_1514174285" MODIFIED="1390296624947" TEXT="Shadow Passwords ">
<node CREATED="1390273290442" FOLDED="true" ID="ID_93681166" MODIFIED="1392030831768" TEXT="struct spwd ">
<node CREATED="1390274009394" ID="ID_766202072" MODIFIED="1390274106980" TEXT="&lt;shadow.h&gt; "/>
<node CREATED="1390273343578" ID="ID_360460403" MODIFIED="1390273346608" TEXT="sp_namp "/>
<node CREATED="1390273356834" ID="ID_430653735" MODIFIED="1390273358777" TEXT="sp_pwdp "/>
<node CREATED="1390273371194" FOLDED="true" ID="ID_1955211152" MODIFIED="1392030831768" TEXT="sp_lstchg ">
<node CREATED="1390273385178" ID="ID_536554251" MODIFIED="1390273387856" TEXT="days since Epoch of last password  change  "/>
</node>
<node CREATED="1390273408913" ID="ID_851649305" MODIFIED="1390273411113" TEXT="sp_min "/>
<node CREATED="1390273415369" ID="ID_899902976" MODIFIED="1390273417521" TEXT="sp_max "/>
<node CREATED="1390273424658" ID="ID_1719764186" MODIFIED="1390273426976" TEXT="sp_warn "/>
<node CREATED="1390273430642" ID="ID_1130116343" MODIFIED="1390273433081" TEXT="sp_inact "/>
<node CREATED="1390273462938" ID="ID_1730742495" MODIFIED="1390273465208" TEXT="sp_expire . "/>
<node CREATED="1390273470201" ID="ID_1477305241" MODIFIED="1390273472370" TEXT="sp_flag "/>
</node>
<node CREATED="1390273277010" ID="ID_1440736454" MODIFIED="1390273279600" TEXT="/etc/shadow "/>
<node CREATED="1390273975890" ID="ID_1813709262" MODIFIED="1390273980217" TEXT="vipw -s"/>
<node CREATED="1390273988890" FOLDED="true" ID="ID_1896291701" MODIFIED="1392030831768" TEXT="functions">
<node CREATED="1390274117596" ID="ID_1914340444" MODIFIED="1390274120098" TEXT="struct spwd *getspnam(const char *name); "/>
<node CREATED="1390274131987" ID="ID_244451098" MODIFIED="1390274134602" TEXT="struct spwd *getspent(void); "/>
<node CREATED="1390274139187" ID="ID_750667933" MODIFIED="1390274141226" TEXT="void setspent(void); "/>
<node CREATED="1390274145443" ID="ID_1163155860" MODIFIED="1390274147882" TEXT="void endspent(void); "/>
</node>
</node>
<node CREATED="1390210265541" FOLDED="true" ID="ID_327571367" MODIFIED="1390292958267" TEXT="Group File ">
<node CREATED="1390274257835" FOLDED="true" ID="ID_37567359" MODIFIED="1392030831768" TEXT="struct group ">
<node CREATED="1390274318644" ID="ID_220300890" MODIFIED="1390274322171" TEXT="&lt;grp.h&gt; "/>
<node CREATED="1390274342019" ID="ID_1098181074" MODIFIED="1390274343682" TEXT="gr_name "/>
<node CREATED="1390274350075" ID="ID_628379149" MODIFIED="1390274351987" TEXT="gr_passwd "/>
<node CREATED="1390274358091" ID="ID_12006367" MODIFIED="1390274360356" TEXT="gr_gid "/>
<node CREATED="1390274370323" FOLDED="true" ID="ID_1067573110" MODIFIED="1392030831768" TEXT="char **gr_mem ">
<node CREATED="1390274375747" ID="ID_1514748655" MODIFIED="1390274377322" TEXT="array of pointers to  individual user names  "/>
<node CREATED="1390274402763" ID="ID_120233961" MODIFIED="1390274404450" TEXT="This array is terminated by a null pointer "/>
</node>
</node>
<node CREATED="1390274266507" ID="ID_385805811" MODIFIED="1390274268490" TEXT="/etc/group "/>
<node CREATED="1390274416435" FOLDED="true" ID="ID_1985193041" MODIFIED="1392030831768" TEXT="functions">
<node CREATED="1390274426683" ID="ID_1512597216" MODIFIED="1390274429514" TEXT="struct group *getgrgid(gid_t gid); "/>
<node CREATED="1390274436851" ID="ID_220393594" MODIFIED="1390274439010" TEXT="struct group *getgrnam(const char *name); "/>
<node CREATED="1390275634621" ID="ID_633277231" MODIFIED="1390275636956" TEXT="struct group *getgrent(void); "/>
<node CREATED="1390275641677" ID="ID_1240314829" MODIFIED="1390275644476" TEXT="void setgrent(void); "/>
</node>
</node>
<node CREATED="1390210275077" FOLDED="true" ID="ID_68454568" MODIFIED="1390296626211" TEXT="Supplementary Group IDs ">
<node CREATED="1390276246655" ID="ID_3696694" MODIFIED="1390276248901" TEXT="Not only did we belong to the group corresponding to the group ID in our password file entry, but we also could belong to up to 16 additional groups. "/>
<node CREATED="1390276303414" ID="ID_288342247" MODIFIED="1390276305116" TEXT="The constant NGROUPS_MAX (Figure 2.10) specifies the number of supplementary group IDs. A common value is 16 "/>
<node CREATED="1390276388213" FOLDED="true" ID="ID_1238660774" MODIFIED="1392030831768" TEXT="functions">
<node CREATED="1390276398677" FOLDED="true" ID="ID_1132165748" MODIFIED="1392030831768" TEXT="int getgroups(int gidsetsize, gid_t grouplist[]); ">
<node CREATED="1390277129789" ID="ID_76521809" MODIFIED="1390277131626" TEXT="The getgroups function fills in the array grouplist with the supplementary group IDs. Up to gidsetsize elements are stored in the array. "/>
<node CREATED="1390277139461" ID="ID_748457261" MODIFIED="1390277142290" TEXT="The number of supplementary group IDs stored in the array is returned by the function "/>
<node CREATED="1390277150293" ID="ID_577872171" MODIFIED="1390277152058" TEXT="As a special case, if gidsetsize is 0, the function returns only the number of supplementary group IDs. The array grouplist is not modified.  "/>
</node>
<node CREATED="1390277095853" FOLDED="true" ID="ID_107548805" MODIFIED="1392030831768" TEXT="int setgroups(int ngroups, const gid_t grouplist[]); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The only use of setgroups is usually from the initgroups function, which reads the entire group
    </p>
    <p>
      filewith the functions getgrent , setgrent , and endgrent , which we described earlierand determines
    </p>
    <p>
      the group membership for username. It then calls setgroups to initialize the supplementary group ID
    </p>
    <p>
      list for the user. One must be superuser to call initgroups, since it calls setgroups. In addition to
    </p>
    <p>
      finding all the groups that username is a member of in the group file, initgroups also includes
    </p>
    <p>
      basegid in the supplementary group ID list; basegid is the group ID from the password file for
    </p>
    <p>
      username.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390277166292" ID="ID_1853252068" MODIFIED="1390277168338" TEXT="by the superuser "/>
</node>
<node CREATED="1390277105293" ID="ID_247241767" MODIFIED="1390277335681" TEXT="int initgroups(const char *username, gid_t basegid); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      called by only a few programs: the login(1) program
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390210285373" ID="ID_918977323" MODIFIED="1390210288438" TEXT="Implementation Differences "/>
<node CREATED="1390210294197" FOLDED="true" ID="ID_76025808" MODIFIED="1390296628147" TEXT="Other Data Files ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      this four is similar.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390285712178" FOLDED="true" ID="ID_1097064556" MODIFIED="1392030831768" TEXT="/etc/hosts  ">
<node CREATED="1390285744730" FOLDED="true" ID="ID_704590788" MODIFIED="1392030831768" TEXT="&lt;netdb.h&gt;  ">
<node CREATED="1390285786932" FOLDED="true" ID="ID_1619779029" MODIFIED="1392030831768" TEXT="hostent  ">
<node CREATED="1390285975609" ID="ID_1761264102" MODIFIED="1390285977878" TEXT="gethostbyname  "/>
<node CREATED="1390285983529" ID="ID_1179540251" MODIFIED="1390285985658" TEXT="gethostbyaddr "/>
</node>
</node>
</node>
<node CREATED="1390285162562" FOLDED="true" ID="ID_1873981150" MODIFIED="1392030831768" TEXT="/etc/networks  ">
<node CREATED="1390285759259" FOLDED="true" ID="ID_990833307" MODIFIED="1392030831768" TEXT="&lt;netdb.h&gt;  ">
<node CREATED="1390285795460" ID="ID_1077554725" MODIFIED="1390285797841" TEXT="netent  "/>
</node>
</node>
<node CREATED="1390285145434" FOLDED="true" ID="ID_1532286244" MODIFIED="1392030831768" TEXT="/etc/services ">
<node CREATED="1390285768691" FOLDED="true" ID="ID_525813547" MODIFIED="1392030831768" TEXT="&lt;netdb.h&gt;  ">
<node CREATED="1390285812580" ID="ID_1539497933" MODIFIED="1390285814814" TEXT="servent  "/>
</node>
</node>
<node CREATED="1390285154746" FOLDED="true" ID="ID_1996685170" MODIFIED="1392030831768" TEXT="/etc/protocols ">
<node CREATED="1390285776964" FOLDED="true" ID="ID_1999298496" MODIFIED="1392030831768" TEXT="&lt;netdb.h&gt;  ">
<node CREATED="1390285802284" ID="ID_601473827" MODIFIED="1390285804923" TEXT="protoent  "/>
</node>
</node>
<node CREATED="1390285178467" FOLDED="true" ID="ID_1749909846" MODIFIED="1392030831769" TEXT="general principle is that every data file has at least three functions: ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Additionally, if the data file supports some form of keyed lookup, routines are provided to search for a record with a specific key
    </p>
  </body>
</html></richcontent>
<node CREATED="1390285201732" ID="ID_155767508" MODIFIED="1390285226356" TEXT="A get function that reads the next record, opening the file if necessary. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      These functions
    </p>
    <p>
      normally return a pointer to a structure. A null pointer is returned when the end of file is
    </p>
    <p>
      reached. Most of the get functions return a pointer to a static structure, so we always have to
    </p>
    <p>
      copy it if we want to save it.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390285242412" ID="ID_1829572293" MODIFIED="1390285281463" TEXT="A set function that opens the file, if not already open, and rewinds the file.  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      This function is used
    </p>
    <p>
      when we know we want to start again at the beginning of the file.
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390285282614" ID="ID_1214086341" MODIFIED="1390285315756" TEXT="An end enTRy that closes the data file.  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      we always have to call this
    </p>
    <p>
      when we're done, to close all the files.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390210302573" FOLDED="true" ID="ID_1572639665" MODIFIED="1392030831769" TEXT="Login Accounting ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Two data files that have been provided with most UNIX systems are the utmp file, which keeps track
    </p>
    <p>
      of all the users currently logged in, and the wtmp file, which keeps track of all logins and logouts.
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      On login, one of these structures was filled in and written to the utmp file by the login program, and
    </p>
    <p>
      the same structure was appended to the wtmp file. On logout, the entry in the utmp file was
    </p>
    <p>
      erasedfilled with null bytesby the init process, and a new entry was appended to the wtmp file. This
    </p>
    <p>
      logout entry in the wtmp file had the ut_name field zeroed out. Special entries were appended to the
    </p>
    <p>
      wtmp file to indicate when the system was rebooted and right before and after the system's time and
    </p>
    <p>
      date was changed. The who (1) program read the utmp file and printed its contents in a readable form.
    </p>
    <p>
      Later versions of the UNIX System provided the last(1) command, which read through the wtmp file
    </p>
    <p>
      and printed selected entries.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390287087981" ID="ID_559157655" MODIFIED="1390287128904" TEXT="struct utmp  "/>
</node>
<node CREATED="1390210311030" FOLDED="true" ID="ID_1104710131" MODIFIED="1390353716203" TEXT="System Identification ">
<node CREATED="1390287473863" FOLDED="true" ID="ID_670363196" MODIFIED="1392030831769" TEXT="int uname(struct utsname *name); ">
<node CREATED="1390287462462" ID="ID_1797574095" MODIFIED="1390287465684" TEXT="return information on the current host and operating system. "/>
<node CREATED="1390287487767" FOLDED="true" ID="ID_1765635210" MODIFIED="1392030831769" TEXT="struct utsname ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      unix time share system?
    </p>
    <p>
      universal time share system?
    </p>
  </body>
</html></richcontent>
<node CREATED="1390287784966" ID="ID_1453049187" MODIFIED="1390287786971" TEXT="sysname "/>
<node CREATED="1390287791742" ID="ID_1037722048" MODIFIED="1390287794515" TEXT="nodename "/>
<node CREATED="1390287803982" ID="ID_1144436987" MODIFIED="1390287805564" TEXT="release "/>
<node CREATED="1390287810879" ID="ID_1730645164" MODIFIED="1390287812763" TEXT="version "/>
<node CREATED="1390287817055" ID="ID_888349448" MODIFIED="1390287819298" TEXT="machine "/>
</node>
</node>
<node CREATED="1390288030116" ID="ID_113529580" MODIFIED="1390288650697" TEXT="int gethostname(char *name, int namelen); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If the host is connected to a TCP/IP network, the host name is normally the fully qualified domain
    </p>
    <p>
      name of the host.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390210319582" FOLDED="true" ID="ID_1098275344" MODIFIED="1390296633052" TEXT="Time and Date Routines ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The basic time service provided by the UNIX kernel counts the number of seconds that have passed
    </p>
    <p>
      since the Epoch: 00:00:00 January 1, 1970, Coordinated Universal Time (UTC)
    </p>
  </body>
</html></richcontent>
<node CREATED="1390289121873" FOLDED="true" ID="ID_805128396" MODIFIED="1392030831769" TEXT="func">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The difference between localtime and gmtime is that the first converts the calendar time to the local
    </p>
    <p>
      time, taking into account the local time zone and daylight saving time flag, whereas the latter
    </p>
    <p>
      converts the calendar time into a broken-down time expressed as UTC.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390289127241" ID="ID_943142232" MODIFIED="1390289129414" TEXT="time_t time(time_t *calptr); "/>
<node CREATED="1390289138386" ID="ID_1818644108" MODIFIED="1390289140455" TEXT="int gettimeofday(struct timeval *restrict tp, void *restrict tzp); "/>
<node CREATED="1390291651664" ID="ID_1888771279" MODIFIED="1390291653957" TEXT="struct tm *gmtime(const time_t *calptr); "/>
<node CREATED="1390291662001" ID="ID_1215809710" MODIFIED="1390291664090" TEXT="struct tm *localtime(const time_t *calptr); "/>
<node CREATED="1390291805772" ID="ID_1653449035" MODIFIED="1390291807652" TEXT="time_t mktime(struct tm *tmptr); "/>
<node CREATED="1390291835588" ID="ID_1622548082" MODIFIED="1390291837823" TEXT="char *asctime(const struct tm *tmptr); "/>
<node CREATED="1390291842725" ID="ID_964027272" MODIFIED="1390291845063" TEXT="char *ctime(const time_t *calptr); "/>
<node CREATED="1390291913894" ID="ID_554022403" MODIFIED="1390291916412" TEXT="size_t strftime(char *restrict buf, size_t maxsize, const char *restrict format, const struct tm *restrict tmptr); "/>
</node>
<node CREATED="1390289550141" FOLDED="true" ID="ID_864008437" MODIFIED="1392030831769" TEXT="a broken-down time ">
<node CREATED="1390289559485" FOLDED="true" ID="ID_1157463772" MODIFIED="1392030831769" TEXT="struct  tm ">
<node CREATED="1390289620263" ID="ID_483844971" MODIFIED="1390291592779" TEXT="tm_sec; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The reason that the seconds can be greater than 59 is to allow for a leap second.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390289626951" ID="ID_1015917181" MODIFIED="1390289629148" TEXT="tm_min; "/>
<node CREATED="1390289632807" ID="ID_245240861" MODIFIED="1390289634804" TEXT="tm_hour; "/>
<node CREATED="1390289641263" ID="ID_1598064336" MODIFIED="1390291612948" TEXT="tm_mday; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Note that all the
    </p>
    <p>
      fields except the day of the month are 0-based.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390289646383" ID="ID_1772869576" MODIFIED="1390289648299" TEXT="tm_mon; "/>
<node CREATED="1390289651223" ID="ID_1663338819" MODIFIED="1390289653324" TEXT="tm_year; "/>
<node CREATED="1390289664552" ID="ID_765749162" MODIFIED="1390289666169" TEXT="tm_wday; "/>
<node CREATED="1390289670760" ID="ID_1259980565" MODIFIED="1390289672350" TEXT="tm_yday; "/>
<node CREATED="1390289680952" ID="ID_1494405162" MODIFIED="1390291616182" TEXT="tm_isdst; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The daylight saving time flag is positive if daylight
    </p>
    <p>
      saving time is in effect, 0 if it's not in effect, and negative if the information isn't available.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390289586069" ID="ID_1572446455" MODIFIED="1390289588464" TEXT="a calendar time "/>
</node>
<node CREATED="1390210328470" ID="ID_803471037" MODIFIED="1390210331518" TEXT="Summary "/>
</node>
<node CREATED="1390353726207" FOLDED="true" ID="ID_1452836328" MODIFIED="1390776660023" POSITION="right" TEXT="Process Environment ">
<node CREATED="1390353735776" FOLDED="true" ID="ID_27004962" MODIFIED="1390443420132" TEXT="Introduction ">
<node CREATED="1390442134894" ID="ID_1710580419" MODIFIED="1390442137899" TEXT="how the main function is called when the program is executed "/>
<node CREATED="1390442138726" ID="ID_460026436" MODIFIED="1390442149363" TEXT="how command-line arguments are passed to the new program "/>
<node CREATED="1390442157943" ID="ID_20198615" MODIFIED="1390442160697" TEXT="what the typical memory layout looks like "/>
<node CREATED="1390442170127" ID="ID_1206434906" MODIFIED="1390442172302" TEXT="how to allocate additional memory "/>
<node CREATED="1390442181719" ID="ID_68315364" MODIFIED="1390442184468" TEXT="how the process can use environment variables "/>
<node CREATED="1390442193503" ID="ID_1300039162" MODIFIED="1390442195734" TEXT="various ways for the process to terminate "/>
<node CREATED="1390442204600" ID="ID_1852894051" MODIFIED="1390442206889" TEXT="we&apos;ll look at the longjmp and setjmp functions and their interaction with the stack "/>
<node CREATED="1390442231912" ID="ID_650606957" MODIFIED="1390442234105" TEXT="examining the resource limits of a process "/>
</node>
<node CREATED="1390353743424" FOLDED="true" ID="ID_1306496275" MODIFIED="1390443419340" TEXT="main Function ">
<node CREATED="1390442496821" ID="ID_180501720" MODIFIED="1390442498748" TEXT="When a C program is executed by the kernelby one of the exec functions "/>
<node CREATED="1390442504757" ID="ID_1161405395" MODIFIED="1390442506971" TEXT="a special start-up routine is called before the main function is called "/>
<node CREATED="1390442532078" ID="ID_596750721" MODIFIED="1390442534251" TEXT="The executable program file specifies this routine as the starting address for the program "/>
<node CREATED="1390442543871" ID="ID_181386004" MODIFIED="1390442545635" TEXT="his is set up by the link editor when it is invoked by the C compiler "/>
<node CREATED="1390442555583" ID="ID_450327492" MODIFIED="1390442558505" TEXT="This start-up routine takes values from the kernelthe command-line arguments and the environmentand sets things up so that the main function is called as shown earlier "/>
</node>
<node CREATED="1390353751400" FOLDED="true" ID="ID_806120855" MODIFIED="1390537879624" TEXT="Process Termination ">
<node CREATED="1390442647300" FOLDED="true" ID="ID_1466352328" MODIFIED="1392030831769" TEXT="8 ways to terminate">
<node CREATED="1390442681461" FOLDED="true" ID="ID_1305754" MODIFIED="1392030831769" TEXT="Normal ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      _exit and _Exit, which return to the kernel
    </p>
    <p>
      immediately, and exit, which performs certain cleanup processing and then returns to the kernel
    </p>
    <p>
      
    </p>
    <p>
      Historically, the exit function has always performed a clean shutdown of the standard I/O library: the
    </p>
    <p>
      fclose function is called for all open streams
    </p>
  </body>
</html></richcontent>
<node CREATED="1390442695358" ID="ID_366971447" MODIFIED="1390442697321" TEXT="Return from main "/>
<node CREATED="1390443736197" FOLDED="true" ID="ID_1656742591" MODIFIED="1392030831769" TEXT="&lt;stdlib.h&gt; ">
<node CREATED="1390442700750" FOLDED="true" ID="ID_1928352853" MODIFIED="1392030831769" TEXT="Calling exit ">
<node CREATED="1390443685899" ID="ID_129659683" MODIFIED="1390443691809" TEXT="= return "/>
</node>
<node CREATED="1390443757453" ID="ID_467035057" MODIFIED="1390443762566" TEXT="Exit "/>
</node>
<node CREATED="1390443773070" FOLDED="true" ID="ID_286459315" MODIFIED="1392030831769" TEXT="&lt;unistd.h&gt; ">
<node CREATED="1390442706679" ID="ID_1863583608" MODIFIED="1390443755385" TEXT="Calling _exit "/>
</node>
<node CREATED="1390442728648" ID="ID_38221228" MODIFIED="1390442730868" TEXT="Return of the last thread from its start routine  "/>
<node CREATED="1390442737024" ID="ID_161668507" MODIFIED="1390442739396" TEXT="Calling pthread_exit (Section 11.5) from the last thread "/>
</node>
<node CREATED="1390442688294" FOLDED="true" ID="ID_989381949" MODIFIED="1392030831769" TEXT="Abnormal ">
<node CREATED="1390442746848" ID="ID_832202241" MODIFIED="1390442748708" TEXT="Calling abort "/>
<node CREATED="1390442753952" ID="ID_826881538" MODIFIED="1390442756724" TEXT="Receipt of a signal "/>
<node CREATED="1390442771522" ID="ID_347580815" MODIFIED="1390442773530" TEXT="Response of the last thread to a cancellation request "/>
</node>
</node>
<node CREATED="1390442911577" ID="ID_785222343" MODIFIED="1390442922726" TEXT="exit(main(argc, argv));">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The start-up routine that we mentioned in the previous section is also written so that if the main
    </p>
    <p>
      function returns, the exit function is called. If the start-up routine were coded in C (it is often coded
    </p>
    <p>
      in assembler) the call to main could look like
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390445746327" FOLDED="true" ID="ID_1691499209" MODIFIED="1392030831769" TEXT="int atexit(void (*func)(void)); ">
<node CREATED="1390445831576" FOLDED="true" ID="ID_1839908501" MODIFIED="1392030831769" TEXT="a process can register up to 32 functions that are automatically called by exit ">
<node CREATED="1390446005131" ID="ID_1728881162" MODIFIED="1390446007241" TEXT="The sysconf function can be used to determine the maximum number of exit handlers supported by a given platform "/>
</node>
<node CREATED="1390445924898" ID="ID_1411010113" MODIFIED="1390445927655" TEXT="he exit function calls these functions in reverse order of their registration. "/>
<node CREATED="1390445932554" ID="ID_350589346" MODIFIED="1390445964273" TEXT="Each function is called as many times as it was registered. "/>
</node>
</node>
<node CREATED="1390353759056" FOLDED="true" ID="ID_1288967303" MODIFIED="1390727349381" TEXT="Command-Line Arguments ">
<node CREATED="1390537881952" ID="ID_215564944" MODIFIED="1390537888356" TEXT="We are guaranteed by both ISO C and POSIX.1 that argv[argc] is a null pointer "/>
</node>
<node CREATED="1390353764632" FOLDED="true" ID="ID_1763371937" MODIFIED="1390763416466" TEXT="Environment List ">
<node CREATED="1390537957260" FOLDED="true" ID="ID_74120715" MODIFIED="1392030831769" TEXT="Each program is also passed an environment list ">
<node CREATED="1390538078034" ID="ID_1442305275" MODIFIED="1390538080225" TEXT="extern char **environ; "/>
</node>
</node>
<node CREATED="1390353770936" FOLDED="true" ID="ID_1115791120" MODIFIED="1392030831769" TEXT="Memory Layout of a C Program ">
<node CREATED="1390543626238" FOLDED="true" ID="ID_1388971881" MODIFIED="1392030831769" TEXT="Text segment ">
<node CREATED="1390543676646" ID="ID_768088066" MODIFIED="1390543678501" TEXT="the machine instructions that the CPU executes "/>
</node>
<node CREATED="1390543639213" FOLDED="true" ID="ID_643607725" MODIFIED="1392030831769" TEXT="Initialized data segment ">
<node CREATED="1390543718462" ID="ID_302774884" MODIFIED="1390543720487" TEXT="called simply the data segment, containing variables that are specifically initialized in the program "/>
</node>
<node CREATED="1390543647525" FOLDED="true" ID="ID_1833016102" MODIFIED="1392030831769" TEXT="Uninitialized data segment ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      called the &quot;bss&quot; segment, named after an ancient assembler
    </p>
    <p>
      operator that stood for &quot;block started by symbol.&quot; Data in this segment is initialized by the
    </p>
    <p>
      kernel to arithmetic 0 or null pointers before the program starts executing
    </p>
  </body>
</html></richcontent>
<node CREATED="1390543779255" ID="ID_1811951119" MODIFIED="1390543784436" TEXT="called the &quot;bss&quot; segment"/>
</node>
<node CREATED="1390543654989" FOLDED="true" ID="ID_1631308485" MODIFIED="1392030831769" TEXT="Stack ">
<node CREATED="1390543816983" ID="ID_706965557" MODIFIED="1390543818843" TEXT="Data in this segment is initialized by the kernel to arithmetic 0 or null pointers"/>
</node>
<node CREATED="1390543661733" FOLDED="true" ID="ID_849505494" MODIFIED="1392030831769" TEXT="Heap ">
<node CREATED="1390543866064" ID="ID_533989482" MODIFIED="1390543868689" TEXT="where dynamic memory allocation usually takes place "/>
<node CREATED="1390543905281" ID="ID_1022583141" MODIFIED="1390543936318" TEXT="Historically,   the heap has been located between the uninitialized data and the stack "/>
</node>
<node CREATED="1390763476536" FOLDED="true" ID="ID_1902362867" MODIFIED="1392030831769" TEXT="size ">
<node CREATED="1390763482450" ID="ID_984796837" MODIFIED="1390763490634" TEXT="view the size of data and text"/>
</node>
<node CREATED="1390763498634" FOLDED="true" ID="ID_1595181253" MODIFIED="1392030831769" TEXT="strip">
<node CREATED="1390763504402" ID="ID_1023053010" MODIFIED="1390763539723" TEXT="remove the symbol table of bin file"/>
</node>
</node>
<node CREATED="1390353779625" FOLDED="true" ID="ID_1469942777" MODIFIED="1392030831769" TEXT="Shared Libraries ">
<node CREATED="1390728445360" ID="ID_1151529778" MODIFIED="1390728481901" TEXT="This reduces the size of each executable file but may add some runtime overhead, either when the program is first executed or the first time each shared library function is called "/>
<node CREATED="1390728501454" ID="ID_363917448" MODIFIED="1390728503278" TEXT="Another advantage of shared libraries is that library functions can be replaced with new versions without having to relink edit every program that uses the library "/>
<node CREATED="1390728517902" FOLDED="true" ID="ID_25661934" MODIFIED="1392030831769" TEXT="cc -static hello1.c ">
<node CREATED="1390728521814" ID="ID_1080866960" MODIFIED="1390728527523" TEXT="prevent gcc from using shared libraries "/>
</node>
<node CREATED="1390728532838" ID="ID_912557651" MODIFIED="1390728534674" TEXT="gcc defaults to use shared libraries "/>
</node>
<node CREATED="1390353786513" FOLDED="true" ID="ID_745336090" MODIFIED="1392030831770" TEXT="Memory Allocation ">
<node CREATED="1390728563599" FOLDED="true" ID="ID_1752163680" MODIFIED="1392030831770" TEXT="ISO C ">
<node CREATED="1390728581999" FOLDED="true" ID="ID_1367077054" MODIFIED="1392030831770" TEXT="void *malloc(size_t size); ">
<node CREATED="1390728649313" ID="ID_1194683729" MODIFIED="1390728651192" TEXT="The initial value of the memory is indeterminate. "/>
</node>
<node CREATED="1390728597639" FOLDED="true" ID="ID_1435162909" MODIFIED="1392030831770" TEXT="void *calloc(size_t nobj, size_t size); ">
<node CREATED="1390728659833" ID="ID_1281110049" MODIFIED="1390728661778" TEXT="a specified number of objects of a specified size "/>
<node CREATED="1390728667417" ID="ID_737372659" MODIFIED="1390728669202" TEXT="The space is initialized to all 0 bits. "/>
</node>
<node CREATED="1390728603623" FOLDED="true" ID="ID_926595835" MODIFIED="1392030831770" TEXT="void *realloc(void *ptr, size_t newsize); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The allocation routines are usually implemented with the sbrk(2) system call.
    </p>
    <p>
      
    </p>
    <p>
      Although sbrk can expand or contract the memory of a process, most versions of malloc and free
    </p>
    <p>
      never decrease their memory size. The space that we free is available for a later allocation, but the
    </p>
    <p>
      freed space is not usually returned to the kernel; that space is kept in the malloc pool.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390728774835" ID="ID_222138400" MODIFIED="1390728776679" TEXT="when the size increases, the initial value of the space between the old contents and the end of the new area is indeterminate "/>
<node CREATED="1390728980079" ID="ID_1144134548" MODIFIED="1390728982402" TEXT="Because the area may move, we shouldn&apos;t have any pointers into this area. "/>
<node CREATED="1390729046561" ID="ID_1814125421" MODIFIED="1390729048659" TEXT="As a special case, if ptr is a null pointer, realloc behaves like malloc and allocates a region of the specified newsize "/>
</node>
<node CREATED="1390728616079" ID="ID_387572822" MODIFIED="1390728618424" TEXT="void free(void *ptr); "/>
</node>
<node CREATED="1390729814210" FOLDED="true" ID="ID_89961006" MODIFIED="1392030831770" TEXT="Alternate Memory Allocators ">
<node CREATED="1390729910276" FOLDED="true" ID="ID_829291206" MODIFIED="1392030831770" TEXT="libmalloc ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      SVR4-based systems, such as Solaris, include the libmalloc library, which provides a set of
    </p>
    <p>
      interfaces matching the ISO C memory allocation functions.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390729987606" FOLDED="true" ID="ID_1409073746" MODIFIED="1392030831770" TEXT="mallopt ">
<node CREATED="1390730002294" ID="ID_1973305234" MODIFIED="1390730004043" TEXT="function that allows a process to set certain variables that control the operation of the storage allocator "/>
</node>
<node CREATED="1390730009974" FOLDED="true" ID="ID_1003511315" MODIFIED="1392030831770" TEXT="mallinfo ">
<node CREATED="1390730024127" ID="ID_840988273" MODIFIED="1390730025782" TEXT="is also available to provide statistics on the memory allocator "/>
</node>
</node>
<node CREATED="1390729916444" ID="ID_37183588" MODIFIED="1390730286124" TEXT="vmalloc ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Vo [1996] describes a memory allocator that allows processes to allocate memory using different
    </p>
    <p>
      techniques for different regions of memory.
    </p>
    <p>
      
    </p>
    <p>
      In addition to the functions specific to vmalloc, the library
    </p>
    <p>
      also provides emulations of the ISO C memory allocation functions.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390729921245" ID="ID_547638369" MODIFIED="1390730328630" TEXT="quick-fit ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Historically, the standard malloc algorithm used either a best-fit or a first-fit memory allocation
    </p>
    <p>
      strategy. Quick-fit is faster than either, but tends to use more memory. Weinstock and Wulf [1988]
    </p>
    <p>
      describe the algorithm, which is based on splitting up memory into buffers of various sizes and
    </p>
    <p>
      maintaining unused buffers on different free lists, depending on the size of the buffers. Free
    </p>
    <p>
      implementations of malloc and free based on quick-fit are readily available from several FTP sites.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390729930469" ID="ID_718718192" MODIFIED="1390730498963" TEXT="alloca Function ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The function alloca has the same calling sequence
    </p>
    <p>
      as malloc; however, instead of allocating memory from the heap, the memory is allocated from the
    </p>
    <p>
      stack frame of the current function. The advantage is that we don't have to free the space; it goes
    </p>
    <p>
      away automatically when the function returns. The alloca function increases the size of the stack
    </p>
    <p>
      frame. The disadvantage is that some systems can't support alloca, if it's impossible to increase the
    </p>
    <p>
      size of the stack frame after the function has been called. Nevertheless, many software packages use
    </p>
    <p>
      it, and implementations exist for a wide variety of systems.
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="idea"/>
<icon BUILTIN="idea"/>
<icon BUILTIN="idea"/>
</node>
</node>
</node>
<node CREATED="1390353794521" FOLDED="true" ID="ID_804673125" MODIFIED="1392030831770" TEXT="Environment Variables ">
<node CREATED="1390731424624" ID="ID_1845878066" MODIFIED="1390731426391" TEXT="char *getenv(const char *name); "/>
<node CREATED="1390732463630" ID="ID_1316336208" MODIFIED="1390732625892" TEXT="int putenv(char *str); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      a string of the form name=value and places it in the environment list.
    </p>
    <p>
      If name already exists, its old definition is first removed.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390732473470" ID="ID_1425166450" MODIFIED="1390732643284" TEXT="int setenv(const char *name, const char *value, int rewrite); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If name already exists in the environment, then (a) if
    </p>
    <p>
      rewrite is nonzero, the existing definition for name is first removed; (b) if rewrite is 0, an
    </p>
    <p>
      existing definition for name is not removed, name is not set to the new value, and no error
    </p>
    <p>
      occurs.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390732482406" ID="ID_434175410" MODIFIED="1390732668731" TEXT="int unsetenv(const char *name); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      removes any definition of name. It is not an error if such a definition does
    </p>
    <p>
      not exist.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390733160477" FOLDED="true" ID="ID_1410159861" MODIFIED="1392030831770" TEXT="modify the env list">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      the environment listthe array of pointers to the actual name=value stringsand the
    </p>
    <p>
      environment strings are typically stored at the top of a process's memory space, above the stack.
    </p>
    <p>
      Deleting a string is simple; we simply find the pointer in the environment list and move all
    </p>
    <p>
      subsequent pointers down one. But adding a string or modifying an existing string is more difficult.
    </p>
    <p>
      The space at the top of the stack cannot be expanded, because it is often at the top of the address
    </p>
    <p>
      space of the process and so can't expand upward; it can't be expanded downward, because all the
    </p>
    <p>
      stack frames below it can't be moved
    </p>
  </body>
</html></richcontent>
<node CREATED="1390733174229" FOLDED="true" ID="ID_1839221093" MODIFIED="1392030831770" TEXT="If we&apos;re modifying an existing name ">
<node CREATED="1390733212349" FOLDED="true" ID="ID_1980633665" MODIFIED="1392030831770" TEXT="the new value is less than or equal to the size of the existing value">
<node CREATED="1390733246070" ID="ID_1808066783" MODIFIED="1390733250960" TEXT="we can just copy the new string over the old string. "/>
</node>
<node CREATED="1390733344585" FOLDED="true" ID="ID_1315091036" MODIFIED="1392030831770" TEXT="the new value is larger than the old one ">
<node CREATED="1390733329336" ID="ID_459868457" MODIFIED="1390733330659" TEXT="&#xa0;First, we have to call malloc to allocate room for the name=value string and copy the string to this area"/>
<node CREATED="1390733360841" ID="ID_368279706" MODIFIED="1390733362755" TEXT="replace the old pointer in the environment list for name with the pointer to this allocated area "/>
</node>
</node>
<node CREATED="1390733200901" ID="ID_125745095" MODIFIED="1390733388800" TEXT="adding a new name, it&apos;s more complicated.">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      a. Then, if it's the first time we've added a new name, we have to call malloc to obtain room
    </p>
    <p>
      for a new list of pointers. We copy the old environment list to this new area and store a
    </p>
    <p>
      pointer to the name=value string at the end of this list of pointers. We also store a null
    </p>
    <p>
      pointer at the end of this list, of course. Finally, we set environ to point to this new list of
    </p>
    <p>
      pointers. Note from Figure 7.6 that if the original environment list was contained above
    </p>
    <p>
      the top of the stack, as is common, then we have moved this list of pointers to the heap.
    </p>
    <p>
      But most of the pointers in this list still point to name=value strings above the top of the
    </p>
    <p>
      stack.
    </p>
    <p>
      b.
    </p>
    <p>
      b. If this isn't the first time we've added new strings to the environment list, then we know
    </p>
    <p>
      that we've already allocated room for the list on the heap, so we just call realloc to
    </p>
    <p>
      allocate room for one more pointer. The pointer to the new name=value string is stored at
    </p>
    <p>
      the end of the list (on top of the previous null pointer), followed by a null pointer.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390353801617" FOLDED="true" ID="ID_213315409" MODIFIED="1392030831770" TEXT="setjmp and longjmp Functions ">
<node CREATED="1390744353209" ID="ID_1444317681" MODIFIED="1390744449972" TEXT="jmp_buf ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      This data type is some form of array that is capable of
    </p>
    <p>
      holding all the information required to restore the status of the stack to the state when we call
    </p>
    <p>
      longjmp
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390744277256" FOLDED="true" ID="ID_273160673" MODIFIED="1392030831770" TEXT="int setjmp(jmp_buf env); ">
<node CREATED="1390744308216" ID="ID_60983758" MODIFIED="1390744310441" TEXT="We call setjmp from the location that we want to return to "/>
<node CREATED="1390744594622" ID="ID_507348920" MODIFIED="1390744596927" TEXT="setjmp returns 0 because we called it directly "/>
</node>
<node CREATED="1390744283024" FOLDED="true" ID="ID_1783940126" MODIFIED="1392030831770" TEXT="void longjmp(jmp_buf env, int val); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The setjmp(3) manual page on one system states
    </p>
    <p>
      that variables stored in memory will have values as of the time of the longjmp, whereas variables in
    </p>
    <p>
      the CPU and floating-point registers are restored to their values when setjmp was called.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390744451107" ID="ID_990373703" MODIFIED="1390744453716" TEXT="the second, val, is a nonzero value that becomes the return value from setjmp "/>
<node CREATED="1390744483772" ID="ID_1411314354" MODIFIED="1390744485963" TEXT="The reason for the second argument is to allow us to have more than one longjmp for each setjmp "/>
</node>
</node>
<node CREATED="1390353808881" FOLDED="true" ID="ID_394871344" MODIFIED="1392030831770" TEXT="getrlimit and setrlimit Functions ">
<node CREATED="1390759299915" ID="ID_843723685" MODIFIED="1390759302254" TEXT="int getrlimit(int resource, struct rlimit *rlptr); "/>
<node CREATED="1390759306106" ID="ID_65308177" MODIFIED="1390759308356" TEXT="int setrlimit(int resource, const struct rlimit *rlptr); "/>
<node CREATED="1390759576887" ID="ID_1392306958" MODIFIED="1390759579319" TEXT="The resource limits affect the calling process and are inherited by any of its children "/>
</node>
<node CREATED="1390353814761" ID="ID_1860352453" MODIFIED="1390353818158" TEXT="Summary "/>
</node>
<node CREATED="1390776414763" FOLDED="true" ID="ID_1468272683" MODIFIED="1391257260139" POSITION="right" TEXT="Process Control ">
<node CREATED="1390776423725" FOLDED="true" ID="ID_1102468968" MODIFIED="1390777119110" TEXT="Introduction ">
<node CREATED="1390776663386" ID="ID_1041953121" MODIFIED="1390776665650" TEXT="This includes the creation of new processes, program execution, and process termination.  "/>
<node CREATED="1390776727131" ID="ID_447702619" MODIFIED="1390776729873" TEXT="the various IDs that are the property of the processreal, effective, and saved; user and group IDsand how they&apos;re affected by the process control primitives "/>
<node CREATED="1390776739834" ID="ID_1351676046" MODIFIED="1390776741693" TEXT="Interpreter files and the system function are also covered. "/>
<node CREATED="1390776762570" ID="ID_940784788" MODIFIED="1390776765031" TEXT="process accounting "/>
</node>
<node CREATED="1390776430251" FOLDED="true" ID="ID_697392142" MODIFIED="1390976418000" TEXT=" Process Identifiers ">
<node CREATED="1390777120716" ID="ID_763959443" MODIFIED="1390777124896" TEXT="Every process has a unique process ID, a non-negative integer "/>
<node CREATED="1390777161059" ID="ID_1272031378" MODIFIED="1390777186943" TEXT="it is often used as a piece of other identifiers, to guarantee uniqueness. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      For example, applications sometimes include the process ID as part of a
    </p>
    <p>
      filename in an attempt to generate unique filenames
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390777191829" ID="ID_231312240" MODIFIED="1390777228007" TEXT="process IDs are reused ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      As processes terminate, their IDs become candidates for
    </p>
    <p>
      reuse. Most UNIX systems implement algorithms to delay reuse, however, so that newly created
    </p>
    <p>
      processes are assigned IDs different from those used by processes that terminated recently. This
    </p>
    <p>
      prevents a new process from being mistaken for the previous process to have used the same ID.
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390777230038" FOLDED="true" ID="ID_302905790" MODIFIED="1392030831770" TEXT="special process id">
<node CREATED="1390777239932" ID="ID_1780583985" MODIFIED="1390777255014" TEXT="Process ID 0 is usually the scheduler process and is often known as the swapper ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      No program on disk
    </p>
    <p>
      corresponds to this process, which is part of the kernel and is known as a system process.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390777261621" ID="ID_285104907" MODIFIED="1390777264179" TEXT="Process ID 1 is usually the init process and is invoked by the kernel at the end of the bootstrap procedure. "/>
<node CREATED="1390777301567" ID="ID_1785333921" MODIFIED="1390777865447" TEXT="process ID 2 is the pagedaemon ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      For example, on some virtual memory implementations of the UNIX System, process ID 2 is
    </p>
    <p>
      the pagedaemon. This process is responsible for supporting the paging of the virtual memory system.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390776437677" FOLDED="true" ID="ID_620916461" MODIFIED="1390976419481" TEXT="fork Function ">
<node CREATED="1390777916421" ID="ID_50929485" MODIFIED="1390777969194" TEXT="The child is a copy of the parent. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      For example, the child gets a copy of the parent's data space, heap, and
    </p>
    <p>
      stack. Note that this is a copy for the child; the parent and the child do not share these portions of
    </p>
    <p>
      memory. The parent and the child share the text segment
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390779870350" FOLDED="true" ID="ID_519882012" MODIFIED="1392030831770" TEXT="File Sharing ">
<node CREATED="1390779877742" ID="ID_747795696" MODIFIED="1390779922798" TEXT="inherited ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Besides the open files, there are numerous other properties of the parent that are inherited by the
    </p>
    <p>
      child:
    </p>
    <p>
      Real user ID, real group ID, effective user ID, effective group ID
    </p>
    <p>
      Supplementary group IDs
    </p>
    <p>
      Process group ID
    </p>
    <p>
      Session ID
    </p>
    <p>
      Controlling terminal
    </p>
    <p>
      The set-user-ID and set-group-ID flags
    </p>
    <p>
      Current working directory
    </p>
    <p>
      Root directory
    </p>
    <p>
      File mode creation mask
    </p>
    <p>
      Signal mask and dispositions
    </p>
    <p>
      The close-on-exec flag for any open file descriptors
    </p>
    <p>
      Environment
    </p>
    <p>
      Attached shared memory segments
    </p>
    <p>
      Memory mappings
    </p>
    <p>
      Resource limits
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390779924685" ID="ID_147980596" MODIFIED="1390780027156" TEXT="differences ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The differences between the parent and child are
    </p>
    <p>
      The return value from fork
    </p>
    <p>
      The process IDs are different
    </p>
    <p>
      The two processes have different parent process IDs: the parent process ID of the child is the
    </p>
    <p>
      parent; the parent process ID of the parent doesn't change
    </p>
    <p>
      The child's tms_utime, tms_stime, tms_cutime, and tms_cstime values are set to 0
    </p>
    <p>
      File locks set by the parent are not inherited by the child
    </p>
    <p>
      Pending alarms are cleared for the child
    </p>
    <p>
      The set of pending signals for the child is set to the empty set
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390780033009" FOLDED="true" ID="ID_819883764" MODIFIED="1392030831770" TEXT="reasons for fork to fail ">
<node CREATED="1390780047329" ID="ID_283970144" MODIFIED="1390780049847" TEXT="if too many processes are already in the system "/>
<node CREATED="1390780058769" ID="ID_13514500" MODIFIED="1390780061201" TEXT="if the total number of processes for this real user ID exceeds the system&apos;s limit. "/>
</node>
<node CREATED="1390780077569" FOLDED="true" ID="ID_1964858780" MODIFIED="1392030831770" TEXT="There are two uses for fork: ">
<node CREATED="1390780124619" ID="ID_785178591" MODIFIED="1390780127940" TEXT="When a process wants to duplicate itself so that the parent and child can each execute different sections of code at the same time. "/>
<node CREATED="1390780170666" ID="ID_1047983493" MODIFIED="1390780173261" TEXT="When a process wants to execute a different program. This is common for shells. In this case, the child does an exec  "/>
</node>
</node>
<node CREATED="1390776444627" FOLDED="true" ID="ID_611515763" MODIFIED="1392030831770" TEXT=" vfork Function ">
<node CREATED="1391162094139" ID="ID_992027989" MODIFIED="1391162984441" TEXT="The vfork function is intended to create a new process when the purpose of the new process is to exec a new program  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The vfork function is intended to create a new process when the purpose of the new process is to
    </p>
    <p>
      exec a new program (step 2 at the end of the previous section). The bare-bones shell in the program
    </p>
    <p>
      from Figure 1.7 is also an example of this type of program. The vfork function creates the new
    </p>
    <p>
      process, just like fork, without copying the address space of the parent into the child, as the child
    </p>
    <p>
      won't reference that address space; the child simply calls exec (or exit) right after the vfork.
    </p>
    <p>
      Instead, while the child is running and until it calls either exec or exit, the child runs in the address
    </p>
    <p>
      space of the parent. This optimization provides an efficiency gain on some paged virtual-memory
    </p>
    <p>
      implementations of the UNIX System. (As we mentioned in the previous section, implementations use
    </p>
    <p>
      copy-on-write to improve the efficiency of a fork followed by an exec, but no copying is still faster
    </p>
    <p>
      than some copying.)
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390794666840" ID="ID_439175176" MODIFIED="1390794681959" TEXT="  Instead, while the child is running and until it calls either exec or exit, the child runs in the address space of the parent "/>
<node CREATED="1390794700241" ID="ID_1392290564" MODIFIED="1391162092281" TEXT="vfork guarantees that the child runs first, until the child calls exec or exit. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      This
    </p>
    <p>
      can lead to deadlock if the child depends on further actions of the parent before calling either of these
    </p>
    <p>
      two functions.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390776450115" FOLDED="true" ID="ID_1737018772" MODIFIED="1390976415462" TEXT="exit Functions ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Regardless of how a process terminates, the same code in the kernel is eventually executed. This
    </p>
    <p>
      kernel code closes all the open descriptors for the process, releases the memory that it was using,
    </p>
    <p>
      and the like
    </p>
  </body>
</html></richcontent>
<node CREATED="1390805402266" ID="ID_1672762229" MODIFIED="1390805404677" TEXT="In UNIX System terminology, a process that has terminated, but whose parent has not yet waited for it, is called a zombie. "/>
<node CREATED="1390805460179" ID="ID_125690361" MODIFIED="1390805461423" TEXT="child processes, they become zombies unless we wait for them and fetch their termination status. "/>
</node>
<node CREATED="1390776456308" FOLDED="true" ID="ID_1887472067" MODIFIED="1390976413526" TEXT="wait and waitpid Functions ">
<node CREATED="1390806616762" ID="ID_1453828693" MODIFIED="1390806618420" TEXT="When a process terminates, either normally or abnormally, the kernel notifies the parent by sending the SIGCHLD signal to the parent "/>
<node CREATED="1390807429633" FOLDED="true" ID="ID_552503955" MODIFIED="1392030831770" TEXT="the return">
<node CREATED="1390807456666" ID="ID_399152645" MODIFIED="1390807458576" TEXT="Block, if all of its children are still running "/>
<node CREATED="1390807464323" ID="ID_559314070" MODIFIED="1390807466065" TEXT="eturn immediately with the termination status of a child, if a child has terminated and is waiting for its termination status to be fetched "/>
<node CREATED="1390807470569" ID="ID_245780916" MODIFIED="1390807473068" TEXT="Return immediately with an error, if it doesn&apos;t have any child processes "/>
</node>
<node CREATED="1390807481659" FOLDED="true" ID="ID_151142023" MODIFIED="1392030831771" TEXT="functions">
<node CREATED="1390807487787" FOLDED="true" ID="ID_115634721" MODIFIED="1392030831770" TEXT="pid_t wait(int *statloc); ">
<node CREATED="1390807606252" ID="ID_184971738" MODIFIED="1390807607976" TEXT="The wait function can block the caller until a child process terminates, whereas waitpid has an option that prevents it from blocking "/>
<node CREATED="1390810663073" ID="ID_1132118829" MODIFIED="1390810665245" TEXT="With wait, the only real error is if the calling process has no children. "/>
<node CREATED="1390810711170" ID="ID_832614865" MODIFIED="1390810712745" TEXT="Another error return is possible, in case the function call is interrupted by a signal.  "/>
</node>
<node CREATED="1390807499195" FOLDED="true" ID="ID_1670746239" MODIFIED="1392030831771" TEXT="pid_t waitpid(pid_t pid, int *statloc, int options); ">
<node CREATED="1390810769387" FOLDED="true" ID="ID_494003098" MODIFIED="1392030831771" TEXT="pid">
<node CREATED="1390810405429" FOLDED="true" ID="ID_850364510" MODIFIED="1392030831771" TEXT="pid == 1  ">
<node CREATED="1390810416454" ID="ID_581891737" MODIFIED="1390810419928" TEXT="Waits for any child process. In this respect, waitpid is equivalent to wait. "/>
</node>
<node CREATED="1390810425158" FOLDED="true" ID="ID_1302539161" MODIFIED="1392030831771" TEXT="pid &gt; 0  ">
<node CREATED="1390810436270" ID="ID_1398464989" MODIFIED="1390810438721" TEXT="Waits for the child whose process ID equals pid "/>
</node>
<node CREATED="1390810452510" FOLDED="true" ID="ID_273543141" MODIFIED="1392030831771" TEXT="pid == 0  ">
<node CREATED="1390810459130" ID="ID_383059330" MODIFIED="1390810461254" TEXT="Waits for any child whose process group ID equals that of the calling process "/>
</node>
<node CREATED="1390810466474" FOLDED="true" ID="ID_995802702" MODIFIED="1392030831771" TEXT="pid &lt; 1  ">
<node CREATED="1390810478472" ID="ID_1460604082" MODIFIED="1390810480719" TEXT="Waits for any child whose process group ID equals the absolute value of pid "/>
</node>
</node>
<node CREATED="1390810873116" FOLDED="true" ID="ID_1809376860" MODIFIED="1392030831771" TEXT="options ">
<node CREATED="1390810890886" FOLDED="true" ID="ID_160510079" MODIFIED="1392030831771" TEXT="WCONTINUED ">
<node CREATED="1390811303838" ID="ID_1674145388" MODIFIED="1390811389950" TEXT="support job control,if the pid of process stop and continue but not report">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If the implementation supports job control, the status of any child specified by
    </p>
    <p>
      pid that has been continued after being stopped, but whose status has not yet
    </p>
    <p>
      been reported, is returned
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1390810901181" ID="ID_295837216" MODIFIED="1390810903558" TEXT="WNOHANG  "/>
<node CREATED="1390810910589" FOLDED="true" ID="ID_908399129" MODIFIED="1392030831771" TEXT="WUNTRACED  ">
<node CREATED="1390811403878" ID="ID_214456929" MODIFIED="1390811429620" TEXT="support job control,return the pid of process  stop but not report">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If the implementation supports job control, the status of any child specified by
    </p>
    <p>
      pid that has stopped, and whose status has not been reported since it has
    </p>
    <p>
      stopped, is returned. The WIFSTOPPED macro determines whether the return
    </p>
    <p>
      value corresponds to a stopped child process
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1390810739480" ID="ID_720252736" MODIFIED="1390810755350" TEXT="error :the specified process or process group does not exist or is not a child of the calling process. "/>
</node>
</node>
</node>
<node CREATED="1390776462605" ID="ID_740424571" MODIFIED="1390776464485" TEXT="waitid Function "/>
<node CREATED="1390776468277" ID="ID_1275590068" MODIFIED="1390776470200" TEXT="wait3 and wait4 Functions "/>
<node CREATED="1390776474260" ID="ID_1190049058" MODIFIED="1390776479298" TEXT="Race Conditions "/>
<node CREATED="1390776484494" ID="ID_868421201" MODIFIED="1390776486811" TEXT="exec Functions "/>
<node CREATED="1390776492662" FOLDED="true" ID="ID_835439584" MODIFIED="1391170017499" TEXT="Changing User IDs and Group IDs ">
<node CREATED="1390984132518" FOLDED="true" ID="ID_1640020570" MODIFIED="1390984691894" TEXT="functions">
<node CREATED="1390984146555" FOLDED="true" ID="ID_506459136" MODIFIED="1392030831771" TEXT="int setuid(uid_t uid); ">
<node CREATED="1390984169836" ID="ID_771626857" MODIFIED="1390984171655" TEXT="superuser privileges, the setuid function sets the real user ID, effective user ID, and saved set-user-ID to uid. "/>
<node CREATED="1390984186036" ID="ID_88191826" MODIFIED="1390984188383" TEXT="not have superuser privileges, but uid equals either the real user ID or the saved set-user-ID, setuid sets only the effective user ID to uid. The real user ID and the saved set-user-ID are not changed. "/>
<node CREATED="1390984197661" ID="ID_26238785" MODIFIED="1390984199615" TEXT="If neither of these two conditions is true, errno is set to EPERM, and 1 is returned. "/>
</node>
<node CREATED="1390984151139" ID="ID_316110069" MODIFIED="1390984153403" TEXT="int setgid(gid_t gid); "/>
<node CREATED="1390984445156" FOLDED="true" ID="ID_1047486964" MODIFIED="1392030831771" TEXT="int setreuid(uid_t ruid, uid_t euid); ">
<node CREATED="1390984468637" ID="ID_1244806510" MODIFIED="1390984470432" TEXT="We can supply a value of 1 for any of the arguments to indicate that the corresponding ID should remain unchanged. "/>
<node CREATED="1390984481877" FOLDED="true" ID="ID_16970035" MODIFIED="1392030831771" TEXT="an unprivileged user can always swap between the real user ID and the effective user ID.  ">
<node CREATED="1390984507806" ID="ID_1349234090" MODIFIED="1390984510270" TEXT="This allows a set-user-ID program to swap to the user&apos;s normal permissions and swap back again later for set-user-ID operations. "/>
<node CREATED="1390984516174" ID="ID_1889631073" MODIFIED="1390984518065" TEXT="When the saved set-user-ID feature was introduced with POSIX.1, the rule was enhanced to also allow an unprivileged user to set its effective user ID to its saved set-user-ID. "/>
</node>
</node>
<node CREATED="1390984452036" ID="ID_1738159610" MODIFIED="1390984453799" TEXT="int setregid(gid_t rgid, gid_t egid); "/>
<node CREATED="1390984540591" FOLDED="true" ID="ID_1307297882" MODIFIED="1392030831771" TEXT="int seteuid(uid_t uid); ">
<node CREATED="1390984601049" ID="ID_751366934" MODIFIED="1390984603080" TEXT="An unprivileged user can set its effective user ID to either its real user ID or its saved set-user-ID. "/>
</node>
<node CREATED="1390984545447" ID="ID_51094900" MODIFIED="1390984547450" TEXT="int setegid(gid_t gid); "/>
</node>
<node CREATED="1390984277391" FOLDED="true" ID="ID_1175684570" MODIFIED="1392030831771" TEXT="three user IDs ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      To see the utility of the saved set-user-ID feature, let's examine the operation of a program that
    </p>
    <p>
      uses it. We'll look at the man (1) program, which is used to display online manual pages. The man
    </p>
    <p>
      program can be installed either set-user-ID or set-group-ID to a specific user or group, usually one
    </p>
    <p>
      reserved for man itself. The man program can be made to read and possibly overwrite files in locations
    </p>
    <p>
      that are chosen either through a configuration file (usually /etc/man.config or /etc/manpath.config)
    </p>
    <p>
      or using a command-line option.
    </p>
    <p>
      The man program might have to execute several other commands to process the files containing the
    </p>
    <p>
      manual page to be displayed. To prevent being tricked into running the wrong commands or
    </p>
    <p>
      overwriting the wrong files, the man command has to switch between two sets of privileges: those of
    </p>
    <p>
      the user running the man command and those of the user that owns the man executable file. The
    </p>
    <p>
      following steps take place.
    </p>
    <p>
      1. Assuming that the man program file is owned by the user name man and has its set-user-ID bit
    </p>
    <p>
      set, when we exec it, we have
    </p>
    <p>
      real user ID = our user ID
    </p>
    <p>
      effective user ID = man
    </p>
    <p>
      saved set-user-ID = man
    </p>
    <p>
      2. The man program accesses the required configuration files and manual pages. These files are
    </p>
    <p>
      owned by the user name man , but because the effective user ID is man , file access is allowed.
    </p>
    <p>
      3. Before man runs any command on our behalf, it calls setuid(getuid()). Because we are not a
    </p>
    <p>
      superuser process, this changes only the effective user ID. We have
    </p>
    <p>
      real user ID = our user ID (unchanged)
    </p>
    <p>
      effective user ID = our user ID
    </p>
    <p>
      saved set-user-ID = man (unchanged)
    </p>
    <p>
      Now the man process is running with our user ID as its effective user ID. This means that we can
    </p>
    <p>
      access only the files to which we have normal access. We have no additional permissions. It can
    </p>
    <p>
      safely execute any filter on our behalf.
    </p>
    <p>
      4. When the filter is done, man calls setuid(euid), where euid is the numerical user ID for the user
    </p>
    <p>
      name man . (This was saved by man by calling geteuid.) This call is allowed because the argument
    </p>
    <p>
      to setuid equals the saved set-user-ID. (This is why we need the saved set-user-ID.) Now we
    </p>
    <p>
      have
    </p>
    <p>
      real user ID = our user ID (unchanged)
    </p>
    <p>
      effective user ID = man
    </p>
    <p>
      saved set-user-ID = man (unchanged)
    </p>
    <p>
      5. The man program can now operate on its files, as its effective user ID is man .
    </p>
    <p>
      By using the saved set-user-ID in this fashion, we can use the extra privileges granted to us by the
    </p>
    <p>
      set-user-ID of the program file at the beginning of the process and at the end of the process. In
    </p>
    <p>
      between, however, the process runs with our normal permissions. If we weren't able to switch back
    </p>
    <p>
      to the saved set-user-ID at the end, we might be tempted to retain the extra permissions the whole
    </p>
    <p>
      time we were running (which is asking for trouble).
    </p>
    <p>
      Let's look at what happens if man spawns a shell for us while it is running. (The shell is spawned using
    </p>
    <p>
      fork and exec.) Because the real user ID and the effective user ID are both our normal user ID (step
    </p>
    <p>
      3), the shell has no extra permissions. The shell can't access the saved set-user-ID that is set to man
    </p>
    <p>
      while man is running, because the saved set-user-ID for the shell is copied from the effective user ID
    </p>
    <p>
      by exec. So in the child process that does the exec, all three user IDs are our normal user ID.
    </p>
    <p>
      Our description of how man uses the setuid function is not correct if the program is set-user-ID to
    </p>
    <p>
      root, because a call to setuid with superuser privileges sets all three user IDs. For the example to
    </p>
    <p>
      work as described, we need setuid to set only the effective user ID.
    </p>
  </body>
</html></richcontent>
<node CREATED="1390984286960" ID="ID_891400556" MODIFIED="1390984327557" TEXT="Only a superuser process can change the real user ID.  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Normally, the real user ID is set by the
    </p>
    <p>
      login(1) program when we log in and never changes. Because login is a superuser process, it
    </p>
    <p>
      sets all three user IDs when it calls setuid.
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1390984328953" ID="ID_618842460" MODIFIED="1390984331195" TEXT="The effective user ID is set by the exec functions only if the set-user-ID bit is set for the program file.  "/>
<node CREATED="1390984350337" FOLDED="true" ID="ID_207256446" MODIFIED="1392030831771" TEXT="The saved set-user-ID is copied from the effective user ID by exec.  ">
<node CREATED="1390984378626" ID="ID_1674576477" MODIFIED="1390984380948" TEXT="If the file&apos;s set-user-ID bit is set, this copy is saved after exec stores the effective user ID from the file&apos;s user ID. "/>
</node>
</node>
</node>
<node CREATED="1390776503582" FOLDED="true" ID="ID_781614473" MODIFIED="1392030831772" TEXT="Interpreter Files ">
<node CREATED="1390984695483" FOLDED="true" ID="ID_1692280117" MODIFIED="1392030831772" TEXT="begin with">
<node CREATED="1390984700403" FOLDED="true" ID="ID_1008942116" MODIFIED="1392030831772" TEXT="#! pathname [ optional-argument ] ">
<node CREATED="1390984712547" ID="ID_1779844015" MODIFIED="1390984714331" TEXT="The space between the exclamation point and the pathname is optional. "/>
<node CREATED="1390984812366" ID="ID_1322769832" MODIFIED="1390984814199" TEXT="The pathname is normally an absolute pathname, since no special operations are performed on it (i.e., PATH is not used). The recognition of these files is done within the kernel as part of processing the exec system call. The actual file that gets executed by the kernel is not the interpreter file, but the file specified by the pathname on the first line of the interpreter file "/>
<node CREATED="1390984844647" ID="ID_1457938528" MODIFIED="1390984847090" TEXT="Be aware that systems place a size limit on the first line of an interpreter file. This limit includes the #!, the pathname, the optional argument, the terminating newline, and any spaces. "/>
</node>
</node>
</node>
<node CREATED="1390776508965" ID="ID_1639689186" MODIFIED="1390776510944" TEXT="system Function "/>
<node CREATED="1390776515061" ID="ID_81666112" MODIFIED="1390776517019" TEXT="Process Accounting "/>
<node CREATED="1390776526759" ID="ID_699953011" MODIFIED="1390776529223" TEXT="User Identification "/>
<node CREATED="1390776533095" FOLDED="true" ID="ID_1045368204" MODIFIED="1392030831772" TEXT="Process Times ">
<node CREATED="1391172511687" FOLDED="true" ID="ID_1932450785" MODIFIED="1392030831772" TEXT="struct tms ">
<node CREATED="1391172533354" ID="ID_427793910" MODIFIED="1391172535528" TEXT="tms_utime "/>
<node CREATED="1391172538855" FOLDED="true" ID="ID_894465824" MODIFIED="1392030831772" TEXT="tms_stime">
<node CREATED="1391172593787" ID="ID_1148746465" MODIFIED="1391172597434" TEXT="system cpu time "/>
</node>
<node CREATED="1391172551146" FOLDED="true" ID="ID_502752429" MODIFIED="1392030831772" TEXT="tms_cutime">
<node CREATED="1391172582365" ID="ID_500823320" MODIFIED="1391172602730" TEXT="child user cpu time"/>
</node>
<node CREATED="1391172560714" ID="ID_1087039421" MODIFIED="1391172562463" TEXT="tms_cstime "/>
</node>
<node CREATED="1391172622595" FOLDED="true" ID="ID_958821861" MODIFIED="1392030831772" TEXT="clock_t times(struct tms *buf); ">
<node CREATED="1391172635231" ID="ID_658032214" MODIFIED="1391172826439" TEXT="Returns: elapsed wall clock time in clock ticks if OK, 1 on error ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;This value is
    </p>
    <p>
      measured from some arbitrary point in the past, so we can't use its absolute value; instead, we use
    </p>
    <p>
      its relative value.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1391172830008" ID="ID_1294336342" MODIFIED="1391172831058" TEXT="The two structure fields for child processes contain values only for children that we have waited for with wait, waitid, or waitpid. "/>
<node CREATED="1391172880049" ID="ID_399524187" MODIFIED="1391172881178" TEXT="All the clock_t values returned by this function are converted to seconds using the number of clock ticks per secondthe _SC_CLK_TCK value returned by sysconf  "/>
</node>
</node>
<node CREATED="1390776538286" FOLDED="true" ID="ID_1453101151" MODIFIED="1392030831772" TEXT="Summary ">
<node CREATED="1391172362579" ID="ID_447466265" MODIFIED="1391172367691" TEXT="8.7  ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
</node>
<node CREATED="1391257267268" FOLDED="true" ID="ID_909475423" MODIFIED="1391528612006" POSITION="right" TEXT="Process Relationships ">
<node CREATED="1391257275905" FOLDED="true" ID="ID_535475009" MODIFIED="1392030831772" TEXT="Introduction ">
<node CREATED="1391257438078" ID="ID_614168070" MODIFIED="1391257439916" TEXT="process groups "/>
<node CREATED="1391257448290" ID="ID_171094518" MODIFIED="1391257450035" TEXT="the concept of sessions "/>
<node CREATED="1391257554859" ID="ID_556843212" MODIFIED="1391257572672" TEXT="the relationship between the login shell and all the processes "/>
</node>
<node CREATED="1391257282284" FOLDED="true" ID="ID_1870216832" MODIFIED="1392030831773" TEXT="Terminal Logins ">
<node CREATED="1391257782583" FOLDED="true" ID="ID_1719990624" MODIFIED="1392030831772" TEXT="type of terminal">
<node CREATED="1391257855383" ID="ID_1773039889" MODIFIED="1391257857308" TEXT="a character-based terminal "/>
<node CREATED="1391257873101" ID="ID_1803005579" MODIFIED="1391257874682" TEXT="a graphical terminal emulating a simple character-based terminal "/>
<node CREATED="1391257885881" ID="ID_772944684" MODIFIED="1391257887106" TEXT="a graphical terminal running a windowing system "/>
</node>
<node CREATED="1391263434497" FOLDED="true" ID="ID_1245954268" MODIFIED="1392030831772" TEXT="getty">
<node CREATED="1391263471808" FOLDED="true" ID="ID_356408759" MODIFIED="1392030831772" TEXT="open the terminal device ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The terminal is opened for reading and writing
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
<node CREATED="1391263559762" ID="ID_1870929613" MODIFIED="1391263562064" TEXT="Once the device is open, file descriptors 0, 1, and 2 are set to the device "/>
<node CREATED="1391263610287" ID="ID_734292963" MODIFIED="1391263611640" TEXT="getty outputs something like login: and waits for us to enter our user name. "/>
<node CREATED="1391263637206" ID="ID_691273470" MODIFIED="1391263638200" TEXT="change the terminal&apos;s speed "/>
<node CREATED="1391263663286" ID="ID_45519980" MODIFIED="1391263664444" TEXT="When we enter our user name, getty&apos;s job is complete, and it then invokes the login program "/>
</node>
<node CREATED="1391264057364" ID="ID_1056659759" MODIFIED="1391264059100" TEXT="agetty opens a tty port, prompts for  a  login  name  and  invokes  the        /bin/login command. It is normally invoked by init(8)."/>
</node>
<node CREATED="1391264066536" FOLDED="true" ID="ID_1001525266" MODIFIED="1391267656704" TEXT="login">
<node CREATED="1391265405334" ID="ID_635197707" MODIFIED="1391265407624" TEXT="getpwnam "/>
<node CREATED="1391265415330" ID="ID_917822902" MODIFIED="1391265417289" TEXT="getpass "/>
<node CREATED="1391265447295" ID="ID_1767473490" MODIFIED="1391265448697" TEXT="crypt "/>
<node CREATED="1391265463752" ID="ID_92426830" MODIFIED="1391265465354" TEXT="compares the encrypted result to the pw_passwd field from our shadow password file entry "/>
<node CREATED="1391265492240" FOLDED="true" ID="ID_745505653" MODIFIED="1392030831772" TEXT="login attempt fails  because of an invalid password ">
<node CREATED="1391265502872" FOLDED="true" ID="ID_1413451772" MODIFIED="1392030831772" TEXT="login calls exit with an argument of 1 ">
<node CREATED="1391265573757" ID="ID_90236532" MODIFIED="1391265594376" TEXT="the parent (init) will do another fork followed by an exec of getty"/>
</node>
</node>
<node CREATED="1391265903787" FOLDED="true" ID="ID_1964515165" MODIFIED="1392030831772" TEXT="If we log in correctly, login will ">
<node CREATED="1391265914508" ID="ID_948336759" MODIFIED="1391265916058" TEXT="chdir "/>
<node CREATED="1391265919458" FOLDED="true" ID="ID_1855889013" MODIFIED="1392030831772" TEXT="chown ">
<node CREATED="1391265936688" ID="ID_371026296" MODIFIED="1391265947841" TEXT="Change the ownership of our terminal device so we own it "/>
</node>
<node CREATED="1391265974350" ID="ID_422229416" MODIFIED="1391265975718" TEXT="Change the access permissions for our terminal device so we have permission to read from and write to it "/>
<node CREATED="1391266028821" ID="ID_1891377477" MODIFIED="1391266030593" TEXT="Set our group IDs by calling setgid and initgroups "/>
<node CREATED="1391266060686" ID="ID_1551468423" MODIFIED="1391266062186" TEXT="Initialize the environment with all the information that login has: our home directory (HOME), shell (SHELL), user name (USER and LOGNAME), and a default path (PATH) "/>
<node CREATED="1391266073133" ID="ID_1176373692" MODIFIED="1391266074680" TEXT="Change to our user ID (setuid) and invoke our login shell "/>
</node>
</node>
<node CREATED="1391267199523" FOLDED="true" ID="ID_1268782409" MODIFIED="1392030831772" TEXT="login shell">
<node CREATED="1391267211527" ID="ID_1957928408" MODIFIED="1391267214146" TEXT=".profile "/>
</node>
<node CREATED="1391265746496" ID="ID_1043685829" MODIFIED="1391265902405" TEXT="PAM (Pluggable Authentication Modules) ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      PAM
    </p>
    <p>
      allows an administrator to configure the authentication methods to be used to access services that
    </p>
    <p>
      are written to use the PAM library.
    </p>
    <p>
      If our application needs to verify that a user has the appropriate permission to perform a task, we
    </p>
    <p>
      can either hard code the authentication mechanism in the application, or we can use the PAM library
    </p>
    <p>
      to give us the equivalent functionality. The advantage to using PAM is that administrators can
    </p>
    <p>
      configure different ways to authenticate users for different tasks, based on the local site policies.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391257288622" FOLDED="true" ID="ID_1117442566" MODIFIED="1392030831773" TEXT="Network Logins ">
<node CREATED="1391268002420" FOLDED="true" ID="ID_1200385307" MODIFIED="1392030831773" TEXT="difference with terminal login(a serial terminal )">
<node CREATED="1391268189093" ID="ID_429332354" MODIFIED="1391268190975" TEXT="the connection between the terminal and the computer isn&apos;t point-to-point "/>
<node CREATED="1391268196128" ID="ID_826139406" MODIFIED="1391268197334" TEXT="In this case, login is simply a service available, just like any other network service, such as FTP or SMTP. "/>
</node>
<node CREATED="1391268278675" FOLDED="true" ID="ID_1980902204" MODIFIED="1392030831773" TEXT="a pseudo terminal  ">
<node CREATED="1391268296751" ID="ID_857290766" MODIFIED="1391268298833" TEXT="To allow the same software to process logins over both terminal logins and network logins "/>
</node>
<node CREATED="1391269211464" FOLDED="true" ID="ID_1614258134" MODIFIED="1392030831773" TEXT="telnet">
<node CREATED="1391269221503" ID="ID_1380303000" MODIFIED="1391269231317" TEXT="The client opens a TCP connection to hostname "/>
<node CREATED="1391269239870" ID="ID_97402731" MODIFIED="1391269241143" TEXT="the program that&apos;s started on hostname is called the TELNET server "/>
<node CREATED="1391269248575" ID="ID_275228127" MODIFIED="1391269261655" TEXT="using the TELNET application protocol "/>
<node CREATED="1391269308712" FOLDED="true" ID="ID_1240489372" MODIFIED="1392030831773" TEXT="The telnetd process then opens a pseudo-terminal device ">
<node CREATED="1391269318807" FOLDED="true" ID="ID_1387405103" MODIFIED="1392030831773" TEXT="splits into two processes using fork ">
<node CREATED="1391269334842" ID="ID_1797302784" MODIFIED="1391269336230" TEXT="The parent handles the communication across the network connection "/>
<node CREATED="1391269343101" FOLDED="true" ID="ID_1638158180" MODIFIED="1392030831773" TEXT="the child does an exec of the login program ">
<node CREATED="1391269375530" FOLDED="true" ID="ID_680553296" MODIFIED="1392030831773" TEXT="Before doing the exec, the child sets up file descriptors 0, 1, and 2 to the pseudo terminal.  ">
<node CREATED="1391269406461" ID="ID_1078354769" MODIFIED="1391269408580" TEXT="Then login replaces itself with our login shell by calling exec "/>
</node>
</node>
<node CREATED="1391269355764" ID="ID_1424251062" MODIFIED="1391269356921" TEXT="The parent and the child are connected through the pseudo terminal "/>
</node>
</node>
<node CREATED="1391269331087" ID="ID_1158512248" MODIFIED="1391269634565" TEXT="">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The important thing to understand is that whether we log in through a terminal (Figure 9.3) or a
    </p>
    <p>
      network (Figure 9.5), we have a login shell with its standard input, standard output, and standard
    </p>
    <p>
      error connected to either a terminal device or a pseudo-terminal device. We'll see in the coming
    </p>
    <p>
      sections that this login shell is the start of a POSIX.1 session, and that the terminal or pseudo
    </p>
    <p>
      terminal is the controlling terminal for the session.
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
</node>
<node CREATED="1391257294378" FOLDED="true" ID="ID_48488021" MODIFIED="1392030831773" TEXT="Process Groups ">
<node CREATED="1391269770646" ID="ID_1262489789" MODIFIED="1391269772440" TEXT="A process group is a collection of one or more processes, usually associated with the same job (job control is discussed in Section 9.8), that can receive signals from the same terminal "/>
<node CREATED="1391269965744" FOLDED="true" ID="ID_235527346" MODIFIED="1392030831773" TEXT="process group leader">
<node CREATED="1391269906735" ID="ID_536645787" MODIFIED="1391269985689" TEXT="The leader is identified by its process group ID being equal to its process ID. "/>
<node CREATED="1391269935095" ID="ID_712276793" MODIFIED="1391270032895" TEXT="create a process group, create processes in the group, and then terminate. "/>
<node CREATED="1391270098407" ID="ID_1551897816" MODIFIED="1391270099761" TEXT="The process group still exists, as long as at least one process is in the group, regardless of whether the group leader terminates. "/>
</node>
<node CREATED="1391269793623" ID="ID_1525298179" MODIFIED="1391269795174" TEXT="pid_t getpgrp(void); "/>
<node CREATED="1391269817322" FOLDED="true" ID="ID_15603324" MODIFIED="1392030831773" TEXT="pid_t getpgid(pid_t pid); ">
<node CREATED="1391269839093" ID="ID_1489011913" MODIFIED="1391269857313" TEXT="getpgid(0)===getpgrp()"/>
</node>
<node CREATED="1391270139409" FOLDED="true" ID="ID_1853070152" MODIFIED="1392030831773" TEXT="int setpgid(pid_t pid, pid_t pgid); ">
<node CREATED="1391270159532" ID="ID_1496707179" MODIFIED="1391270161281" TEXT="joins an existing process group or creates a new process group by calling setpgid. "/>
<node CREATED="1391316211463" ID="ID_346233799" MODIFIED="1391316213945" TEXT="sets the process group ID to pgid in the process whose process ID equals pid "/>
<node CREATED="1391316414205" ID="ID_1069553625" MODIFIED="1391316416168" TEXT="If the two arguments are equal, the process specified by pid becomes a process group leader "/>
<node CREATED="1391316434900" ID="ID_1432541416" MODIFIED="1391316436071" TEXT="If pid is 0, the process ID of the caller is used "/>
<node CREATED="1391316450972" ID="ID_902933080" MODIFIED="1391316452401" TEXT="f pgid is 0, the process ID specified by pid is used as the process group ID "/>
<node CREATED="1391429742916" ID="ID_1912667474" MODIFIED="1391429790868" TEXT="how to use ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      In most job-control shells, this function is called after a fork to have the parent set the process group
    </p>
    <p>
      ID of the child, and to have the child set its own process group ID. One of these calls is redundant,
    </p>
    <p>
      but by doing both, we are guaranteed that the child is placed into its own process group before either
    </p>
    <p>
      process assumes that this has happened. If we didn't do this, we would have a race condition, since
    </p>
    <p>
      the child's process group membership would depend on which process executes first.
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="idea"/>
<icon BUILTIN="idea"/>
</node>
</node>
</node>
<node CREATED="1391257302570" FOLDED="true" ID="ID_248195082" MODIFIED="1391528608673" TEXT="Sessions ">
<node CREATED="1391429791742" ID="ID_1294544804" MODIFIED="1391429799395" TEXT="A session is a collection of one or more process groups.  "/>
<node CREATED="1391432960124" ID="ID_1550473655" MODIFIED="1391432961196" TEXT="There is no &quot;session ID&quot; similar to a process ID or a process group ID. "/>
<node CREATED="1391433060032" ID="ID_60252589" MODIFIED="1391433061774" TEXT="the session leader is always the leader of a process group. "/>
<node CREATED="1391431644914" FOLDED="true" ID="ID_214690471" MODIFIED="1392030831773" TEXT="pid_t setsid(void); ">
<node CREATED="1391431657181" FOLDED="true" ID="ID_1400060756" MODIFIED="1392030831773" TEXT="If the calling process is not a process group leader, this function creates a new session.  ">
<node CREATED="1391431689906" ID="ID_318902495" MODIFIED="1391431695014" TEXT="The process becomes the session leader of this new session. "/>
<node CREATED="1391431915554" ID="ID_1434346049" MODIFIED="1391431917249" TEXT="The process becomes the process group leader of a new process group "/>
<node CREATED="1391431920945" ID="ID_1965092993" MODIFIED="1391431922868" TEXT="The process has no controlling terminal. "/>
</node>
<node CREATED="1391431944276" FOLDED="true" ID="ID_36643912" MODIFIED="1392030831773" TEXT="This function returns an error if the caller is already a process group leader.  ">
<node CREATED="1391431989544" ID="ID_509153229" MODIFIED="1391431991101" TEXT="To ensure this is not the case, the usual practice is to call fork and have the parent terminate and the child continue. "/>
</node>
</node>
<node CREATED="1391433487931" FOLDED="true" ID="ID_1248867792" MODIFIED="1392030831773" TEXT="pid_t getsid(pid_t pid); ">
<node CREATED="1391433510529" ID="ID_1320928453" MODIFIED="1391433511508" TEXT="some implementations may restrict the calling process from obtaining the process group ID of the session leader if pid doesn&apos;t belong to the same session as the caller "/>
</node>
</node>
<node CREATED="1391257311024" FOLDED="true" ID="ID_1224815233" MODIFIED="1391435071926" TEXT="Controlling Terminal ">
<node CREATED="1391433530398" FOLDED="true" ID="ID_1390907138" MODIFIED="1392030831773" TEXT="Sessions and process groups some characteristic">
<node CREATED="1391433611661" ID="ID_707772839" MODIFIED="1391433613526" TEXT="A session can have a single controlling terminal. "/>
<node CREATED="1391433640800" ID="ID_907977090" MODIFIED="1391433641984" TEXT="The session leader that establishes the connection to the controlling terminal is called the controlling process. "/>
<node CREATED="1391433669975" ID="ID_1457434839" MODIFIED="1391433671426" TEXT="a single foreground process group and one or more background process groups. "/>
<node CREATED="1391433837689" ID="ID_1612667865" MODIFIED="1391433838943" TEXT="Whenever we type the terminal&apos;s interrupt key (often DELETE or Control-C), this causes the interrupt signal be sent to all processes in the foreground process group. "/>
<node CREATED="1391433854408" ID="ID_1358404942" MODIFIED="1391433855822" TEXT="Whenever we type the terminal&apos;s quit key (often Control-backslash), this causes the quit signal to be sent to all processes in the foreground process group. "/>
<node CREATED="1391433867548" ID="ID_1575462962" MODIFIED="1391433869138" TEXT="If a modem (or network) disconnect is detected by the terminal interface, the hang-up signal is sent to the controlling process (the session leader). "/>
</node>
<node CREATED="1391434161226" FOLDED="true" ID="ID_1012908368" MODIFIED="1392030831774" TEXT="Systems derived from UNIX System V allocate the controlling terminal for a session when the session leader opens the first terminal device that is not already associated with a session. ">
<node CREATED="1391434177962" ID="ID_884068325" MODIFIED="1391434189112" TEXT="open does not specify the O_NOCTTY flag "/>
</node>
<node CREATED="1391434275250" ID="ID_1457036033" MODIFIED="1391434277206" TEXT="BSD-based systems allocate the controlling terminal for a session when the session leader calls ioctl with a request argument of TIOCSCTTY (the third argument is a null pointer). The session cannot already have a controlling terminal for this call to succeed. (Normally, this call to ioctl follows a call to setsid, which guarantees that the process is a session leader without a controlling terminal.) The POSIX.1 O_NOCTTY flag to open is not used by BSD-based systems, except in compatibility-mode support for other systems. "/>
<node CREATED="1391434353582" FOLDED="true" ID="ID_824918144" MODIFIED="1392030831774" TEXT="/dev/tty ">
<node CREATED="1391434377621" ID="ID_454844748" MODIFIED="1391434379173" TEXT="This special file is a synonym within the kernel for the controlling terminal. "/>
<node CREATED="1391434394111" ID="ID_1175115921" MODIFIED="1391434395317" TEXT="There are times when a program wants to talk to the controlling terminal, regardless of whether the standard input or standard output is redirected. "/>
<node CREATED="1391434402341" ID="ID_682571236" MODIFIED="1391434405132" TEXT="if the program doesn&apos;t have a controlling terminal, the open of this device will fail. "/>
</node>
</node>
<node CREATED="1391257325266" FOLDED="true" ID="ID_1919476895" MODIFIED="1391436293970" TEXT="tcgetpgrp, tcsetpgrp, and tcgetsid Functions ">
<node CREATED="1391435073966" ID="ID_724339420" MODIFIED="1391435098116" TEXT="select the foreground process group"/>
<node CREATED="1391435125786" FOLDED="true" ID="ID_1092823249" MODIFIED="1392030831774" TEXT="pid_t tcgetpgrp(int filedes); ">
<node CREATED="1391435170668" HGAP="59" ID="ID_1064245377" MODIFIED="1391435385071" TEXT="returns the process group ID of the foreground process group associated with the terminal open on filedes. " VSHIFT="-2"/>
</node>
<node CREATED="1391435134471" FOLDED="true" ID="ID_51205968" MODIFIED="1392030831774" TEXT="int tcsetpgrp(int filedes, pid_t pgrpid); ">
<node CREATED="1391436075500" ID="ID_973159557" MODIFIED="1391436076935" TEXT="set the foreground process group ID to pgrpid. "/>
<node CREATED="1391436146417" ID="ID_332120240" MODIFIED="1391436148403" TEXT="The value of pgrpid must be the process group ID of a process group in the same session "/>
<node CREATED="1391436153807" ID="ID_1618763231" MODIFIED="1391436155054" TEXT="filedes must refer to the controlling terminal of the session "/>
</node>
<node CREATED="1391436038775" FOLDED="true" ID="ID_496251761" MODIFIED="1392030831774" TEXT="XSI extension ">
<node CREATED="1391436047862" FOLDED="true" ID="ID_961491242" MODIFIED="1392030831774" TEXT="pid_t tcgetsid(int filedes); ">
<node CREATED="1391436060912" ID="ID_1790135913" MODIFIED="1391436062257" TEXT="obtain the process group ID for the session leader given a file descriptor for the controlling TTY. "/>
</node>
</node>
</node>
<node CREATED="1391257334144" FOLDED="true" ID="ID_988839398" MODIFIED="1392030831774" TEXT="Job Control ">
<node CREATED="1391436291124" FOLDED="true" ID="ID_1811092422" MODIFIED="1392030831774" TEXT="Job control requires three forms of support: ">
<node CREATED="1391436307460" ID="ID_464783041" MODIFIED="1391436308972" TEXT="shell "/>
<node CREATED="1391436317775" ID="ID_800803885" MODIFIED="1391436319694" TEXT="The terminal driver in the kernel "/>
<node CREATED="1391436328787" ID="ID_1264250247" MODIFIED="1391436381844" TEXT="kernel must support certain job-control signals "/>
</node>
<node CREATED="1391436490263" ID="ID_1921558108" MODIFIED="1391436491666" TEXT=" A job is simply a collection of processes, often a pipeline of processes.  "/>
<node CREATED="1391436857140" FOLDED="true" ID="ID_1799270449" MODIFIED="1392030831774" TEXT="The terminal driver looks for three special characters, which generate signals to the foreground process group. ">
<node CREATED="1391436750985" FOLDED="true" ID="ID_1248452939" MODIFIED="1392030831774" TEXT="Control-Z ">
<node CREATED="1391437428589" ID="ID_111266221" MODIFIED="1391437453388" TEXT="SIGTSTP">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      causes the terminal driver to send the SIGTSTP signal to all processes in the foreground process group
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391436987700" FOLDED="true" ID="ID_112989633" MODIFIED="1392030831774" TEXT="Control-C ">
<node CREATED="1391436995479" ID="ID_318028882" MODIFIED="1391436997010" TEXT="SIGINT "/>
</node>
<node CREATED="1391437769021" FOLDED="true" ID="ID_876469699" MODIFIED="1392030831774" TEXT="control-\">
<node CREATED="1391437777498" ID="ID_554114820" MODIFIED="1391437808771" TEXT="SIGQUIT"/>
</node>
</node>
<node CREATED="1391437271830" FOLDED="true" ID="ID_554814526" MODIFIED="1392030831774" TEXT="Another job control condition can arise that must be handled by the terminal driver. ">
<node CREATED="1391437409468" FOLDED="true" ID="ID_608263951" MODIFIED="1392030831774" TEXT="SIGTTIN ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Only the foreground job receives terminal input. It is not an error for a
    </p>
    <p>
      background job to try to read from the terminal, but the terminal driver detects this and sends a
    </p>
    <p>
      special signal to the background job: SIGTTIN.
    </p>
  </body>
</html></richcontent>
<node CREATED="1391437486957" ID="ID_643744307" MODIFIED="1391437488917" TEXT="stops the background job "/>
</node>
<node CREATED="1391438091696" FOLDED="true" ID="ID_139996631" MODIFIED="1392030831774" TEXT="SIGTTOU ">
<node CREATED="1391438181539" ID="ID_1805196666" MODIFIED="1391438183330" TEXT="stty tostop "/>
</node>
</node>
<node CREATED="1391437611882" ID="ID_1605156597" MODIFIED="1391437623179" TEXT=" we can allow or disallow a background job outputs to the controlling terminal "/>
</node>
<node CREATED="1391257342930" FOLDED="true" ID="ID_1328792548" MODIFIED="1392030831774" TEXT="Shell Execution of Programs ">
<node CREATED="1391439726001" ID="ID_1077139474" MODIFIED="1391439727369" TEXT="The foreground process group ID is an attribute of the terminal, not the process.  "/>
<node CREATED="1391440764692" FOLDED="true" ID="ID_1279171273" MODIFIED="1392030831774" TEXT="TPGID ">
<node CREATED="1391440785009" ID="ID_1038338592" MODIFIED="1391440786435" TEXT="print the process group ID associated with the session&apos;s controlling terminal. "/>
</node>
</node>
<node CREATED="1391257349477" FOLDED="true" ID="ID_1448211405" MODIFIED="1392030831775" TEXT="Orphaned Process Groups ">
<node CREATED="1391443056276" FOLDED="true" ID="ID_1526093161" MODIFIED="1392030831775" TEXT="The POSIX.1 definition of an orphaned process group is one in which the parent of every member is either itself a member of the group or is not a member of the group&apos;s session. ">
<node CREATED="1391443064603" FOLDED="true" ID="ID_1351291706" MODIFIED="1392030831774" TEXT="Another way of wording this is that the process group is not orphaned as long as a process in the group has a parent in a different process group but in the same session.  ">
<node CREATED="1391443086735" ID="ID_175576015" MODIFIED="1391443087925" TEXT="If the process group is not orphaned, there is a chance that one of those parents in a different process group but in the same session will restart a stopped process in the process group that is not orphaned. "/>
<node CREATED="1391443136518" ID="ID_1374794829" MODIFIED="1391443138221" TEXT="POSIX.1 requires that every process in the newly orphaned process group that is stopped (as our child is) be sent the hang- up signal (SIGHUP) followed by the continue signal (SIGCONT). "/>
</node>
</node>
<node CREATED="1391443386195" ID="ID_1490404640" MODIFIED="1391443392332" TEXT="POSIX.1 specifies that the read is to return an error with errno set to EIO (whose value is 5 on this system) "/>
</node>
<node CREATED="1391257356423" ID="ID_547353604" MODIFIED="1391257357725" TEXT="FreeBSD Implementation "/>
<node CREATED="1391257361899" ID="ID_1956076564" MODIFIED="1391257363568" TEXT="Summary "/>
<node CREATED="1391257367138" ID="ID_386316447" MODIFIED="1391257368970" TEXT="Exercises "/>
</node>
<node CREATED="1391446002955" FOLDED="true" ID="ID_411208603" MODIFIED="1392625878956" POSITION="right" TEXT="Signals ">
<icon BUILTIN="help"/>
<icon BUILTIN="yes"/>
<node CREATED="1391446008713" FOLDED="true" ID="ID_1396490293" MODIFIED="1392031977367" TEXT="Introduction ">
<node CREATED="1391528614904" FOLDED="true" ID="ID_187532510" MODIFIED="1392030831775" TEXT="reliable">
<node CREATED="1391528639972" ID="ID_397820756" MODIFIED="1391528642404" TEXT="Version 7 "/>
</node>
<node CREATED="1391528665032" FOLDED="true" ID="ID_1779709868" MODIFIED="1392030831775" TEXT="reliable signals ">
<node CREATED="1391528675208" ID="ID_459205748" MODIFIED="1391528678031" TEXT="4.3BSD "/>
<node CREATED="1391528683502" ID="ID_1225337309" MODIFIED="1391528687080" TEXT="SVR3 "/>
</node>
<node CREATED="1391528725647" ID="ID_521795271" MODIFIED="1391528727409" TEXT="an overview of signals "/>
<node CREATED="1391528747308" ID="ID_478151682" MODIFIED="1391528749885" TEXT="the problems with earlier implementations "/>
</node>
<node CREATED="1391446016402" FOLDED="true" ID="ID_1590902460" MODIFIED="1392031978256" TEXT="Signal Concepts ">
<node CREATED="1391529072201" FOLDED="true" ID="ID_1894243707" MODIFIED="1392030831775" TEXT="every signal has a name ">
<node CREATED="1391529084800" ID="ID_1078423861" MODIFIED="1391529087115" TEXT="begin with the three characters SIG "/>
<node CREATED="1391529494581" FOLDED="true" ID="ID_308208592" MODIFIED="1392030831775" TEXT="positive integer constants ">
<node CREATED="1391529505394" FOLDED="true" ID="ID_1688414317" MODIFIED="1392030831775" TEXT="&lt;signal.h&gt; ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Implementations actually define the individual signals in an alternate header file, but this header
    </p>
    <p>
      file is included by &lt;signal.h&gt;. It is considered bad form for the kernel to include header files
    </p>
    <p>
      meant for user-level applications, so if the applications and the kernel both need the same
    </p>
    <p>
      definitions, the information is placed in a kernel header file that is then included by the user-
    </p>
    <p>
      level header file. Thus, both FreeBSD 5.2.1 and Mac OS X 10.3 define the signals in
    </p>
    <p>
      &lt;sys/signal.h&gt;. Linux 2.4.22 defines the signals in &lt;bits/signum.h&gt;, and Solaris 9 defines them
    </p>
    <p>
      in &lt;sys/iso/signal_iso.h&gt;.
    </p>
  </body>
</html></richcontent>
<node CREATED="1391529522101" ID="ID_992072804" MODIFIED="1391529524518" TEXT="&lt;bits/signum.h&gt; "/>
</node>
</node>
</node>
<node CREATED="1391530066917" FOLDED="true" ID="ID_1281438236" MODIFIED="1392030831775" TEXT="conditions ">
<node CREATED="1391529735282" ID="ID_1929198761" MODIFIED="1391529736870" TEXT="The terminal-generated signals "/>
<node CREATED="1391529750624" FOLDED="true" ID="ID_163278186" MODIFIED="1392030831775" TEXT="Hardware exceptions ">
<node CREATED="1391529765855" ID="ID_668436682" MODIFIED="1391529769418" TEXT="divide by 0 "/>
<node CREATED="1391529778220" ID="ID_1295382248" MODIFIED="1391529780704" TEXT="invalid memory reference "/>
</node>
<node CREATED="1391529935009" FOLDED="true" ID="ID_1779265698" MODIFIED="1392030831775" TEXT="The kill(2) function ">
<node CREATED="1391529944831" FOLDED="true" ID="ID_1739855900" MODIFIED="1392030831775" TEXT="limitations: ">
<node CREATED="1391529959747" ID="ID_835499617" MODIFIED="1391529962862" TEXT="the owner of the process "/>
<node CREATED="1391529973012" ID="ID_481601147" MODIFIED="1391529974596" TEXT="superuser. "/>
</node>
</node>
<node CREATED="1391530101614" FOLDED="true" ID="ID_1130767003" MODIFIED="1392030831775" TEXT="software conditions">
<node CREATED="1391530202359" ID="ID_751073501" MODIFIED="1391530205293" TEXT="SIGURG (generated when out-of-band data arrives over a network connection) "/>
<node CREATED="1391530218735" ID="ID_1759801021" MODIFIED="1391530220665" TEXT="SIGPIPE (generated when a process writes to a pipe after the reader of the pipe has terminated) "/>
<node CREATED="1391530233194" ID="ID_852875569" MODIFIED="1391530240710" TEXT="SIGALRM (generated when an alarm clock set by the process expires) "/>
</node>
</node>
<node CREATED="1391530364159" ID="ID_804767373" MODIFIED="1391530366541" TEXT="Signals are classic examples of asynchronous events. "/>
<node CREATED="1391531350930" FOLDED="true" ID="ID_1432661224" MODIFIED="1392030831775" TEXT="the action associated with a signal ">
<node CREATED="1391531361526" FOLDED="true" ID="ID_454306056" MODIFIED="1392030831775" TEXT="Ignore the signal.  ">
<node CREATED="1391531453915" FOLDED="true" ID="ID_632959586" MODIFIED="1392030831775" TEXT="two signals can never be ignored ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The reason these two signals can't be ignored is to provide the kernel and the
    </p>
    <p>
      superuser with a surefire way of either killing or stopping any process.
    </p>
  </body>
</html></richcontent>
<node CREATED="1391531462411" ID="ID_576358185" MODIFIED="1391531468918" TEXT="SIGKILL "/>
<node CREATED="1391531473454" ID="ID_339593146" MODIFIED="1391531475631" TEXT="SIGSTOP "/>
</node>
</node>
<node CREATED="1391531370840" FOLDED="true" ID="ID_1573077568" MODIFIED="1392030831775" TEXT="Catch the signal. ">
<node CREATED="1391531738119" ID="ID_1231025527" MODIFIED="1391531739552" TEXT="Note that the two signals SIGKILL and SIGSTOP can&apos;t be caught. "/>
</node>
<node CREATED="1391531381890" ID="ID_1919714151" MODIFIED="1391531385161" TEXT="Let the default action apply. "/>
</node>
<node CREATED="1391532276154" FOLDED="true" ID="ID_785007679" MODIFIED="1392030831775" TEXT="core">
<node CREATED="1391532780090" FOLDED="true" ID="ID_878597932" MODIFIED="1392030831775" TEXT="not be generated if  ">
<node CREATED="1391532803905" ID="ID_1205980808" MODIFIED="1391532805649" TEXT="the process was set-user-ID and the current user is not the owner of the program file "/>
<node CREATED="1391532814575" ID="ID_1754258174" MODIFIED="1391532817016" TEXT="the process was set-group-ID and the current user is not the group owner of the file "/>
<node CREATED="1391532829027" ID="ID_1783313403" MODIFIED="1391532832645" TEXT="the user does not have permission to write in the current working directory "/>
<node CREATED="1391532841256" ID="ID_837153361" MODIFIED="1391532843744" TEXT="the file already exists and the user does not have permission to write to it "/>
<node CREATED="1391532857323" ID="ID_1722511132" MODIFIED="1391532858446" TEXT="the file is too big "/>
</node>
</node>
<node CREATED="1391532918153" FOLDED="true" ID="ID_348522869" MODIFIED="1391608940488" TEXT="describe each of these signals ">
<node CREATED="1391532936090" FOLDED="true" ID="ID_611525306" MODIFIED="1392030831776" TEXT="SIGABRT">
<node CREATED="1391602274821" ID="ID_505506075" MODIFIED="1391602277421" TEXT="generated by calling the abort function "/>
</node>
<node CREATED="1391602335836" FOLDED="true" ID="ID_633156848" MODIFIED="1392030831776" TEXT="SIGALRM">
<node CREATED="1391602318282" ID="ID_96167187" MODIFIED="1391602572596" TEXT="when a timer set with the alarm function expires "/>
<node CREATED="1391602611611" ID="ID_532741336" MODIFIED="1391602613936" TEXT="when an interval timer set by the setitimer(2) function expires "/>
</node>
<node CREATED="1391602630955" FOLDED="true" ID="ID_1240898551" MODIFIED="1392030831776" TEXT="SIGBUS  ">
<node CREATED="1391602677082" ID="ID_1107409503" MODIFIED="1391602682979" TEXT="an implementation-defined hardware fault "/>
<node CREATED="1391602706517" ID="ID_1592928209" MODIFIED="1391602708092" TEXT="on certain types of memory faults "/>
</node>
<node CREATED="1391602717787" FOLDED="true" ID="ID_1094216567" MODIFIED="1392030831776" TEXT="SIGCANCEL  ">
<node CREATED="1391602742931" ID="ID_408741486" MODIFIED="1391602745714" TEXT="used internally by the Solaris threads library "/>
</node>
<node CREATED="1391602759043" FOLDED="true" ID="ID_1950524681" MODIFIED="1392030831776" TEXT="SIGCHLD  ">
<node CREATED="1391602785650" ID="ID_253881531" MODIFIED="1391602791103" TEXT="Whenever a process terminates or stops, the SIGCHLD signal is sent to the parent "/>
<node CREATED="1391602831297" ID="ID_515345211" MODIFIED="1391602834281" TEXT="The normal action in the signal-catching function is to call one of the wait functions to fetch the child&apos;s process ID and termination status "/>
<node CREATED="1391602885793" ID="ID_1851699521" MODIFIED="1391602890230" TEXT="Earlier releases of System V had a similar signal named SIGCLD (without the H). "/>
</node>
<node CREATED="1391603001569" FOLDED="true" ID="ID_808399520" MODIFIED="1392030831776" TEXT="SIGCONT  ">
<node CREATED="1391603060573" ID="ID_685279405" MODIFIED="1391603141683" TEXT="This job-control signal is sent to a stopped process when it is continued. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      A full-screen editor, for example, might catch this
    </p>
    <p>
      signal and use the signal handler to make a note to redraw the terminal screen
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391603155866" FOLDED="true" ID="ID_18875657" MODIFIED="1392030831776" TEXT="SIGEMT  ">
<node CREATED="1391603142291" ID="ID_1090728266" MODIFIED="1391603172103" TEXT="This indicates an implementation-defined hardware fault "/>
<node CREATED="1391603204565" ID="ID_1146295531" MODIFIED="1391603207302" TEXT="The name EMT comes from the PDP-11 &quot;emulator trap&quot; instruction. "/>
</node>
<node CREATED="1391603220643" FOLDED="true" ID="ID_1255229742" MODIFIED="1392030831776" TEXT="SIGFPE  ">
<node CREATED="1391603516662" ID="ID_1946405656" MODIFIED="1391603523450" TEXT="This signals an arithmetic exception, such as divide by 0, floating-point overflow, and so on. "/>
</node>
<node CREATED="1391603548504" FOLDED="true" ID="ID_548317067" MODIFIED="1392030831776" TEXT="SIGFREEZE  ">
<node CREATED="1391603590782" ID="ID_265449002" MODIFIED="1391603656961" TEXT="This signal is defined only by Solaris ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      It is used to notify processes that need to
    </p>
    <p>
      take special action before freezing the system state, such as might happen
    </p>
    <p>
      when a system goes into hibernation or suspended mode
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391603657888" FOLDED="true" ID="ID_1931850262" MODIFIED="1392030831776" TEXT="SIGHUP  ">
<node CREATED="1391603710956" ID="ID_1616371887" MODIFIED="1391603714274" TEXT="if a disconnect is detected by the terminal interface "/>
<node CREATED="1391603890213" ID="ID_543116168" MODIFIED="1391603894630" TEXT="Figure 9.12, we see that the signal is sent to the process pointed to by the s_leader field in the session structure "/>
<node CREATED="1391603997357" ID="ID_166530074" MODIFIED="1391604425773" TEXT="generated for this condition only if the terminal&apos;s CLOCAL flag is not set ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The CLOCAL flag for a
    </p>
    <p>
      terminal is set if the attached terminal is local. The flag tells the terminal driver
    </p>
    <p>
      to ignore all modem status lines.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1391604419874" FOLDED="true" ID="ID_1903301111" MODIFIED="1392030831776" TEXT="sent to">
<node CREATED="1391603694869" FOLDED="true" ID="ID_511222534" MODIFIED="1392030831776" TEXT="sent to the controlling process (session leader) associated with a controlling terminal ">
<node CREATED="1391604186519" ID="ID_892308773" MODIFIED="1391604194227" TEXT="This differs from the normal terminal-generated signals (interrupt, quit, and suspend), which are always delivered to the foreground process group. "/>
</node>
<node CREATED="1391604248550" ID="ID_694899993" MODIFIED="1391604435860" TEXT="This signal is also generated if the session leader terminates. In this case, the signal is sent to each process in the foreground process group. "/>
<node CREATED="1391604394059" ID="ID_1368331437" MODIFIED="1391604438512" TEXT="This signal is commonly used to notify daemon processes (Chapter 13) to reread their configuration files. The reason SIGHUP is chosen for this is that a daemon should not have a controlling terminal and would normally never receive this signal. "/>
</node>
</node>
<node CREATED="1391604477747" FOLDED="true" ID="ID_1781227031" MODIFIED="1392030831776" TEXT="SIGILL ">
<node CREATED="1391604489613" ID="ID_1908584550" MODIFIED="1391604493240" TEXT="indicates that the process has executed an illegal hardware instruction "/>
</node>
<node CREATED="1391604625352" FOLDED="true" ID="ID_554050160" MODIFIED="1392030831776" TEXT="SIGINFO ">
<node CREATED="1391604829792" ID="ID_1312687671" MODIFIED="1391604833744" TEXT="This BSD signal is generated by the terminal driver when we type the status key (often Control-T) "/>
<node CREATED="1391604841009" ID="ID_287813142" MODIFIED="1391604844981" TEXT="sent to all processes in the foreground process group "/>
<node CREATED="1391604876548" ID="ID_1793554693" MODIFIED="1391604880398" TEXT="linux not support"/>
</node>
<node CREATED="1391604895085" FOLDED="true" ID="ID_383831722" MODIFIED="1392030831776" TEXT="SIGINT  ">
<node CREATED="1391604911032" ID="ID_295902115" MODIFIED="1391604913788" TEXT="generated by the terminal driver when we type the interrupt key (often DELETE or Control-C). "/>
</node>
<node CREATED="1391604969807" FOLDED="true" ID="ID_604932623" MODIFIED="1392030831776" TEXT="SIGIO  ">
<node CREATED="1391604985753" ID="ID_1823213487" MODIFIED="1391604987796" TEXT="indicates an asynchronous I/O event "/>
<node CREATED="1391605054395" ID="ID_128216869" MODIFIED="1391605058599" TEXT="Linux 2.4.22 and Solaris 9 define SIGIO to be the same value as SIGPOLL "/>
<node CREATED="1391605078344" ID="ID_1105508934" MODIFIED="1391605081209" TEXT="default behavior is to terminate the process "/>
</node>
<node CREATED="1391605118896" FOLDED="true" ID="ID_203570308" MODIFIED="1392030831776" TEXT="SIGIOT ">
<node CREATED="1391605131621" ID="ID_33017268" MODIFIED="1391605135278" TEXT="indicates an implementation-defined hardware fault "/>
<node CREATED="1391605150672" ID="ID_976931609" MODIFIED="1391605153454" TEXT="The name IOT comes from the PDP-11 mnemonic for the &quot;input/output TRAP&quot; instruction. "/>
</node>
<node CREATED="1391605189867" FOLDED="true" ID="ID_842808029" MODIFIED="1392030831776" TEXT="SIGKILL  ">
<node CREATED="1391605203803" ID="ID_1705651140" MODIFIED="1391605205978" TEXT="one of the two that can&apos;t be caught or ignored "/>
</node>
<node CREATED="1391605546593" FOLDED="true" ID="ID_227135324" MODIFIED="1392030831777" TEXT="SIGLWP  ">
<node CREATED="1391605561089" ID="ID_727045200" MODIFIED="1391605563762" TEXT="is used internally by the Solaris threads library "/>
</node>
<node CREATED="1391605657306" FOLDED="true" ID="ID_536648742" MODIFIED="1392030831777" TEXT="SIGPIPE  ">
<node CREATED="1391606148250" ID="ID_1672228034" MODIFIED="1391606152233" TEXT="If we write to a pipeline but the reader has terminated "/>
<node CREATED="1391606134322" ID="ID_1916024799" MODIFIED="1391606136452" TEXT="also generated when a process writes to a socket of type SOCK_STREAM that is no longer connected "/>
</node>
<node CREATED="1391605665334" FOLDED="true" ID="ID_1795562672" MODIFIED="1392030831777" TEXT="SIGPOLL  ">
<node CREATED="1391606181182" ID="ID_1271609097" MODIFIED="1391606186981" TEXT="when a specific event occurs on a pollable device "/>
<node CREATED="1391606274718" ID="ID_1394348588" MODIFIED="1391606277064" TEXT="On Linux and Solaris, SIGPOLL is defined to have the same value as SIGIO. "/>
</node>
<node CREATED="1391605673499" FOLDED="true" ID="ID_1834766400" MODIFIED="1392030831777" TEXT="SIGPROF  ">
<node CREATED="1391606306492" ID="ID_481461319" MODIFIED="1391606309314" TEXT="when a profiling interval timer set by the setitimer(2) function expires "/>
</node>
<node CREATED="1391605683433" FOLDED="true" ID="ID_305713369" MODIFIED="1392030831777" TEXT="SIGPWR  ">
<node CREATED="1391606460990" ID="ID_799097984" MODIFIED="1391606511376" TEXT="Most systems have the process that is notified of the low-battery condition send the SIGPWR signal to the init process, and init handles the shutdown. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      This signal is system dependent. Its main use is on a system that has an
    </p>
    <p>
      uninterruptible power supply (UPS). If power fails, the UPS takes over and the
    </p>
    <p>
      software can usually be notified. Nothing needs to be done at this point, as the
    </p>
    <p>
      system continues running on battery power. But if the battery gets low (if the
    </p>
    <p>
      power is off for an extended period), the software is usually notified again; at
    </p>
    <p>
      this point, it behooves the system to shut everything down within about 1530
    </p>
    <p>
      seconds. This is when SIGPWR should be sent.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391605693372" FOLDED="true" ID="ID_702725434" MODIFIED="1392030831777" TEXT="SIGQUIT  ">
<node CREATED="1391606595637" ID="ID_1329658506" MODIFIED="1391606597998" TEXT="This signal is generated by the terminal driver when we type the terminal quit key (often Control-backslash) "/>
<node CREATED="1391606620848" ID="ID_1536505393" MODIFIED="1391606622986" TEXT="also generates a core file "/>
</node>
<node CREATED="1391605702068" FOLDED="true" ID="ID_724977899" MODIFIED="1392030831777" TEXT="SIGSEGV  ">
<node CREATED="1391606638916" ID="ID_574434017" MODIFIED="1391606641737" TEXT="indicates that the process has made an invalid memory reference "/>
<node CREATED="1391606660399" ID="ID_1585102801" MODIFIED="1391606662509" TEXT="stands for &quot;segmentation violation.&quot; "/>
</node>
<node CREATED="1391605715605" FOLDED="true" ID="ID_1070330060" MODIFIED="1392030831777" TEXT="SIGSTKFLT  ">
<node CREATED="1391606679647" ID="ID_1863857521" MODIFIED="1391606682000" TEXT="This signal is defined only by Linux "/>
<node CREATED="1391606718517" ID="ID_423475660" MODIFIED="1391606720532" TEXT="be used for stack faults taken by the math coprocessor.  "/>
</node>
<node CREATED="1391605725380" FOLDED="true" ID="ID_1438300436" MODIFIED="1392030831777" TEXT="SIGSTOP  ">
<node CREATED="1391606751117" ID="ID_1582342525" MODIFIED="1391606753223" TEXT="stops a process "/>
<node CREATED="1391606766117" ID="ID_228066009" MODIFIED="1391606768069" TEXT="like the interactive stop signal (SIGTSTP) "/>
<node CREATED="1391606776352" ID="ID_245567502" MODIFIED="1391606778197" TEXT="but SIGSTOP cannot be caught or ignored. "/>
</node>
<node CREATED="1391605732727" FOLDED="true" ID="ID_491698197" MODIFIED="1392030831777" TEXT="SIGSYS  ">
<node CREATED="1391607029231" ID="ID_1774178313" MODIFIED="1391607124231" TEXT="This signals an invalid system call. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Somehow, the process executed a machine
    </p>
    <p>
      instruction that the kernel thought was a system call, but the parameter with
    </p>
    <p>
      the instruction that indicates the type of system call was invalid. This might
    </p>
    <p>
      happen if you build a program that uses a new system call and you then try to
    </p>
    <p>
      run the same binary on an older version of the operating system where the
    </p>
    <p>
      system call doesn't exist.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391605740306" FOLDED="true" ID="ID_855826986" MODIFIED="1392030831777" TEXT="SIGTERM  ">
<node CREATED="1391607126713" ID="ID_1059342225" MODIFIED="1391607129125" TEXT="the termination signal sent by the kill(1) command by default. "/>
</node>
<node CREATED="1391605748241" FOLDED="true" ID="ID_896941916" MODIFIED="1392030831777" TEXT="SIGTHAW  ">
<node CREATED="1391607153004" ID="ID_1408895558" MODIFIED="1391607154841" TEXT="This signal is defined only by Solaris "/>
<node CREATED="1391607179608" ID="ID_678605121" MODIFIED="1391607182290" TEXT="notify processes that need to take special action when the system resumes operation after being suspended. "/>
</node>
<node CREATED="1391605755996" FOLDED="true" ID="ID_616098712" MODIFIED="1392030831777" TEXT="SIGTRAP  ">
<node CREATED="1391607202599" ID="ID_1259427330" MODIFIED="1391607204939" TEXT="This indicates an implementation-defined hardware fault "/>
<node CREATED="1391607221377" ID="ID_1481783666" MODIFIED="1391607224331" TEXT="transfer control to a debugger when a breakpoint instruction is executed. "/>
</node>
<node CREATED="1391605763794" FOLDED="true" ID="ID_828644469" MODIFIED="1392030831777" TEXT="SIGTSTP ">
<node CREATED="1391607249819" ID="ID_1335676140" MODIFIED="1391607251988" TEXT="This interactive stop signal is generated by the terminal driver when we type the terminal suspend key (often Control-Z). "/>
<node CREATED="1391607520370" ID="ID_1276952978" MODIFIED="1391607577312" TEXT="When discussing job control and signals, we talk about stopping and continuing jobs "/>
<node CREATED="1391607590134" ID="ID_829504303" MODIFIED="1391607593032" TEXT="The terminal driver, however, has historically used the term stop to refer to stopping and starting the terminal output using the Control-S and Control- Q characters.  "/>
</node>
<node CREATED="1391605774474" FOLDED="true" ID="ID_852248414" MODIFIED="1392030831777" TEXT="SIGTTIN  ">
<node CREATED="1391607653354" ID="ID_1445153238" MODIFIED="1391607655959" TEXT="when a process in a background process group tries to read from its controlling terminal. "/>
<node CREATED="1391607701358" FOLDED="true" ID="ID_1819149978" MODIFIED="1392030831777" TEXT="special cases not generated ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      instead, the read
    </p>
    <p>
      operation returns an error with errno set to EIO .
    </p>
  </body>
</html></richcontent>
<node CREATED="1391607720143" ID="ID_257726951" MODIFIED="1391607722562" TEXT="the reading process is ignoring or blocking this signal "/>
<node CREATED="1391607739586" ID="ID_730862136" MODIFIED="1391607741678" TEXT="the process group of the reading process is orphaned "/>
</node>
</node>
<node CREATED="1391605782013" FOLDED="true" ID="ID_157684306" MODIFIED="1392030831777" TEXT="SIGTTOU  ">
<node CREATED="1391607834285" ID="ID_1261559228" MODIFIED="1391607837525" TEXT="when a process in a background process group tries to write to its controlling terminal. "/>
<node CREATED="1391608082439" ID="ID_651399165" MODIFIED="1391608086105" TEXT="If background writes are not allowed, then like the SIGTTIN signal "/>
<node CREATED="1391608097210" ID="ID_883953460" MODIFIED="1391608098928" TEXT="Regardless of whether background writes are allowed, certain terminal operations (other than writing) can also generate the SIGTTOU signal: tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow, and tcsetpgrp. "/>
</node>
<node CREATED="1391605791528" FOLDED="true" ID="ID_1466396205" MODIFIED="1392030831777" TEXT="SIGURG  ">
<node CREATED="1391608247500" ID="ID_68949279" MODIFIED="1391608250310" TEXT="notifies the process that an urgent condition has occurred "/>
<node CREATED="1391608258119" ID="ID_50496556" MODIFIED="1391608260890" TEXT="optionally generated when out-of-band data is received on a network connection "/>
</node>
<node CREATED="1391605799073" FOLDED="true" ID="ID_528988754" MODIFIED="1392030831778" TEXT="SIGUSR1  ">
<node CREATED="1391608322730" ID="ID_1032720926" MODIFIED="1391608329509" TEXT="a user-defined signal"/>
</node>
<node CREATED="1391605806360" FOLDED="true" ID="ID_1542978240" MODIFIED="1392030831778" TEXT="SIGUSR2  ">
<node CREATED="1391608360679" ID="ID_1128917126" MODIFIED="1391608364274" TEXT="another user-defined signal "/>
</node>
<node CREATED="1391605815918" FOLDED="true" ID="ID_1088938294" MODIFIED="1392030831778" TEXT="SIGVTALRM  ">
<node CREATED="1391608390698" ID="ID_1937750482" MODIFIED="1391608394468" TEXT="when a virtual interval timer set by the setitimer(2) function expires "/>
</node>
<node CREATED="1391605823405" FOLDED="true" ID="ID_1485498943" MODIFIED="1392030831778" TEXT="SIGWAITING  ">
<node CREATED="1391608409033" ID="ID_1342382411" MODIFIED="1391608411620" TEXT="This signal is used internally by the Solaris threads library "/>
</node>
<node CREATED="1391605829941" FOLDED="true" ID="ID_320393816" MODIFIED="1392030831778" TEXT="SIGWINCH  ">
<node CREATED="1391608520722" ID="ID_1334572976" MODIFIED="1391608524108" TEXT="If a process changes the window size from its previous value using the ioctl set-window-size command, the kernel generates the SIGWINCH signal for the foreground process group "/>
</node>
<node CREATED="1391605837963" FOLDED="true" ID="ID_938711876" MODIFIED="1392030831778" TEXT="SIGXCPU  ">
<node CREATED="1391608557989" ID="ID_595580077" MODIFIED="1391608559790" TEXT=" If the process exceeds its soft CPU time limit, the SIGXCPU signal is generated. "/>
</node>
<node CREATED="1391605846912" FOLDED="true" ID="ID_1749394940" MODIFIED="1392030831778" TEXT="SIGXFSZ ">
<node CREATED="1391608668247" ID="ID_546622082" MODIFIED="1391608669910" TEXT="if the process exceeds its soft file size limit "/>
</node>
<node CREATED="1391605860083" FOLDED="true" ID="ID_1732151121" MODIFIED="1392030831778" TEXT="SIGXRES ">
<node CREATED="1391608697512" ID="ID_1389207493" MODIFIED="1391608700029" TEXT="This signal is defined only by Solaris.  "/>
<node CREATED="1391608721971" ID="ID_1718401069" MODIFIED="1391608723784" TEXT="exceeded a preconfigured resource value. "/>
</node>
</node>
</node>
<node CREATED="1391446023601" ID="ID_1531507739" MODIFIED="1392341189189" TEXT="signal Function ">
<node CREATED="1391608946988" FOLDED="true" ID="ID_1371109145" MODIFIED="1392341201084" TEXT="void (*signal(int signo, void (*func)(int)))(int); ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The signal function is defined by ISO C, which doesn't involve multiple processes, process
    </p>
    <p>
      groups, terminal I/O, and the like. Therefore, its definition of signals is vague enough to be
    </p>
    <p>
      almost useless for UNIX systems.
    </p>
  </body>
</html></richcontent>
<node CREATED="1391610924818" FOLDED="true" ID="ID_1551695924" MODIFIED="1392030831778" TEXT="func ">
<node CREATED="1391610940566" ID="ID_831167885" MODIFIED="1391610944986" TEXT="SIG_IGN "/>
<node CREATED="1391610949634" ID="ID_70191874" MODIFIED="1391610951202" TEXT="SIG_DFL "/>
<node CREATED="1391610963031" ID="ID_1198343362" MODIFIED="1391610964376" TEXT="the address of a function to be called when the signal occurs "/>
</node>
<node CREATED="1391611127496" FOLDED="true" ID="ID_1041162322" MODIFIED="1392030831778" TEXT="The return value from signal is the pointer to the previous signal handler. ">
<node CREATED="1391688420827" ID="ID_799014949" MODIFIED="1391688424392" TEXT="SIG_ERR"/>
</node>
<node CREATED="1391688795515" ID="ID_161528405" MODIFIED="1391688796774" TEXT="the shell automatically sets the disposition of the interrupt and quit signals in the background process to be ignored.  "/>
<node CREATED="1391688984722" ID="ID_1398694871" MODIFIED="1391688986098" TEXT="When a process calls fork, the child inherits the parent&apos;s signal dispositions.  "/>
</node>
</node>
<node CREATED="1391446030866" FOLDED="true" ID="ID_677278567" MODIFIED="1392031969647" TEXT="Unreliable Signals ">
<node CREATED="1391689172956" ID="ID_1766660435" MODIFIED="1391689176610" TEXT="mean that signals could get lost: a signal could occur and the process would never know about it "/>
<node CREATED="1391690320797" ID="ID_148367394" MODIFIED="1391690322337" TEXT="One problem with these early versions is that the action for a signal was reset to its default each time the signal occurred "/>
<node CREATED="1391690354172" ID="ID_1828594950" MODIFIED="1391690356164" TEXT="Another problem with these earlier systems is that the process was unable to turn a signal off when it didn&apos;t want the signal to occur. "/>
</node>
<node CREATED="1391446036166" FOLDED="true" ID="ID_136816160" MODIFIED="1392031966903" TEXT="Interrupted System Calls ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<node CREATED="1391690691455" FOLDED="true" ID="ID_1317258499" MODIFIED="1392030831778" TEXT="two categories ">
<node CREATED="1391690699577" FOLDED="true" ID="ID_1106957780" MODIFIED="1392030831778" TEXT="the &quot;slow&quot; system calls ">
<node CREATED="1391690721208" ID="ID_610566828" MODIFIED="1391690723309" TEXT="can block forever "/>
<node CREATED="1391690808686" ID="ID_1579221395" MODIFIED="1391690809837" TEXT="Reads that can block the caller forever if data isn&apos;t present with certain file types (pipes, terminal devices, and network devices) "/>
<node CREATED="1391690815334" ID="ID_1110187405" MODIFIED="1391690816344" TEXT="Writes that can block the caller forever if the data can&apos;t be accepted immediately by these same file types "/>
<node CREATED="1391690823510" ID="ID_838578992" MODIFIED="1391690824956" TEXT="Opens that block until some condition occurs on certain file types (such as an open of a terminal device that waits until an attached modem answers the phone) "/>
<node CREATED="1391690847289" ID="ID_1354092409" MODIFIED="1391690848194" TEXT="The pause function (which by definition puts the calling process to sleep until a signal is caught) and the wait function "/>
<node CREATED="1391690851809" ID="ID_1422562571" MODIFIED="1391690853406" TEXT="Certain ioctl operations "/>
<node CREATED="1391690859353" ID="ID_1882507921" MODIFIED="1391690860182" TEXT="Some of the interprocess communication functions "/>
</node>
<node CREATED="1391690708777" ID="ID_602258938" MODIFIED="1391690709923" TEXT="all the others "/>
</node>
</node>
<node CREATED="1391446041381" FOLDED="true" ID="ID_1086977365" MODIFIED="1392031965479" TEXT="Reentrant Functions ">
<node CREATED="1391692631185" FOLDED="true" ID="ID_679701932" MODIFIED="1392030831778" TEXT="no reentrant because">
<node CREATED="1391692663584" ID="ID_101240413" MODIFIED="1391692665380" TEXT="use static data structures "/>
<node CREATED="1391692671464" ID="ID_1292997301" MODIFIED="1391692672554" TEXT="call malloc or free "/>
<node CREATED="1391692684760" FOLDED="true" ID="ID_1837265058" MODIFIED="1392030831778" TEXT="the standard I/O library ">
<node CREATED="1391692696366" ID="ID_1557447880" MODIFIED="1391692697798" TEXT="use global data structures in a nonreentrant way. "/>
</node>
<node CREATED="1391693348959" ID="ID_1354809082" MODIFIED="1391695126884" TEXT="longjmp  and siglongjmp ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      the signal may have occurred while the main routine was updating a data structure in a
    </p>
    <p>
      nonreentrant way. This data structure could be left half updated if we call siglongjmp instead of
    </p>
    <p>
      returning from the signal handler.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391693172588" ID="ID_1348805532" MODIFIED="1391693174453" TEXT="as a general rule, when calling the functions listed in Figure 10.4 from a signal handler, we should save and restore errno. "/>
<node CREATED="1391695132834" FOLDED="true" ID="ID_1762358544" MODIFIED="1392030831778" TEXT="Figure 10.5. Call a nonreentrant function from a signal handler ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<node CREATED="1391695159579" ID="ID_1915372472" MODIFIED="1391695174436" TEXT="the handler didn&apos;t return"/>
</node>
</node>
<node CREATED="1391446046349" FOLDED="true" ID="ID_1274988891" MODIFIED="1392168507141" TEXT="SIGCLD Semantics ">
<node CREATED="1392031953129" ID="ID_1789301745" MODIFIED="1392031955517" TEXT="When the signal occurs, the status of a child has changed, and we need to call one of the wait functions to determine what has happened. "/>
<node CREATED="1392031981274" ID="ID_1741589016" MODIFIED="1392032023665" TEXT="pause">
<node CREATED="1392031994050" ID="ID_1572812019" MODIFIED="1392032015374" TEXT="pause untill received a signal"/>
</node>
<node CREATED="1392032551401" ID="ID_819694444" MODIFIED="1392032554031" TEXT="This older handling of SIGCLD consists of the following ">
<node CREATED="1392032559473" ID="ID_1627810739" MODIFIED="1392033882274" TEXT="SIG_IGN ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      POSIX.1 does not specify what happens when SIGCHLD is ignored, so this behavior is
    </p>
    <p>
      allowed. The Single UNIX Specification includes an XSI extension specifying that this
    </p>
    <p>
      behavior be supported for SIGCHLD.
    </p>
    <p>
      4.4BSD always generates zombies if SIGCHLD is ignored. If we want to avoid zombies, we
    </p>
    <p>
      have to wait for our children. FreeBSD 5.2.1 works like 4.4BSD. Mac OS X 10.3, however,
    </p>
    <p>
      doesn't create zombies when SIGCHLD is ignored.
    </p>
    <p>
      With SVR4, if either signal or sigset is called to set the disposition of SIGCHLD to be
    </p>
    <p>
      ignored, zombies are never generated. Solaris 9 and Linux 2.4.22 follow SVR4 in this
    </p>
    <p>
      behavior.
    </p>
    <p>
      With sigaction, we can set the SA_NOCLDWAIT flag (Figure 10.16) to avoid zombies. This
    </p>
    <p>
      action is supported on all four platforms: FreeBSD 5.2.1, Linux 2.4.22, Mac OS X 10.3, and
    </p>
    <p>
      Solaris 9.
    </p>
  </body>
</html></richcontent>
<node CREATED="1392032568913" ID="ID_1829738100" MODIFIED="1392032571139" TEXT="children of the calling process will not generate zombie processes.  "/>
<node CREATED="1392032707051" ID="ID_1456716743" MODIFIED="1392032710439" TEXT="on termination, the status of these child processes is discarded "/>
<node CREATED="1392032776964" ID="ID_1996894126" MODIFIED="1392032779039" TEXT="If it subsequently calls one of the wait functions, the calling process will block until all its children have terminated, and then wait returns 1 with errno set to ECHILD. "/>
<node CREATED="1392032795868" ID="ID_985093645" MODIFIED="1392032798185" TEXT="The default disposition of this signal is to be ignored, but this default will not cause the preceding semantics to occur. Instead, we specifically have to set its disposition to SIG_IGN. "/>
</node>
<node CREATED="1392032579937" ID="ID_280533500" MODIFIED="1392032582603" TEXT="be caught ">
<node CREATED="1392032589873" ID="ID_422429545" MODIFIED="1392032591927" TEXT="he kernel immediately checks whether any child processes are ready to be waited for and, if so, calls the SIGCLD handler. "/>
</node>
</node>
</node>
<node CREATED="1391446054791" FOLDED="true" ID="ID_540278595" MODIFIED="1392035064900" TEXT="Reliable-Signal Terminology and Semantics ">
<node CREATED="1392033884485" ID="ID_1193141099" MODIFIED="1392033887595" TEXT="signal ">
<node CREATED="1392033897333" ID="ID_747710940" MODIFIED="1392033899957" TEXT="generated for a process (or sent to a process) when the event that causes the signal occurs "/>
<node CREATED="1392034096730" ID="ID_1334801776" MODIFIED="1392034098443" TEXT="When the signal is generated, the kernel usually sets a flag of some form in the process table "/>
</node>
<node CREATED="1392034051039" ID="ID_1074782295" MODIFIED="1392034052938" TEXT="event ">
<node CREATED="1392034060465" ID="ID_1007630022" MODIFIED="1392034062478" TEXT="hardware exception "/>
<node CREATED="1392034066167" ID="ID_828104726" MODIFIED="1392034067638" TEXT="software condition "/>
<node CREATED="1392034073521" ID="ID_1826091256" MODIFIED="1392034075450" TEXT="terminal-generated signal "/>
<node CREATED="1392034081409" ID="ID_1023578269" MODIFIED="1392034083187" TEXT="call to the kill function "/>
</node>
<node CREATED="1392034164899" ID="ID_562750277" MODIFIED="1392034167003" TEXT="delivered ">
<node CREATED="1392034173211" ID="ID_667577884" MODIFIED="1392034175347" TEXT="We say that a signal is delivered to a process when the action for a signal is taken "/>
</node>
<node CREATED="1392034180283" ID="ID_1551176414" MODIFIED="1392034195597" TEXT="pending.">
<node CREATED="1392034190499" ID="ID_1605618670" MODIFIED="1392034192994" TEXT="During the time between the generation of a signal and its delivery, the signal is said to be pending "/>
</node>
<node CREATED="1392034637055" ID="ID_579779892" MODIFIED="1392034638766" TEXT="block">
<node CREATED="1392034646895" ID="ID_1502303046" MODIFIED="1392034649358" TEXT="A process has the option of blocking the delivery of a signal. "/>
<node CREATED="1392034656216" ID="ID_1421175951" MODIFIED="1392034658241" TEXT="If a signal that is blocked is generated for a process, and if the action for that signal is either the default action or to catch the signal, then the signal remains pending for the process until the process either (a) unblocks the signal or (b) changes the action to ignore the signal. "/>
<node CREATED="1392034693656" ID="ID_420682597" MODIFIED="1392034695328" TEXT="The system determines what to do with a blocked signal when the signal is delivered, not when it&apos;s generated. ">
<node CREATED="1392034722321" ID="ID_400581898" MODIFIED="1392034724276" TEXT="sigpending "/>
</node>
</node>
<node CREATED="1392034771267" ID="ID_644118921" MODIFIED="1392034772898" TEXT="queued ">
<node CREATED="1392034778763" ID="ID_1978813078" MODIFIED="1392034780481" TEXT="If the system delivers the signal more than once, we say that the signals are queued. "/>
</node>
<node CREATED="1392034898270" ID="ID_139568096" MODIFIED="1392034899375" TEXT="order ">
<node CREATED="1392034903566" ID="ID_1807977540" MODIFIED="1392034905103" TEXT="POSIX.1 does not specify the order in which the signals are delivered to the process. "/>
<node CREATED="1392034914830" ID="ID_1215170638" MODIFIED="1392034916460" TEXT="that signals related to the current state of the process be delivered before other signals. (SIGSEGV is one such signal.) "/>
</node>
<node CREATED="1392034934750" ID="ID_1704515349" MODIFIED="1392034936497" TEXT="the set of signals ">
<node CREATED="1392034967936" ID="ID_1533218085" MODIFIED="1392034970049" TEXT="Each process has a signal mask that defines the set of signals currently blocked from delivery to that process. "/>
<node CREATED="1392034983656" ID="ID_612471236" MODIFIED="1392034985220" TEXT="sigprocmask "/>
<node CREATED="1392035003161" ID="ID_657372202" MODIFIED="1392035004395" TEXT="sigset_t "/>
</node>
</node>
<node CREATED="1391446061331" FOLDED="true" ID="ID_736687170" MODIFIED="1392035886942" TEXT="kill and raise Functions ">
<node CREATED="1392035066938" ID="ID_335884196" MODIFIED="1392035068746" TEXT="kill">
<node CREATED="1392035083251" ID="ID_499839011" MODIFIED="1392035085508" TEXT="sends a signal to a process or a group of processes "/>
<node CREATED="1392035155173" ID="ID_1867556561" MODIFIED="1392035157060" TEXT="int kill(pid_t pid, int signo); ">
<node CREATED="1392035205590" ID="ID_683680862" MODIFIED="1392035207445" TEXT="pid &gt; 0  ">
<node CREATED="1392035228311" ID="ID_473214396" MODIFIED="1392035230236" TEXT="sent to the process "/>
</node>
<node CREATED="1392035261800" ID="ID_1143910915" MODIFIED="1392035263994" TEXT="pid == 0  ">
<node CREATED="1392035256384" ID="ID_724243838" MODIFIED="1392035339905" TEXT="all processes whose process group ID equals the process group ID of the sender and for which the sender has permission to send the signal ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Note that the term all processes excludes an implementation-defined set
    </p>
    <p>
      of system processes. For most UNIX systems, this set of system processes
    </p>
    <p>
      includes the kernel processes and init (pid 1).
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1392035347770" ID="ID_1795799286" MODIFIED="1392035349781" TEXT="pid &lt; 0  ">
<node CREATED="1392035342762" ID="ID_1024110483" MODIFIED="1392035344166" TEXT="sent to all processes whose process group ID equals the absolute value of pid and for which the sender has permission to send the signal "/>
</node>
<node CREATED="1392035371650" ID="ID_1889129993" MODIFIED="1392035373196" TEXT="pid == 1  ">
<node CREATED="1392035382707" ID="ID_67884173" MODIFIED="1392035384871" TEXT="sent to all processes on the system for which the sender has permission to send the signal "/>
</node>
</node>
<node CREATED="1392035421619" ID="ID_410800518" MODIFIED="1392035425150" TEXT="permission ">
<node CREATED="1392035438276" ID="ID_642778068" MODIFIED="1392035439783" TEXT="The superuser can send a signal to any process. "/>
<node CREATED="1392035450652" ID="ID_400146360" MODIFIED="1392035452336" TEXT="the basic rule is that the real or effective user ID of the sender has to equal the real or effective user ID of the receiver. ">
<node CREATED="1392035542471" ID="ID_1029609870" MODIFIED="1392035544553" TEXT="If the implementation supports _POSIX_SAVED_IDS (as POSIX.1 now requires), the saved set-user-ID of the receiver is checked instead of its effective user ID "/>
</node>
<node CREATED="1392035497229" ID="ID_624620549" MODIFIED="1392035499009" TEXT="one special case ">
<node CREATED="1392035504182" ID="ID_1635582906" MODIFIED="1392035506664" TEXT="if the signal being sent is SIGCONT, a process can send it to any other process in the same session "/>
</node>
</node>
<node CREATED="1392035870598" ID="ID_1340269993" MODIFIED="1392035872659" TEXT="unblocked signal is delivered to the process before kill returns "/>
</node>
<node CREATED="1392035069163" ID="ID_1737820371" MODIFIED="1392035075402" TEXT="raise">
<node CREATED="1392035092059" ID="ID_744138012" MODIFIED="1392035093725" TEXT="allows a process to send a signal to itself "/>
<node CREATED="1392035161277" ID="ID_860597864" MODIFIED="1392035163511" TEXT="int raise(int signo); ">
<node CREATED="1392035185806" ID="ID_1456528236" MODIFIED="1392035189977" TEXT="==kill(getpid(), signo); "/>
</node>
</node>
<node CREATED="1392035622928" ID="ID_1445429225" MODIFIED="1392035624795" TEXT="signal number 0 ">
<node CREATED="1392035630113" ID="ID_151430981" MODIFIED="1392035631676" TEXT="the null signal "/>
<node CREATED="1392035645401" ID="ID_1182949018" MODIFIED="1392035647609" TEXT="the normal error checking is performed by kill, but no signal is sent "/>
<node CREATED="1392035659913" ID="ID_1069407287" MODIFIED="1392035661099" TEXT="determine if a specific process still exists. ">
<node CREATED="1392035678249" ID="ID_1564547294" MODIFIED="1392035679725" TEXT="it doesn&apos;t exist ">
<node CREATED="1392035685474" ID="ID_277790436" MODIFIED="1392035687092" TEXT="kill returns 1 and errno is set to ESRCH. "/>
</node>
<node CREATED="1392035715402" ID="ID_648510544" MODIFIED="1392035717678" TEXT="Be aware ">
<node CREATED="1392035707730" ID="ID_518160414" MODIFIED="1392035709204" TEXT="recycle process IDs "/>
<node CREATED="1392035733603" ID="ID_456918661" MODIFIED="1392035735769" TEXT="so the existence of a process with a given process ID does not mean that it&apos;s the process that you think it is "/>
</node>
<node CREATED="1392035766908" ID="ID_772969129" MODIFIED="1392035811764" TEXT="he test for process existence is not atomic ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      y the time that kill returns the
    </p>
    <p>
      answer to the caller, the process in question might have exited
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1391446070403" FOLDED="true" ID="ID_892035063" MODIFIED="1392341202494" TEXT="alarm and pause Functions ">
<node CREATED="1392080968374" ID="ID_1390865670" MODIFIED="1392080974332" TEXT="unsigned int alarm(unsigned int seconds); ">
<node CREATED="1392081073681" ID="ID_1354896363" MODIFIED="1392081075576" TEXT="allows us to set a timer that will expire at a specified time in the future "/>
<node CREATED="1392081083313" ID="ID_1261079461" MODIFIED="1392081085648" TEXT="SIGALRM ">
<node CREATED="1392081123754" ID="ID_746457357" MODIFIED="1392081125793" TEXT=" If we ignore or don&apos;t catch this signal, its default action is to terminate the process. "/>
</node>
<node CREATED="1392081155099" ID="ID_1347155688" MODIFIED="1392081157979" TEXT="seconds ">
<node CREATED="1392081163507" ID="ID_449051718" MODIFIED="1392081231096" TEXT="the number of clock seconds in the future when the signal should be generated ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Be aware that when that time occurs, the signal is generated by the kernel, but there could be
    </p>
    <p>
      additional time before the process gets control to handle the signal, because of processor scheduling
    </p>
    <p>
      delays.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1392081261881" ID="ID_1234184655" MODIFIED="1392081263736" TEXT="if the seconds value is 0 ">
<node CREATED="1392081270685" ID="ID_1919970529" MODIFIED="1392081272342" TEXT="the previous alarm clock is canceled "/>
</node>
</node>
<node CREATED="1392081232260" ID="ID_914857961" MODIFIED="1392081260901" TEXT="one of these alarm clocks per process ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If, when we call alarm, a previously registered
    </p>
    <p>
      alarm clock for the process has not yet expired, the number of seconds left for that alarm clock is
    </p>
    <p>
      returned as the value of this function. That previously registered alarm clock is replaced by the new
    </p>
    <p>
      value.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1392081333727" ID="ID_1615690095" MODIFIED="1392081335568" TEXT="If we intend to catch SIGALRM, we need to be careful to install its signal handler before calling alarm. ">
<node CREATED="1392081352903" ID="ID_1632319851" MODIFIED="1392081354682" TEXT="If we call alarm first and are sent SIGALRM before we can install the signal handler, our process will terminate. "/>
</node>
</node>
<node CREATED="1392081364415" ID="ID_94839519" MODIFIED="1392081366322" TEXT="int pause(void); ">
<node CREATED="1392081373239" ID="ID_1235675325" MODIFIED="1392081375489" TEXT="suspends the calling process until a signal is caught "/>
<node CREATED="1392081421384" ID="ID_1116624402" MODIFIED="1392081431528" TEXT="pause returns if a signal handler is executed and that handler returns. ">
<node CREATED="1392081444841" ID="ID_1031085781" MODIFIED="1392081447950" TEXT="pause returns 1 with errno set to EINTR "/>
</node>
</node>
<node CREATED="1392168527291" ID="ID_1479677309" MODIFIED="1392168550642" TEXT="impliment sleep"/>
<node CREATED="1392168551519" ID="ID_1168462182" MODIFIED="1392253741088" TEXT="impliment time-out input"/>
</node>
<node CREATED="1391446076191" FOLDED="true" ID="ID_1001815" MODIFIED="1392557979853" TEXT="Signal Sets ">
<node CREATED="1392254002983" ID="ID_810833775" MODIFIED="1392254004797" TEXT="a data type to represent multiple signals "/>
<node CREATED="1392254036632" ID="ID_1304502238" MODIFIED="1392254038784" TEXT="POSIX.1 defines the data type sigset_t to contain a signal set "/>
<node CREATED="1392254043768" ID="ID_106644376" MODIFIED="1392254133703" TEXT="function">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      All applications have
    </p>
    <p>
      to call either sigemptyset or sigfillset once for each signal set, before using the signal set, because
    </p>
    <p>
      we cannot assume that the C initialization for external and static variables (0) corresponds to the
    </p>
    <p>
      implementation of signal sets on a given system.
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
<node CREATED="1392254051712" ID="ID_1346877678" MODIFIED="1392254053565" TEXT="int sigemptyset(sigset_t *set); "/>
<node CREATED="1392254059289" ID="ID_1241447664" MODIFIED="1392254061357" TEXT="int sigfillset(sigset_t *set); ">
<node CREATED="1392254215773" ID="ID_655767878" MODIFIED="1392254224189" TEXT="#define sigfillset(ptr)   (*(ptr) = ~(sigset_t)0, 0) "/>
</node>
<node CREATED="1392254065167" ID="ID_424018195" MODIFIED="1392254067573" TEXT="int sigaddset(sigset_t *set, int signo); "/>
<node CREATED="1392254071616" ID="ID_1890940390" MODIFIED="1392254073559" TEXT="int sigdelset(sigset_t *set, int signo); "/>
<node CREATED="1392254077865" ID="ID_1522344635" MODIFIED="1392254080068" TEXT="int sigismember(const sigset_t *set, int signo); "/>
</node>
</node>
<node CREATED="1391446082268" FOLDED="true" ID="ID_67788245" MODIFIED="1392280573936" TEXT="sigprocmask Function ">
<node CREATED="1392260583515" ID="ID_201398218" MODIFIED="1392260585232" TEXT="the signal mask ">
<node CREATED="1392260647570" ID="ID_1157236340" MODIFIED="1392260649609" TEXT="the set of signals currently blocked from delivery to that process. "/>
</node>
<node CREATED="1392260675827" ID="ID_141417389" MODIFIED="1392260677735" TEXT="int sigprocmask(int how, const sigset_t *restrict set, sigset_t *restrict oset); ">
<node CREATED="1392260888564" ID="ID_812699276" MODIFIED="1392260892540" TEXT="oset">
<node CREATED="1392260893500" ID="ID_377102651" MODIFIED="1392262794687" TEXT="the previous signal mask "/>
</node>
<node CREATED="1392260907620" ID="ID_1434618261" MODIFIED="1392260908424" TEXT="set">
<node CREATED="1392260920780" ID="ID_1302411602" MODIFIED="1392260954913" TEXT="how:SIG_BLOCK  ">
<node CREATED="1392261026948" ID="ID_110272946" MODIFIED="1392261029148" TEXT="contains the additional signals that we want to block "/>
</node>
<node CREATED="1392260920780" ID="ID_382476252" MODIFIED="1392260961196" TEXT="how:SIG_UNBLOCK  ">
<node CREATED="1392261038652" ID="ID_1838198490" MODIFIED="1392261040713" TEXT="contains the signals that we want to unblock "/>
</node>
<node CREATED="1392260920780" ID="ID_764587778" MODIFIED="1392260975818" TEXT="how:SIG_SETMASK    "/>
</node>
</node>
<node CREATED="1392260685156" ID="ID_1611518538" MODIFIED="1392260687802" TEXT="examine its signal mask "/>
<node CREATED="1392260692716" ID="ID_1500427604" MODIFIED="1392260695111" TEXT="change its signal mask "/>
<node CREATED="1392261115836" ID="ID_1655393590" MODIFIED="1392261142422" TEXT="The sigprocmask function is defined only for single-threaded processes. "/>
<node CREATED="1392261201860" ID="ID_1208366086" MODIFIED="1392261205967" TEXT="After calling sigprocmask, if any unblocked signals are pending, at least one of these signals is delivered to the process before sigprocmask returns. ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1391446088766" ID="ID_646480423" MODIFIED="1391446089606" TEXT="sigpending Function ">
<node CREATED="1392340088393" ID="ID_1407786277" MODIFIED="1392340091385" TEXT="returns the set of signals that are blocked from delivery and currently pending for the calling process. "/>
</node>
<node CREATED="1391446094708" FOLDED="true" ID="ID_1932212883" MODIFIED="1392370341411" TEXT="sigaction Function ">
<node CREATED="1392341180248" ID="ID_1609451050" MODIFIED="1392341183372" TEXT="allows us to examine or modify (or both) the action associated with a particular signal. "/>
<node CREATED="1392365709493" ID="ID_1153030772" MODIFIED="1392365712492" TEXT="int sigaction(int signo, const struct sigaction *restrict act, struct sigaction *restrict oact); ">
<node CREATED="1392367058916" ID="ID_1059592221" MODIFIED="1392367058916" TEXT=""/>
</node>
<node CREATED="1392367063278" FOLDED="true" ID="ID_1177620728" MODIFIED="1392370340734" TEXT="struct sigaction ">
<node CREATED="1392367076462" ID="ID_1152773085" MODIFIED="1392367078389" TEXT="void (*sa_handler)(int); "/>
<node CREATED="1392367082398" ID="ID_1750636839" MODIFIED="1392367084329" TEXT="sigset_t sa_mask; ">
<node CREATED="1392367613595" HGAP="30" ID="ID_348410367" MODIFIED="1392367654381" TEXT="specifies a set of signals that are added to the signal mask of the process before the signal-catching function is called " VSHIFT="-5"/>
<node CREATED="1392367717189" ID="ID_668521572" MODIFIED="1392367719234" TEXT="when the signal-catching function returns, the signal mask of the process is reset to its previous value. "/>
</node>
<node CREATED="1392367089126" ID="ID_1124773564" MODIFIED="1392367091143" TEXT="int sa_flags; ">
<node CREATED="1392368105078" ID="ID_1023077190" MODIFIED="1392368153833" TEXT="SA_INTERRUPT ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      System calls interrupted by this
    </p>
    <p>
      signal are not automatically
    </p>
    <p>
      restarted
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1392368155247" ID="ID_692084008" MODIFIED="1392368171614" TEXT="SA_RESTART ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      System calls interrupted by this
    </p>
    <p>
      signal are automatically restarted
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1392368172784" ID="ID_1725879054" MODIFIED="1392370338694" TEXT="SA_SIGINFO ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      This option provides additional
    </p>
    <p>
      information to a signal handler: a
    </p>
    <p>
      pointer to a siginfo structure and
    </p>
    <p>
      a pointer to an identifier for the
    </p>
    <p>
      process context.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1392367095407" ID="ID_1366174223" MODIFIED="1392368594462" TEXT="void (*sa_sigaction)(int, siginfo_t *info, void *context); ">
<node CREATED="1392368091325" ID="ID_1398936270" MODIFIED="1392368093764" TEXT="Implementations might use the same storage for both the sa_sigaction field and the sa_handler field, so applications can use only one of these fields at a time. "/>
<node CREATED="1392368603009" ID="ID_1867799284" MODIFIED="1392368606813" TEXT="siginfo_t">
<node CREATED="1392368312507" ID="ID_1208338208" MODIFIED="1392368315227" TEXT="si_signo; "/>
<node CREATED="1392368332636" ID="ID_1597936071" MODIFIED="1392368334799" TEXT="si_errno; ">
<node CREATED="1392368363316" ID="ID_1291051192" MODIFIED="1392368365288" TEXT="if nonzero, errno value from &lt;errno.h&gt; "/>
</node>
<node CREATED="1392368338820" ID="ID_1165942371" MODIFIED="1392368340193" TEXT="si_code; ">
<node CREATED="1392368373253" ID="ID_1284134550" MODIFIED="1392368375453" TEXT="additional info (depends on signal) ">
<node CREATED="1392368385045" ID="ID_505327194" MODIFIED="1392368388185" TEXT="example">
<node CREATED="1392368391229" ID="ID_1777670967" MODIFIED="1392368397750" TEXT="SIGCHLD ">
<node CREATED="1392368402237" ID="ID_1753240077" MODIFIED="1392368403853" TEXT="CLD_TRAPPED  ">
<node CREATED="1392368439535" ID="ID_1511880687" MODIFIED="1392368443976" TEXT="traced child has trapped "/>
</node>
<node CREATED="1392368412894" ID="ID_1961270907" MODIFIED="1392368414335" TEXT="CLD_STOPPED  "/>
<node CREATED="1392368418646" ID="ID_1797490257" MODIFIED="1392368420054" TEXT="CLD_CONTINUED  "/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1392368534929" ID="ID_494873683" MODIFIED="1392368538265" TEXT="context-&gt;ucontext_t ">
<node CREATED="1392368579841" ID="ID_597806101" MODIFIED="1392368582644" TEXT="identifying the process context at the time of signal delivery "/>
</node>
</node>
</node>
</node>
<node CREATED="1391446100818" FOLDED="true" ID="ID_1450583875" MODIFIED="1392557981994" TEXT="sigsetjmp and siglongjmp Functions ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      When a signal is caught, the signal-catching function
    </p>
    <p>
      is entered with the current signal automatically being added to the signal mask of the process. This
    </p>
    <p>
      prevents subsequent occurrences of that signal from interrupting the signal handler. If we longjmp
    </p>
    <p>
      out of the signal handler, what happens to the signal mask for the process?
    </p>
  </body>
</html></richcontent>
<node CREATED="1392370344210" ID="ID_1284039836" MODIFIED="1392370349399" TEXT="background "/>
<node CREATED="1392370362387" ID="ID_413084935" MODIFIED="1392370363931" TEXT="int sigsetjmp(sigjmp_buf env, int savemask); ">
<node CREATED="1392373502376" ID="ID_764105534" MODIFIED="1392373504659" TEXT="The only difference between these functions and the setjmp and longjmp functions is that sigsetjmp has an additional argument "/>
<node CREATED="1392375538844" ID="ID_1445820818" MODIFIED="1392375542362" TEXT=" If,  and only if, savesigs is        nonzero, the process&apos;s current signal mask is saved in env and will  be        restored if a siglongjmp(3) is later performed with this env. "/>
</node>
<node CREATED="1392370376507" ID="ID_1592705785" MODIFIED="1392370378836" TEXT="void siglongjmp(sigjmp_buf env, int val); "/>
</node>
<node CREATED="1391446107175" ID="ID_984588754" MODIFIED="1392380668866" TEXT="sigsuspend Function ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<node CREATED="1392376108699" ID="ID_1133415192" MODIFIED="1392376111004" TEXT="int sigsuspend(const sigset_t *sigmask); "/>
<node CREATED="1392376116937" ID="ID_16193941" MODIFIED="1392380650171" TEXT="backgound">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /* reset signal mask, which unblocks SIGINT */
    </p>
    <p>
      if (sigprocmask(SIG_SETMASK, &amp;oldmask, NULL) &lt; 0)
    </p>
    <p>
      err_sys(&quot;SIG_SETMASK error&quot;);
    </p>
    <p>
      /* window is open */
    </p>
    <p>
      pause(); /* wait for signal to occur */
    </p>
    <p>
      
    </p>
    <p>
      if the signal
    </p>
    <p>
      does occur between the unblocking and the pause, we have a problem. Any occurrence of the signal
    </p>
    <p>
      in this window of time is lost in the sense that we might not see the signal again, in which case the
    </p>
    <p>
      pause will block indefinitely. This is another problem with the earlier unreliable signals.
    </p>
    <p>
      To correct this problem, we need a way to both reset the signal mask and put the process to sleep in
    </p>
    <p>
      a single atomic operation. This feature is provided by the sigsuspend function.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1391446112242" ID="ID_175575677" MODIFIED="1391446113018" TEXT="abort Function ">
<node CREATED="1392381019911" ID="ID_930948110" MODIFIED="1392381023017" TEXT="void abort(void); ">
<node CREATED="1392381040769" ID="ID_233909145" MODIFIED="1392381042348" TEXT="This function sends the SIGABRT signal to the caller "/>
<node CREATED="1392381490258" ID="ID_831359036" MODIFIED="1392381491896" TEXT="If the process doesn&apos;t terminate itself from this signal handler, POSIX.1 states that, when the signal handler returns, abort terminates the process "/>
</node>
</node>
<node CREATED="1391446116941" ID="ID_1314597290" MODIFIED="1391446117901" TEXT="system Function "/>
<node CREATED="1391446122233" ID="ID_846443431" MODIFIED="1391446125016" TEXT="sleep Function "/>
<node CREATED="1391446129804" ID="ID_1256383307" MODIFIED="1391446130762" TEXT="Job-Control Signals "/>
<node CREATED="1391446135519" ID="ID_1218700903" MODIFIED="1391446136501" TEXT=" Additional Features "/>
<node CREATED="1391446140125" ID="ID_1268518014" MODIFIED="1391446142538" TEXT=" Summary "/>
</node>
<node CREATED="1392949541994" FOLDED="true" ID="ID_637081276" MODIFIED="1395043494191" POSITION="right" TEXT="Threads ">
<node CREATED="1392949564039" FOLDED="true" ID="ID_607133705" MODIFIED="1392963514942" TEXT="Introduction ">
<node CREATED="1392952883696" ID="ID_278083049" MODIFIED="1392952885737" TEXT="All threads within a single process have access to the same process components, such as file descriptors and memory. "/>
<node CREATED="1392952924568" ID="ID_446283079" MODIFIED="1392952926761" TEXT="synchronization mechanisms "/>
</node>
<node CREATED="1392949577119" FOLDED="true" ID="ID_1904222331" MODIFIED="1394690627152" TEXT="Thread Concepts ">
<node CREATED="1392952991271" FOLDED="true" ID="ID_489088662" MODIFIED="1394690107340" TEXT="With multiple threads of control, we can design our programs to do more than one thing at a time within a single process, with each thread handling a separate task.  ">
<node CREATED="1392953000607" ID="ID_1098757692" MODIFIED="1394689801337" TEXT="benefits. ">
<node CREATED="1392953019575" HGAP="22" ID="ID_989837729" MODIFIED="1394690099995" TEXT="simplify code that deals with asynchronous events by assigning a separate thread to handle each event type " VSHIFT="5"/>
<node CREATED="1392953050758" ID="ID_503264223" MODIFIED="1392953065731" TEXT="share memory and file descriptors  is more simple"/>
<node CREATED="1392953076662" ID="ID_504799079" MODIFIED="1392953078575" TEXT="Some problems can be partitioned so that overall program throughput can be improved. "/>
<node CREATED="1392953331924" ID="ID_1013066132" MODIFIED="1392953333002" TEXT="interactive programs can realize improved response time "/>
</node>
</node>
<node CREATED="1392963275598" ID="ID_633686351" MODIFIED="1392963278852" TEXT="an execution context ">
<node CREATED="1392963290894" HGAP="21" ID="ID_274427657" MODIFIED="1394690162274" TEXT="a thread ID that identifies the thread within a process " VSHIFT="16"/>
<node CREATED="1392963297454" ID="ID_88984796" MODIFIED="1392963299192" TEXT="a set of register values "/>
<node CREATED="1392963302422" ID="ID_1026856978" MODIFIED="1392963304321" TEXT=" a stack "/>
<node CREATED="1392963313335" ID="ID_371708530" MODIFIED="1392963315028" TEXT="a scheduling priority and policy "/>
<node CREATED="1392963319214" ID="ID_689943977" MODIFIED="1392963321295" TEXT="a signal mask "/>
<node CREATED="1392963325135" ID="ID_1160257704" MODIFIED="1392963326917" TEXT="an errno variable  "/>
<node CREATED="1392963335671" ID="ID_1910549876" MODIFIED="1392963339075" TEXT="thread- specific data "/>
</node>
<node CREATED="1392963386296" ID="ID_1809520130" MODIFIED="1392963388716" TEXT="sharable among the threads in a process ">
<node CREATED="1392963396993" HGAP="16" ID="ID_825673302" MODIFIED="1394690527090" TEXT="the text of the executable program " VSHIFT="2"/>
<node CREATED="1392963410993" HGAP="23" ID="ID_1765688772" MODIFIED="1394690518883" TEXT="global and heap memory " VSHIFT="2"/>
<node CREATED="1392963416337" ID="ID_1944851140" MODIFIED="1392963418087" TEXT="the stacks "/>
<node CREATED="1392963424761" ID="ID_1911902076" MODIFIED="1392963427091" TEXT="the file descriptors "/>
</node>
<node CREATED="1392963470714" ID="ID_1899828005" MODIFIED="1392963472961" TEXT="&quot;pthreads&quot; for &quot;POSIX threads,&quot; "/>
</node>
<node CREATED="1392949582471" FOLDED="true" ID="ID_822822625" MODIFIED="1394690896029" TEXT="Thread Identification ">
<node CREATED="1392963510043" ID="ID_1707006119" MODIFIED="1392963512441" TEXT="significance only within the context of the process "/>
<node CREATED="1392963555068" ID="ID_394511809" MODIFIED="1394690888631" TEXT="int pthread_equal(pthread_t tid1, pthread_t tid2) ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;Implementations are allowed to use a structure to
    </p>
    <p>
      represent the pthread_t data type, so portable implementations can't treat them as integers.
    </p>
    <p>
      Therefore, a function must be used to compare two thread IDs
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1392963672703" ID="ID_1766691068" MODIFIED="1392963674826" TEXT="pthread_t pthread_self(void); "/>
</node>
<node CREATED="1392949589728" ID="ID_649255446" MODIFIED="1394690897510" TEXT="Thread Creation ">
<node CREATED="1392964049312" ID="ID_214400764" MODIFIED="1392964052058" TEXT="int pthread_create(pthread_t *restrict tidp, const pthread_attr_t *restrict attr, void *(*start_rtn)(void), void *restrict arg); "/>
<node CREATED="1392964216228" FOLDED="true" ID="ID_650059582" MODIFIED="1394691512679" TEXT="The newly created thread has access to the process address space and inherits the calling thread&apos;s floating-point environment and signal mask ">
<node CREATED="1392964223284" ID="ID_474567342" MODIFIED="1392964225588" TEXT="however, the set of pending signals for the thread is cleared. "/>
</node>
<node CREATED="1392964315982" ID="ID_440048100" MODIFIED="1394691510674" TEXT="Note that the pthread functions usually return an error code when they fail. They don&apos;t set errno like the other POSIX functions. ">
<node CREATED="1392964324878" ID="ID_1024261863" MODIFIED="1392964327211" TEXT="The per thread copy of errno is provided only for compatibility with existing functions that use it. "/>
</node>
</node>
<node CREATED="1392949595152" FOLDED="true" ID="ID_725018461" MODIFIED="1393244018372" TEXT="Thread Termination ">
<node CREATED="1392971324580" ID="ID_44870007" MODIFIED="1392971327517" TEXT="stopping its flow of control, without terminating the entire process ">
<node CREATED="1392971339205" ID="ID_1455100013" MODIFIED="1392971340487" TEXT="return "/>
<node CREATED="1392971351765" ID="ID_1103062992" MODIFIED="1392971353574" TEXT="be canceled by another thread in the same process "/>
<node CREATED="1392971359629" ID="ID_588037955" MODIFIED="1392971361817" TEXT="pthread_exit ">
<node CREATED="1392971391926" ID="ID_571775916" MODIFIED="1392971393563" TEXT="void pthread_exit(void *rval_ptr); "/>
</node>
</node>
<node CREATED="1392971433415" ID="ID_1106403804" MODIFIED="1392971435890" TEXT="int pthread_join(pthread_t thread, void **rval_ptr); ">
<node CREATED="1392971492929" ID="ID_602774331" MODIFIED="1392971495076" TEXT="The calling thread will block until the specified thread calls pthread_exit, returns from its start routine, or is canceled. "/>
<node CREATED="1392976752992" ID="ID_1286606467" MODIFIED="1392976755433" TEXT="If the thread simply returned from its start routine ">
<node CREATED="1392976761368" ID="ID_962081196" MODIFIED="1392976762913" TEXT="rval_ptr will contain the return code "/>
</node>
<node CREATED="1392976767592" ID="ID_1499154756" MODIFIED="1392976769305" TEXT="If the thread was canceled ">
<node CREATED="1392976776920" ID="ID_1008724563" MODIFIED="1392976779337" TEXT="the memory location specified by rval_ptr is set to PTHREAD_CANCELED "/>
</node>
<node CREATED="1392976801161" ID="ID_847211378" MODIFIED="1392976802978" TEXT="By calling pthread_join, we automatically place a thread in the detached state  ">
<node CREATED="1392976814025" ID="ID_1626584348" MODIFIED="1392976816930" TEXT="so that its resources can be recovered "/>
<node CREATED="1392976826153" ID="ID_485579163" MODIFIED="1392976827552" TEXT="If the thread was already in the detached state, calling pthread_join fails, returning EINVAL "/>
</node>
<node CREATED="1392976841434" ID="ID_1123898658" MODIFIED="1392976843297" TEXT="If we&apos;re not interested in a thread&apos;s return value, we can set rval_ptr to NULL. "/>
</node>
<node CREATED="1392979368125" ID="ID_1503280944" MODIFIED="1392979371122" TEXT="int pthread_cancel(pthread_t tid); ">
<node CREATED="1392979399182" ID="ID_1281220387" MODIFIED="1392979401486" TEXT="pthread_cancel will cause the thread specified by tid to behave as if it had called pthread_exit with an argument of PTHREAD_CANCELED. "/>
<node CREATED="1392979438967" ID="ID_82576157" MODIFIED="1392979440377" TEXT="a thread can elect to ignore or otherwise control how it is canceled "/>
<node CREATED="1392979430630" ID="ID_1609101989" MODIFIED="1392979432545" TEXT="pthread_cancel doesn&apos;t wait for the thread to terminate. It merely makes the request. "/>
</node>
<node CREATED="1392980110781" ID="ID_656620746" MODIFIED="1392980368898" TEXT="thread cleanup handlers ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      A restriction with these functions is that, because they can be implemented as macros, they must be
    </p>
    <p>
      used in matched pairs within the same scope in a thread. The macro definition of
    </p>
    <p>
      pthread_cleanup_push can include a { character, in which case the matching } character is in the
    </p>
    <p>
      pthread_cleanup_pop definition.
    </p>
  </body>
</html></richcontent>
<node CREATED="1392980122453" ID="ID_219037309" MODIFIED="1392980124238" TEXT="void pthread_cleanup_push(void (*rtn)(void *), void *arg); "/>
<node CREATED="1392980131061" ID="ID_1910228433" MODIFIED="1392980134750" TEXT="void pthread_cleanup_pop(int execute); ">
<node CREATED="1392980321855" ID="ID_1683452834" MODIFIED="1392980331169" TEXT="removes the cleanup handler established by the last call to pthread_cleanup_push "/>
</node>
<node CREATED="1392980249462" ID="ID_198022029" MODIFIED="1392980250741" TEXT="when">
<node CREATED="1392980260462" ID="ID_1205357296" MODIFIED="1392980262495" TEXT="pthread_exit "/>
<node CREATED="1392980271575" ID="ID_544917181" MODIFIED="1392980273399" TEXT="Responds to a cancellation request "/>
<node CREATED="1392980288423" ID="ID_793518422" MODIFIED="1392980290573" TEXT="pthread_cleanup_pop with a nonzero execute argument "/>
</node>
</node>
<node CREATED="1392981474525" ID="ID_1131401648" MODIFIED="1392981476613" TEXT="int pthread_detach(pthread_t tid); ">
<node CREATED="1392981465396" ID="ID_144397732" MODIFIED="1392981467293" TEXT="a thread&apos;s termination status is retained until pthread_join is called for that thread "/>
<node CREATED="1392981519493" ID="ID_1370723048" MODIFIED="1392981522824" TEXT="A thread&apos;s underlying storage can be reclaimed immediately on termination if that thread has been detached.  ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
</node>
<node CREATED="1392949600936" FOLDED="true" ID="ID_1649197403" MODIFIED="1394689551457" TEXT="Thread Synchronization ">
<node CREATED="1393077250554" ID="ID_1628759742" MODIFIED="1393077253681" TEXT="Mutexes">
<node CREATED="1393077325956" ID="ID_195342127" MODIFIED="1393077327466" TEXT="int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);"/>
<node CREATED="1393077332347" ID="ID_686700518" MODIFIED="1393077333991" TEXT="int pthread_mutex_destroy(pthread_mutex_t *mutex);"/>
<node CREATED="1393077357783" ID="ID_1369051332" MODIFIED="1393077358834" TEXT="int pthread_mutex_lock(pthread_mutex_t *mutex);">
<node CREATED="1393077503414" ID="ID_64095341" MODIFIED="1393077504661" TEXT="unlocked">
<node CREATED="1393077507988" ID="ID_1458952808" MODIFIED="1393077509560" TEXT="lock"/>
</node>
<node CREATED="1393077511165" ID="ID_828056694" MODIFIED="1393077513458" TEXT="locked">
<node CREATED="1393077514379" ID="ID_1248968445" MODIFIED="1393077516601" TEXT="wait"/>
</node>
</node>
<node CREATED="1393077369833" ID="ID_1662047500" MODIFIED="1393077371033" TEXT="int pthread_mutex_trylock(pthread_mutex_t *mutex);">
<node CREATED="1393077496135" ID="ID_854778818" MODIFIED="1393077497535" TEXT="unlocked">
<node CREATED="1393077523755" ID="ID_1560622401" MODIFIED="1393077525725" TEXT="lock"/>
</node>
<node CREATED="1393077527576" ID="ID_1546023562" MODIFIED="1393077529324" TEXT="locked">
<node CREATED="1393077530179" ID="ID_792939620" MODIFIED="1393077536780" TEXT="failed"/>
<node CREATED="1393077547058" ID="ID_1082383282" MODIFIED="1393077551976" TEXT="noblock"/>
</node>
</node>
<node CREATED="1393077376234" ID="ID_31244048" MODIFIED="1393077378697" TEXT="int pthread_mutex_unlock(pthread_mutex_t *mutex);"/>
</node>
<node CREATED="1393081723286" ID="ID_731045825" MODIFIED="1393086428496" TEXT="Deadlock Avoidance">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      have the potential for a deadlock only when one thread Sometimes, an application's architecture makes it difficult to apply a lock ordering
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1393086459277" ID="ID_1819680063" MODIFIED="1393086461300" TEXT="ReaderWriter Locks">
<node CREATED="1393086473434" ID="ID_1907645415" MODIFIED="1393086475235" TEXT="int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);"/>
<node CREATED="1393086485992" ID="ID_203730568" MODIFIED="1393086487470" TEXT="int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);"/>
<node CREATED="1393151148406" ID="ID_1821852014" MODIFIED="1393151150165" TEXT="int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);"/>
<node CREATED="1393151159475" ID="ID_1723791153" MODIFIED="1393151161489" TEXT="int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);"/>
<node CREATED="1393151169949" ID="ID_751097395" MODIFIED="1393151172712" TEXT="int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);"/>
<node CREATED="1393151264244" ID="ID_229617342" MODIFIED="1393151265811" TEXT="int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);"/>
<node CREATED="1393151273019" ID="ID_345353548" MODIFIED="1393151274536" TEXT="int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);"/>
</node>
<node CREATED="1393158274618" FOLDED="true" ID="ID_1958996318" MODIFIED="1393160016180" TEXT="Condition Variables">
<node CREATED="1393158452195" ID="ID_577195859" MODIFIED="1393158454223" TEXT="PTHREAD_COND_INITIALIZER">
<node CREATED="1393158461927" ID="ID_1922717461" MODIFIED="1393158463495" TEXT="a statically-allocated condition variable"/>
</node>
<node CREATED="1393158470094" ID="ID_1507517193" MODIFIED="1393158471380" TEXT="int pthread_cond_init(pthread_cond_t *restrict cond, pthread_condattr_t *restrict attr);"/>
<node CREATED="1393158476772" ID="ID_723086098" MODIFIED="1393158478145" TEXT="int pthread_cond_destroy(pthread_cond_t *cond);"/>
<node CREATED="1393158527045" ID="ID_287616110" MODIFIED="1393158528424" TEXT="int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);"/>
<node CREATED="1393158535648" ID="ID_771574414" MODIFIED="1393158536713" TEXT="int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict timeout);"/>
<node CREATED="1393158960381" ID="ID_806626163" MODIFIED="1393158961806" TEXT="int pthread_cond_signal(pthread_cond_t *cond);"/>
<node CREATED="1393158966790" ID="ID_379656033" MODIFIED="1393158968794" TEXT="int pthread_cond_broadcast(pthread_cond_t *cond);"/>
</node>
</node>
<node CREATED="1392949604984" FOLDED="true" ID="ID_1196509855" MODIFIED="1394689553167" TEXT="Summary ">
<node CREATED="1393160019265" ID="ID_1169048077" MODIFIED="1393160020969" TEXT="concept of threads"/>
<node CREATED="1393160050358" ID="ID_1676063974" MODIFIED="1393160055837" TEXT="create and destroy them"/>
<node CREATED="1393160064385" ID="ID_190462217" MODIFIED="1393160065649" TEXT="thread synchronization"/>
</node>
<node CREATED="1392949609496" ID="ID_1749062199" MODIFIED="1393166209896" TEXT="Exercises ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1392949620657" FOLDED="true" ID="ID_1461218239" MODIFIED="1394689544225" POSITION="right" TEXT="Thread Control ">
<node CREATED="1392949627585" ID="ID_389424779" MODIFIED="1392949629294" TEXT="Introduction ">
<node CREATED="1393166217114" ID="ID_1712655516" MODIFIED="1393166218808" TEXT="learn the details of controlling thread behavior"/>
<node CREATED="1393166226887" ID="ID_1544414118" MODIFIED="1393166228882" TEXT="thread attributes"/>
<node CREATED="1393166235203" ID="ID_1476322396" MODIFIED="1393166236386" TEXT="synchronization primitive attributes"/>
<node CREATED="1393166261342" ID="ID_1497578395" MODIFIED="1393166262690" TEXT="keep data private from other threads"/>
</node>
<node CREATED="1392949620657" FOLDED="true" ID="ID_1461218239" MODIFIED="1395043698582" POSITION="right" TEXT="Thread Control ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<node CREATED="1392949627585" ID="ID_389424779" MODIFIED="1392949629294" TEXT="Introduction "/>
<node CREATED="1392949634193" FOLDED="true" ID="ID_1648678860" MODIFIED="1393334819101" TEXT="Thread Limits ">
<node CREATED="1393334067500" FOLDED="true" ID="ID_384298981" MODIFIED="1393334818373" TEXT="sysconf ">
<node CREATED="1393334076236" ID="ID_1684630493" MODIFIED="1393334786992" TEXT="_SC_THREAD_DESTRUCTOR_ITERATIONS ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      maximum number of times
    </p>
    <p>
      an implementation will try
    </p>
    <p>
      to destroy the thread-
    </p>
    <p>
      specific data when a thread
    </p>
    <p>
      exits
    </p>
  </body>
</html></richcontent>
<node CREATED="1393334044981" ID="ID_1154523975" MODIFIED="1393334047510" TEXT="PTHREAD_DESTRUCTOR_ITERATIONS  "/>
</node>
<node CREATED="1393334701552" ID="ID_1405100343" MODIFIED="1393334703424" TEXT="_SC_THREAD_KEYS_MAX ">
<node CREATED="1393334725224" ID="ID_719510300" MODIFIED="1393334726970" TEXT="PTHREAD_KEYS_MAX  "/>
</node>
<node CREATED="1393334710312" ID="ID_1306801431" MODIFIED="1393334712512" TEXT="_SC_THREAD_STACK_MIN ">
<node CREATED="1393334730632" ID="ID_150852235" MODIFIED="1393334732624" TEXT="PTHREAD_STACK_MIN  "/>
</node>
<node CREATED="1393334717976" ID="ID_690485633" MODIFIED="1393334720272" TEXT="_SC_THREAD_THREADS_MAX ">
<node CREATED="1393334736816" ID="ID_837935913" MODIFIED="1393334738494" TEXT="PTHREAD_THREADS_MAX  "/>
</node>
</node>
</node>
<node CREATED="1392949642274" FOLDED="true" ID="ID_1407192448" MODIFIED="1395043501985" TEXT="Thread Attributes ">
<node CREATED="1393334821770" ID="ID_1981184389" MODIFIED="1393334828834" TEXT="int pthread_attr_init(pthread_attr_t *attr); "/>
<node CREATED="1393334843346" ID="ID_1972945719" MODIFIED="1393334845424" TEXT="int pthread_attr_destroy(pthread_attr_t *attr); "/>
<node CREATED="1393334979469" ID="ID_1785638593" MODIFIED="1393334982383" TEXT="POSIX.1 thread attributes ">
<node CREATED="1393334988597" ID="ID_404855370" MODIFIED="1393337540471" TEXT="detachstate  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If we know that we don't need the thread's termination status at the time we create the thread, we
    </p>
    <p>
      can arrange for the thread to start out in the detached state by modifying the detachstate thread
    </p>
    <p>
      attribute in the pthread_attr_t structure.
    </p>
  </body>
</html></richcontent>
<node CREATED="1393335149407" ID="ID_921642902" MODIFIED="1393335151526" TEXT="PTHREAD_CREATE_DETACHED "/>
<node CREATED="1393335154695" ID="ID_1725779998" MODIFIED="1393335156549" TEXT="PTHREAD_CREATE_JOINABLE "/>
<node CREATED="1393335173968" ID="ID_958425655" MODIFIED="1393335175825" TEXT="int pthread_attr_getdetachstate(const pthread_attr_t *restrict attr, int *detachstate); "/>
<node CREATED="1393335182280" ID="ID_1740583958" MODIFIED="1393335195589" TEXT=" int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate); "/>
</node>
<node CREATED="1393335005333" FOLDED="true" ID="ID_650464378" MODIFIED="1393337174344" TEXT="guardsize  ">
<node CREATED="1393336282311" ID="ID_1868016175" MODIFIED="1393336284218" TEXT="int pthread_attr_getguardsize(const pthread_attr_t *restrict attr, size_t *restrict guardsize); "/>
<node CREATED="1393336289719" ID="ID_1706378451" MODIFIED="1393336291232" TEXT="int pthread_attr_setguardsize(pthread_attr_t *attr , size_t guardsize); "/>
<node CREATED="1393336298423" ID="ID_298729817" MODIFIED="1393336300497" TEXT="The guardsize thread attribute controls the size of the memory extent after the end of the thread&apos;s stack to protect against stack overflow "/>
<node CREATED="1393336418161" ID="ID_1838141190" MODIFIED="1393336428452" TEXT="If the thread&apos;s stack pointer overflows into the guard area, the application will receive an error, possibly with a signal. ">
<icon BUILTIN="idea"/>
</node>
</node>
<node CREATED="1393335018478" FOLDED="true" ID="ID_1700055919" MODIFIED="1393337173600" TEXT="stackaddr  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      With a process, the amount of virtual address space is fixed. Since there is only one stack, its size
    </p>
    <p>
      usually isn't a problem. With threads, however, the same amount of virtual address space must be
    </p>
    <p>
      shared by all the thread stacks. You might have to reduce your default thread stack size if your
    </p>
    <p>
      application uses so many threads that the cumulative size of their stacks exceeds the available virtual
    </p>
    <p>
      address space. On the other hand, if your threads call functions that allocate large automatic
    </p>
    <p>
      variables or call functions many stack frames deep, you might need more than the default stack size.
    </p>
  </body>
</html></richcontent>
<node CREATED="1393336348824" ID="ID_772928831" MODIFIED="1393336358364" TEXT="If you run out of virtual address space for thread stacks, you can use malloc or mmap (see Section 14.9) to allocate space for an alternate stack and use pthread_attr_setstack to change the stack location of threads you create "/>
<node CREATED="1393335905345" ID="ID_1324150062" MODIFIED="1393335908322" TEXT="int pthread_attr_getstack(const pthread_attr_t *restrict attr, void **restrict stackaddr, size_t *restrict stacksize); "/>
<node CREATED="1393335944490" ID="ID_126227321" MODIFIED="1393335946865" TEXT="int pthread_attr_setstack(const pthread_attr_t *attr, void *stackaddr, size_t *stacksize); "/>
<node CREATED="1393336185077" ID="ID_1327031316" MODIFIED="1393336187983" TEXT="int pthread_attr_getstacksize(const pthread_attr_t *restrict attr, size_t *restrict stacksize); "/>
<node CREATED="1393336193133" ID="ID_1114120238" MODIFIED="1393336195045" TEXT="int pthread_attr_setstacksize(pthread_attr_t *attr , size_t stacksize); "/>
</node>
<node CREATED="1393335023206" ID="ID_941510198" MODIFIED="1393335024769" TEXT="stacksize  "/>
<node CREATED="1393337032243" FOLDED="true" ID="ID_1140948262" MODIFIED="1393337176856" TEXT="concurrency level ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The concurrency level controls the number of kernel threads or processes on top of which the user-
    </p>
    <p>
      level threads are mapped. If an implementation keeps a one-to-one mapping between kernel-level
    </p>
    <p>
      threads and user-level threads, then changing the concurrency level will have no effect, since it is
    </p>
    <p>
      possible for all user-level threads to be scheduled. If the implementation multiplexes user-level
    </p>
    <p>
      threads on top of kernel-level threads or processes, however, you might be able to improve
    </p>
    <p>
      performance by increasing the number of user-level threads that can run at a given time. The
    </p>
    <p>
      pthread_setconcurrency function can be used to provide a hint to the system of the desired level of
    </p>
    <p>
      concurrency.
    </p>
  </body>
</html></richcontent>
<node CREATED="1393337053211" ID="ID_1786423929" MODIFIED="1393337055492" TEXT="int pthread_getconcurrency(void); "/>
<node CREATED="1393337059363" ID="ID_755854832" MODIFIED="1393337061046" TEXT="int pthread_setconcurrency(int level); ">
<node CREATED="1393337110004" ID="ID_1161604028" MODIFIED="1393337112148" TEXT="is only a hint to the system "/>
<node CREATED="1393337122380" ID="ID_204719574" MODIFIED="1393337123998" TEXT="tell the system that you want it to decide for itself what concurrency level to use by passing a level of 0 "/>
</node>
</node>
<node CREATED="1393337150356" ID="ID_1289879451" MODIFIED="1393337158407" TEXT="cancelability  state "/>
<node CREATED="1393337162597" ID="ID_58702075" MODIFIED="1393337164583" TEXT="cancelability type "/>
</node>
</node>
<node CREATED="1392949648930" FOLDED="true" ID="ID_1313573177" MODIFIED="1393344084097" TEXT="Synchronization Attributes ">
<node CREATED="1393337301063" ID="ID_1618522153" MODIFIED="1393337303140" TEXT="Mutex Attributes ">
<node CREATED="1393337310039" ID="ID_423166422" MODIFIED="1393337312008" TEXT="int pthread_mutexattr_init(pthread_mutexattr_t *attr); "/>
<node CREATED="1393337315111" ID="ID_1480110488" MODIFIED="1393337316905" TEXT="int pthread_mutexattr_destroy(pthread_mutexattr_t *attr); "/>
<node CREATED="1393337485666" ID="ID_1546128856" MODIFIED="1393337487808" TEXT="attr">
<node CREATED="1393337489418" ID="ID_27276052" MODIFIED="1393337491678" TEXT="process-shared ">
<node CREATED="1393337503523" ID="ID_1970388175" MODIFIED="1393337505667" TEXT="int pthread_mutexattr_getpshared(const pthread_mutexattr_t * restrict attr, int *restrict pshared); "/>
<node CREATED="1393337531827" ID="ID_602661090" MODIFIED="1393337534250" TEXT="int pthread_mutexattr_setpshared (pthread_mutexattr_t *attr, int pshared); "/>
<node CREATED="1393337556051" ID="ID_1365878857" MODIFIED="1393337558468" TEXT="PTHREAD_PROCESS_SHARED ">
<node CREATED="1393337713862" ID="ID_900439510" MODIFIED="1393337713862" TEXT=""/>
</node>
<node CREATED="1393337562988" ID="ID_1781028386" MODIFIED="1393337565021" TEXT="PTHREAD_PROCESS_PRIVATE ">
<node CREATED="1393337717175" ID="ID_1080747544" MODIFIED="1393337719541" TEXT="provide more efficient mutex implementations when the attribute is set to PTHREAD_PROCESS_PRIVATE , "/>
</node>
</node>
<node CREATED="1393337740783" ID="ID_473635973" MODIFIED="1393337742181" TEXT="type">
<node CREATED="1393337747599" ID="ID_1550772012" MODIFIED="1393337749978" TEXT="PTHREAD_MUTEX_NORMAL ">
<node CREATED="1393337765695" ID="ID_360437437" MODIFIED="1393337767737" TEXT="doesn&apos;t do any special error checking or deadlock detection "/>
</node>
<node CREATED="1393337772151" ID="ID_1254219812" MODIFIED="1393337774361" TEXT="PTHREAD_MUTEX_ERRORCHECK ">
<node CREATED="1393337783240" ID="ID_250512151" MODIFIED="1393337785246" TEXT="provides error checking "/>
</node>
<node CREATED="1393337790432" ID="ID_481342882" MODIFIED="1393342394951" TEXT="PTHREAD_MUTEX_RECURSIVE ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Recall from Section 11.6 that a mutex is used to protect the condition that is associated with a
    </p>
    <p>
      condition variable. Before blocking the thread, the pthread_cond_wait and the
    </p>
    <p>
      pthread_cond_timedwait functions release the mutex associated with the condition. This allows other
    </p>
    <p>
      threads to acquire the mutex, change the condition, release the mutex, and signal the condition
    </p>
    <p>
      variable. Since the mutex must be held to change the condition, it is not a good idea to use a
    </p>
    <p>
      recursive mutex. If a recursive mutex is locked multiple times and used in a call to
    </p>
    <p>
      pthread_cond_wait, the condition can never be satisfied, because the unlock done by
    </p>
    <p>
      pthread_cond_wait doesn't release the mutex.
    </p>
  </body>
</html></richcontent>
<node CREATED="1393337814344" ID="ID_1426871784" MODIFIED="1393337856355" TEXT="allows the same thread to lock it multiple times without first unlocking it. ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      A recursive mutex maintains a lock count and isn't released until it is unlocked the
    </p>
    <p>
      same number of times it is locked.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1393337796200" ID="ID_1076864228" MODIFIED="1393337798354" TEXT="PTHREAD_MUTEX_DEFAULT ">
<node CREATED="1393337858137" ID="ID_1310282662" MODIFIED="1393337860698" TEXT="be used to request default semantics "/>
<node CREATED="1393337878721" ID="ID_698320464" MODIFIED="1393337880355" TEXT=" Implementations are free to map this to one of the other types. "/>
</node>
<node CREATED="1393337957675" ID="ID_1241486227" MODIFIED="1393337960012" TEXT="int pthread_mutexattr_gettype(const pthread_mutexattr_t * restrict attr, int *restrict type); "/>
<node CREATED="1393337964219" ID="ID_1641097083" MODIFIED="1393337965897" TEXT="int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type); "/>
</node>
</node>
</node>
<node CREATED="1393342451083" ID="ID_1531903843" MODIFIED="1393342453287" TEXT="ReaderWriter Lock Attributes ">
<node CREATED="1393342511308" ID="ID_1713007530" MODIFIED="1393342529053" TEXT="int pthread_rwlockattr_init(pthread_rwlockattr_t *attr); "/>
<node CREATED="1393342530388" ID="ID_990031686" MODIFIED="1393342542944" TEXT="int pthread_rwlockattr_destroy (pthread_rwlockattr_t *attr); "/>
<node CREATED="1393342558100" ID="ID_1988787046" MODIFIED="1393342565027" TEXT="attr">
<node CREATED="1393342566453" ID="ID_1292966189" MODIFIED="1393342569012" TEXT="process-shared ">
<node CREATED="1393342620982" ID="ID_1107531878" MODIFIED="1393342622656" TEXT="int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * restrict attr, int *restrict pshared); "/>
<node CREATED="1393342636374" ID="ID_1418764185" MODIFIED="1393342638688" TEXT="int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *attr, int pshared); "/>
</node>
</node>
</node>
<node CREATED="1393342648334" ID="ID_351915335" MODIFIED="1393342651176" TEXT="Condition Variable Attributes ">
<node CREATED="1393342672223" ID="ID_734370662" MODIFIED="1393342675020" TEXT="int pthread_condattr_init(pthread_condattr_t *attr); "/>
<node CREATED="1393342680895" ID="ID_305473643" MODIFIED="1393342682961" TEXT="int pthread_condattr_destroy(pthread_condattr_t *attr); "/>
<node CREATED="1393342717375" ID="ID_1692584588" MODIFIED="1393342718229" TEXT="attr">
<node CREATED="1393342566453" ID="ID_162373420" MODIFIED="1393342569012" TEXT="process-shared ">
<node CREATED="1393342735944" ID="ID_1326758282" MODIFIED="1393342738459" TEXT="int pthread_condattr_getpshared(const pthread_condattr_t * restrict attr, int *restrict pshared); "/>
<node CREATED="1393342750064" ID="ID_783655027" MODIFIED="1393342752099" TEXT="int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared); "/>
</node>
</node>
</node>
</node>
<node CREATED="1392949654835" FOLDED="true" ID="ID_760586738" MODIFIED="1393375679683" TEXT="Reentrancy ">
<node CREATED="1393344088531" ID="ID_1210415968" MODIFIED="1393344093352" TEXT="thread-safe">
<node CREATED="1393344094339" ID="ID_1953306677" MODIFIED="1393344097825" TEXT="If a function can be safely called by multiple threads at the same time, we say that the function is thread-safe.  "/>
<node CREATED="1393344199453" ID="ID_524461296" MODIFIED="1393344201116" TEXT="Implementations that support thread-safe functions will define the _POSIX_THREAD_SAFE_FUNCTIONS symbol in &lt;unistd.h&gt; "/>
</node>
<node CREATED="1393344311016" ID="ID_1880510177" MODIFIED="1393344313160" TEXT="async-signal safe ">
<node CREATED="1393344323600" ID="ID_1065540167" MODIFIED="1393344325216" TEXT="We say that a function that is safe to be reentered from an asynchronous signal handler is async-signal safe. "/>
</node>
<node CREATED="1393344248566" ID="ID_110023770" MODIFIED="1393344253052" TEXT="acstime_r  ">
<node CREATED="1393344262631" ID="ID_131250469" MODIFIED="1393344271476" TEXT="_r : reentrancy"/>
</node>
<node CREATED="1393344385954" ID="ID_890755141" MODIFIED="1393344397402" TEXT="thrad safe functions"/>
<node CREATED="1393344368025" ID="ID_1116241755" MODIFIED="1393345947592" TEXT="FILE objects ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Although the standard I/O routines might be implemented to be thread-safe from the perspective of
    </p>
    <p>
      their own internal data structures, it is still useful to expose the locking to applications. This allows
    </p>
    <p>
      applications to compose multiple calls to standard I/O functions into atomic sequences. Of course,
    </p>
    <p>
      when dealing with multiple FILE objects, you need to beware of potential deadlocks and to order your
    </p>
    <p>
      locks carefully.
    </p>
    <p>
      If the standard I/O routines acquire their own locks, then we can run into serious performance
    </p>
    <p>
      degradation when doing character-at-a-time I/O. In this situation, we end up acquiring and releasing
    </p>
    <p>
      a lock for every character read or written. To avoid this overhead, unlocked versions of the
    </p>
    <p>
      character-based standard I/O routines are available.
    </p>
  </body>
</html></richcontent>
<node CREATED="1393344432715" ID="ID_980821938" MODIFIED="1393344434651" TEXT="int ftrylockfile(FILE *fp); "/>
<node CREATED="1393344439163" ID="ID_1476006798" MODIFIED="1393344448704" TEXT="void flockfile(FILE *fp); "/>
<node CREATED="1393344449803" ID="ID_1666400784" MODIFIED="1393344451582" TEXT="void funlockfile(FILE *fp); "/>
<node CREATED="1393344558557" ID="ID_366993632" MODIFIED="1393344561838" TEXT="int getchar_unlocked(void); "/>
<node CREATED="1393344566518" ID="ID_636761424" MODIFIED="1393344569037" TEXT="int getc_unlocked(FILE *fp); "/>
<node CREATED="1393344573318" ID="ID_1555345839" MODIFIED="1393344575143" TEXT="int putchar_unlocked(int c); "/>
<node CREATED="1393344578398" ID="ID_1102745069" MODIFIED="1393344580927" TEXT="int putc_unlocked(int c, FILE *fp); "/>
</node>
</node>
<node CREATED="1392949661331" FOLDED="true" ID="ID_1980818415" MODIFIED="1395043496218" TEXT="Thread-Specific Data ">
<node CREATED="1393375682015" ID="ID_155877577" MODIFIED="1393375684990" TEXT="is a mechanism for storing and finding data associated with a particular thread. "/>
<node CREATED="1393375717127" ID="ID_660362017" MODIFIED="1393375719079" TEXT="we&apos;d like each thread to access its own separate copy of the data, without worrying about synchronizing access with other threads "/>
<node CREATED="1393375856842" ID="ID_526117908" MODIFIED="1393375859015" TEXT="reason">
<node CREATED="1393375907851" ID="ID_1478431343" MODIFIED="1393375910018" TEXT="need to maintain data on a per thread basis "/>
<node CREATED="1393375946164" ID="ID_1570259553" MODIFIED="1393375948573" TEXT="provide a mechanism for adapting process-based interfaces to a multithreaded environment ">
<node CREATED="1393376048990" ID="ID_957943681" MODIFIED="1393376051291" TEXT="errno"/>
</node>
</node>
<node CREATED="1393376077262" FOLDED="true" ID="ID_1140664147" MODIFIED="1393376146619" TEXT="Recall that all threads in a process have access to the entire address space of the process ">
<icon BUILTIN="yes"/>
<icon BUILTIN="yes"/>
<icon BUILTIN="yes"/>
<node CREATED="1393376098614" ID="ID_1532138208" MODIFIED="1393376100472" TEXT="Other than using registers, there is no way for one thread to prevent another from accessing its data "/>
</node>
<node CREATED="1393376148112" ID="ID_705695650" MODIFIED="1393376240623" TEXT="int pthread_key_create(pthread_key_t *keyp, void (*destructor)(void *)); ">
<node CREATED="1393376216641" ID="ID_1467498398" MODIFIED="1393376317062" TEXT="keyp">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The same key can be used by
    </p>
    <p>
      all threads in the process, but each thread will associate a different thread-specific data address with
    </p>
    <p>
      the key
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1393376319483" ID="ID_537576709" MODIFIED="1393376362269" TEXT="destructor">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      When the thread exits, if the data address has been set to a non-null value, the destructor
    </p>
    <p>
      function is called with the data address as the only argume
    </p>
  </body>
</html></richcontent>
<node CREATED="1393376379812" ID="ID_440340169" MODIFIED="1393376381335" TEXT="pthread_exit or by returning, the destructor is called "/>
<node CREATED="1393376388780" ID="ID_1697817400" MODIFIED="1393376390135" TEXT="exit, _exit, _Exit, or abort, or otherwise exits abnormally, the destructor is not called "/>
</node>
<node CREATED="1393376630193" ID="ID_1938732787" MODIFIED="1393376662401" TEXT="check and check to call destructor">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      After all destructors are called, the system will
    </p>
    <p>
      check whether any non-null thread-specific values were associated with the keys and, if so, call the
    </p>
    <p>
      destructors again. This process will repeat until either all keys for the thread have null thread-specific
    </p>
    <p>
      data values or a maximum of PTHREAD_DESTRUCTOR_ITERATIONS (Figure 12.1) attempts have been
    </p>
    <p>
      made.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1393376667970" ID="ID_748740276" MODIFIED="1393376669830" TEXT="int pthread_key_delete(pthread_key_t *key); ">
<node CREATED="1393376710939" ID="ID_406308596" MODIFIED="1393376716246" TEXT="will not invoke the destructor function associated with the key ">
<icon BUILTIN="yes"/>
<icon BUILTIN="yes"/>
</node>
</node>
<node CREATED="1393376771341" ID="ID_888711625" MODIFIED="1393376786408" TEXT="pthread_once_t initflag = PTHREAD_ONCE_INIT; &#xa;int pthread_once(pthread_once_t *initflag, void (*initfn)(void)); ">
<node CREATED="1393376801869" ID="ID_1415953503" MODIFIED="1393376803823" TEXT="The initflag must be a nonlocal variable (i.e., global or static) and initialized to PTHREAD_ONCE_INIT. "/>
<node CREATED="1393376842022" ID="ID_1041071602" MODIFIED="1393376844211" TEXT="the system guarantees that the initialization routine, initfn, will be called only once, on the first call to pthread_once. "/>
</node>
<node CREATED="1393376859679" ID="ID_1626425628" MODIFIED="1393376861725" TEXT="void *pthread_getspecific(pthread_key_t key); "/>
<node CREATED="1393376872567" ID="ID_916616534" MODIFIED="1393376874514" TEXT="int pthread_setspecific(pthread_key_t key, const void *value); "/>
</node>
<node CREATED="1392949667115" FOLDED="true" ID="ID_2924296" MODIFIED="1393536283857" TEXT="Cancel Options ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Two thread attributes that are not included in the pthread_attr_t structure are the cancelability state
    </p>
    <p>
      and the cancelability type. These attributes affect the behavior of a thread in response to a call to
    </p>
    <p>
      pthread_cancel
    </p>
  </body>
</html></richcontent>
<node CREATED="1393507764359" ID="ID_1601835334" MODIFIED="1393507766317" TEXT="int pthread_setcancelstate(int state, int *oldstate); ">
<node CREATED="1393507744622" ID="ID_101397328" MODIFIED="1393507746672" TEXT="PTHREAD_CANCEL_DISABLE "/>
<node CREATED="1393507738873" ID="ID_692801687" MODIFIED="1393507740917" TEXT="PTHREAD_CANCEL_ENABLE "/>
</node>
<node CREATED="1393507826384" ID="ID_1072130201" MODIFIED="1393507828186" TEXT="cancellation points ">
<node CREATED="1393507858032" ID="ID_322193207" MODIFIED="1393507864583" TEXT="occur when a thread calls some functions"/>
<node CREATED="1393507943002" ID="ID_293693912" MODIFIED="1393507944912" TEXT="void pthread_testcancel(void); ">
<node CREATED="1393508131597" ID="ID_1621563636" MODIFIED="1393508163542" TEXT="similar with adding a cancelation point"/>
</node>
</node>
<node CREATED="1393508009899" ID="ID_897537435" MODIFIED="1393508012642" TEXT="cancellation type ">
<node CREATED="1393508040827" ID="ID_1834304076" MODIFIED="1393508241068" TEXT="int pthread_setcanceltype(int type, int *oldtype); ">
<node CREATED="1393508049556" ID="ID_1272904927" MODIFIED="1393508051261" TEXT="PTHREAD_CANCEL_DEFERRED "/>
<node CREATED="1393508055908" ID="ID_1637155591" MODIFIED="1393508088122" TEXT="PTHREAD_CANCEL_ASYNCHRONOUS ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The thread doesn't necessarily need to hit a cancellation point for it to be canceled.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1392949672987" FOLDED="true" ID="ID_1928920779" MODIFIED="1395043497722" TEXT="Threads and Signals ">
<node CREATED="1393508275872" ID="ID_169646208" MODIFIED="1393508278724" TEXT="Each thread has its own signal mask "/>
<node CREATED="1393508289400" ID="ID_894057609" MODIFIED="1393508292247" TEXT="the signal disposition is shared by all threads in the process "/>
<node CREATED="1393508339337" ID="ID_360904564" MODIFIED="1393508341488" TEXT="Signals are delivered to a single thread in the process ">
<node CREATED="1393508390834" ID="ID_1650013813" MODIFIED="1393508393579" TEXT="If the signal is related to a hardware fault or expiring timer, the signal is sent to the thread whose action caused the event "/>
<node CREATED="1393508404250" ID="ID_630456431" MODIFIED="1393508406431" TEXT="Other signals, on the other hand, are delivered to an arbitrary thread "/>
</node>
<node CREATED="1393508461395" ID="ID_719046960" MODIFIED="1393508463429" TEXT="int pthread_sigmask(int how, const sigset_t *restrict set, sigset_t *restrict oset); ">
<node CREATED="1393508640270" ID="ID_542274787" MODIFIED="1393508642265" TEXT="sigprocmask ">
<node CREATED="1393508652463" ID="ID_377250896" MODIFIED="1393508654783" TEXT="undefined in a multithreaded process "/>
</node>
</node>
<node CREATED="1393508682895" ID="ID_644404511" MODIFIED="1393510086365" TEXT="int sigwait(const sigset_t *restrict set, int *restrict signop); ">
<node CREATED="1393508768633" ID="ID_481752813" MODIFIED="1393508770752" TEXT="set ">
<node CREATED="1393508780913" ID="ID_1378630225" MODIFIED="1393508782896" TEXT="the set of signals for which the thread is waiting "/>
</node>
<node CREATED="1393508787417" ID="ID_1953012437" MODIFIED="1393508791487" TEXT="signop">
<node CREATED="1393508808898" ID="ID_34023008" MODIFIED="1393508827024" TEXT="which delivered"/>
</node>
<node CREATED="1393510436600" ID="ID_415275090" MODIFIED="1393510439604" TEXT="If multiple threads are blocked in calls to sigwait for the same signal, only one of the threads will return from sigwait when the signal is delivered. "/>
</node>
<node CREATED="1393510392391" ID="ID_1849096093" MODIFIED="1393510395288" TEXT="int pthread_kill(pthread_t thread, int signo); ">
<node CREATED="1393510450576" ID="ID_744971646" MODIFIED="1393510452659" TEXT="a signo value of 0 to check for existence of the thread "/>
<node CREATED="1393510527577" ID="ID_1289333112" MODIFIED="1393510529277" TEXT="If the default action for a signal is to terminate the process, then sending the signal to a thread will still kill the entire process. "/>
</node>
<node CREATED="1393510614347" ID="ID_914151440" MODIFIED="1393510616358" TEXT="Note ">
<node CREATED="1393510623323" ID="ID_1043744267" MODIFIED="1393510625341" TEXT="alarm timers are a process resource ">
<node CREATED="1393510631523" ID="ID_1536480451" MODIFIED="1393510633355" TEXT="all threads share the same set of alarms "/>
</node>
</node>
</node>
<node CREATED="1392949684652" FOLDED="true" ID="ID_1903883162" MODIFIED="1395043550067" TEXT="Threads and fork ">
<node CREATED="1393536290549" ID="ID_1829140670" MODIFIED="1393536292862" TEXT="By inheriting a copy of the address space, the child also inherits the state of every mutex, readerwriter lock, and condition variable from the parent process. ">
<node CREATED="1393536320437" ID="ID_863645029" MODIFIED="1393536322566" TEXT="If the parent consists of more than one thread, the child will need to clean up the lock state if it isn&apos;t going to call exec immediately after fork returns "/>
</node>
<node CREATED="1393536339718" ID="ID_952399601" MODIFIED="1393536341631" TEXT="Inside the child process, only one thread exists ">
<node CREATED="1393536420032" ID="ID_1137878809" MODIFIED="1393536421918" TEXT=" If the threads in the parent process hold any locks, the locks will also be held in the child process.  "/>
</node>
<node CREATED="1393536442208" ID="ID_604717499" MODIFIED="1393536444998" TEXT="int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void)); ">
<node CREATED="1393536459104" ID="ID_1666418649" MODIFIED="1393536461566" TEXT="prepare">
<node CREATED="1393536501361" ID="ID_1156351611" MODIFIED="1393536503213" TEXT="in the parent "/>
<node CREATED="1393536513874" ID="ID_1913609100" MODIFIED="1393536515880" TEXT="before fork creates the child process "/>
<node CREATED="1393536527338" ID="ID_1262877861" MODIFIED="1393536529347" TEXT="acquire all locks defined by the parent "/>
</node>
<node CREATED="1393536462217" ID="ID_969376360" MODIFIED="1393536465516" TEXT="parent">
<node CREATED="1393536548130" ID="ID_526774042" MODIFIED="1393536551321" TEXT="in the context of the parent "/>
<node CREATED="1393536574827" ID="ID_1466726648" MODIFIED="1393537009548" TEXT="after fork has created the child process ">
<node CREATED="1393536587963" ID="ID_284663457" MODIFIED="1393536591983" TEXT=" but before fork has returned "/>
</node>
<node CREATED="1393536639484" ID="ID_809635672" MODIFIED="1393536644159" TEXT="to unlock all the locks acquired by the prepare fork handler ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1393536466313" ID="ID_1303389974" MODIFIED="1393536467559" TEXT="child">
<node CREATED="1393536655212" ID="ID_1972810455" MODIFIED="1393536657188" TEXT="in the context of the child process "/>
<node CREATED="1393536666037" ID="ID_1405965070" MODIFIED="1393536667718" TEXT="returning from fork "/>
<node CREATED="1393536682013" ID="ID_90536746" MODIFIED="1393537004028" TEXT="must release all the locks acquired by the prepare fork handler. ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1393536802111" ID="ID_1201984134" MODIFIED="1393536805542" TEXT="We can call pthread_atfork multiple times to install more than one set of fork handlers. ">
<node CREATED="1393536846464" ID="ID_452618963" MODIFIED="1393536870543" TEXT="the order in which the handlers are called ">
<node CREATED="1393536912634" ID="ID_760433903" MODIFIED="1393536914838" TEXT="parent and child fork handlers are called in the order in which they were registered "/>
<node CREATED="1393536932290" ID="ID_201122589" MODIFIED="1393536934207" TEXT="the prepare fork handlers are called in the opposite order from which they were registered.  "/>
</node>
<node CREATED="1393536994555" ID="ID_797774901" MODIFIED="1393537012806" TEXT="This allows multiple modules to register their own fork handlers and still honor the locking hierarchy. ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
</node>
</node>
</node>
<node CREATED="1392949690484" ID="ID_607287955" MODIFIED="1392949691958" TEXT="Threads and I/O ">
<node CREATED="1393538763092" ID="ID_847178052" MODIFIED="1393538765508" TEXT="pread(fd, buf1, 100, 300); ">
<node CREATED="1393538776677" ID="ID_1376385676" MODIFIED="1393538778852" TEXT="lseek(fd, 300, SEEK_SET); "/>
<node CREATED="1393538784469" ID="ID_1645493069" MODIFIED="1393538786436" TEXT="read(fd, buf1, 100); "/>
</node>
</node>
<node CREATED="1392949694956" ID="ID_1514840687" MODIFIED="1392949697257" TEXT="Summary "/>
<node CREATED="1392949707205" ID="ID_1112814910" MODIFIED="1395043691531" TEXT="Exercises ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
<node CREATED="1393342397162" ID="ID_798185148" MODIFIED="1393510059812" TEXT="problem">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<node CREATED="1393342402866" ID="ID_108058634" MODIFIED="1393342406832" TEXT="Figure 12.8 ">
<node CREATED="1393342413154" ID="ID_768564597" MODIFIED="1393342414733" TEXT="SECTONSEC  "/>
</node>
<node CREATED="1393510021569" ID="ID_911399105" MODIFIED="1393510050719" TEXT="624">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If one of the signals specified in the set is pending at the time sigwait is called, then sigwait will return without blocking. Before returning, sigwait removes the signal from the set of signals pending for the process. To avoid erroneous behavior, a thread must block the signals it is waiting for before calling sigwait. The sigwait function will atomically unblock the signals and wait until one is delivered. Before returning, sigwait will restore the thread's signal mask. If the signals are not blocked at the time that sigwait is called, then a timing window is opened up w
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1395043596570" FOLDED="true" ID="ID_1610336038" MODIFIED="1395736902617" POSITION="right" TEXT="13Daemon Processes ">
<node CREATED="1395043636202" ID="ID_820966342" MODIFIED="1395043638029" TEXT="Introduction ">
<node CREATED="1395043959648" ID="ID_630151807" MODIFIED="1395043975700" TEXT="live for a long time "/>
<node CREATED="1395043981759" ID="ID_849367339" MODIFIED="1395043983301" TEXT="started when the system is bootstrapped "/>
<node CREATED="1395043993032" ID="ID_1705348048" MODIFIED="1395043995274" TEXT="terminate only when the system is shut down "/>
<node CREATED="1395044007169" ID="ID_1776857391" MODIFIED="1395044009133" TEXT="don&apos;t have a controlling terminal "/>
</node>
<node CREATED="1395043643642" ID="ID_726448842" MODIFIED="1395631910347" TEXT="Daemon Characteristics ">
<node CREATED="1395625564293" ID="ID_1208881458" MODIFIED="1395625565917" TEXT="Anything with a parent process ID of 0 is usually a kernel process started as part of the system bootstrap procedure ">
<node CREATED="1395625578512" ID="ID_1037262374" MODIFIED="1395625579698" TEXT="Anything with a parent process ID of 0 is usually a kernel process started as part of the system bootstrap procedure "/>
<node CREATED="1395625595961" ID="ID_1178954185" MODIFIED="1395625597760" TEXT="Kernel processes are special and generally exist for the entire lifetime of the system "/>
<node CREATED="1395625607578" ID="ID_1827463063" MODIFIED="1395625609359" TEXT="They run with superuser privileges  "/>
</node>
<node CREATED="1395625648652" ID="ID_857574157" MODIFIED="1395625652170" TEXT="some daemon">
<node CREATED="1395625657276" ID="ID_716204533" MODIFIED="1395625659468" TEXT="kevenTD ">
<node CREATED="1395625670725" ID="ID_1470946818" MODIFIED="1395625672520" TEXT="provides process context for running scheduled functions in the kernel "/>
</node>
<node CREATED="1395625677309" ID="ID_1556618747" MODIFIED="1395625680696" TEXT="kapmd ">
<node CREATED="1395625698494" ID="ID_1949381676" MODIFIED="1395625700958" TEXT="provides support for the advanced power management features available with various computer systems "/>
</node>
<node CREATED="1395625723959" ID="ID_1478320299" MODIFIED="1395625725689" TEXT="kswapd ">
<node CREATED="1395625733032" ID="ID_379908992" MODIFIED="1395625734703" TEXT="the pageout daemon "/>
<node CREATED="1395625831061" ID="ID_1329735009" MODIFIED="1395625832700" TEXT="supports the virtual memory subsystem by writing dirty pages to disk slowly over time, so the pages can be reclaimed "/>
</node>
<node CREATED="1395625853766" ID="ID_775659756" MODIFIED="1395625884639" TEXT="bdflush and kupdated  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      flushes cached data to disk using two additional daemons
    </p>
  </body>
</html></richcontent>
<node CREATED="1395625884583" ID="ID_1214454604" MODIFIED="1395625886690" TEXT="bdflush ">
<node CREATED="1395625900192" ID="ID_476442102" MODIFIED="1395625901891" TEXT="flushes dirty buffers from the buffer cache back to disk when available memory reaches a low-water mark "/>
</node>
<node CREATED="1395625906753" ID="ID_561046131" MODIFIED="1395625908399" TEXT="kupdated "/>
</node>
</node>
</node>
<node CREATED="1395043649025" ID="ID_35270725" MODIFIED="1395043650805" TEXT="Coding Rules "/>
<node CREATED="1395043653816" FOLDED="true" ID="ID_419289991" MODIFIED="1395649398942" TEXT="Error Logging ">
<node CREATED="1395632201147" ID="ID_213195896" MODIFIED="1395632204274" TEXT="three ways to generate log messages ">
<node CREATED="1395632212051" ID="ID_1268305665" MODIFIED="1395632214177" TEXT="Kernel routines can call the log function ">
<node CREATED="1395632266788" ID="ID_15986898" MODIFIED="1395632268653" TEXT="These messages can be read by any user process that opens and reads the /dev/klog device "/>
</node>
<node CREATED="1395632244308" ID="ID_196232408" MODIFIED="1395632251298" TEXT="user processes (daemons) call the syslog(3) function ">
<node CREATED="1395632282645" ID="ID_396526374" MODIFIED="1395632284142" TEXT="This causes the message to be sent to the UNIX domain datagram socket /dev/log "/>
</node>
<node CREATED="1395632328118" ID="ID_1082435125" MODIFIED="1395632362638" TEXT="A user process on this host, or on some other host that is connected to this host by a TCP/IP network, can send log messages to UDP port 514 ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Note that the syslog function never
    </p>
    <p>
      generates these UDP datagrams: they require explicit network programming by the process
    </p>
    <p>
      generating the log message.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1395632363569" ID="ID_841521155" MODIFIED="1395632365425" TEXT="syslogd daemon reads all three forms of log messages "/>
<node CREATED="1395632373177" ID="ID_1991323876" MODIFIED="1395632374615" TEXT="/etc/syslog.conf ">
<node CREATED="1395632382441" ID="ID_1190501028" MODIFIED="1395632384386" TEXT="determines where different classes of messages are to be sent "/>
</node>
<node CREATED="1395632403346" ID="ID_1951340877" MODIFIED="1395632406192" TEXT="functions">
<node CREATED="1395632414514" FOLDED="true" ID="ID_1025540793" MODIFIED="1395649320483" TEXT="void openlog(const char *ident, int option, int facility); ">
<node CREATED="1395632457596" ID="ID_1758739606" MODIFIED="1395632459804" TEXT="Calling openlog is optional. "/>
<node CREATED="1395633414478" ID="ID_922494474" MODIFIED="1395646388871" TEXT="facility ">
<node CREATED="1395647788984" ID="ID_1888017677" MODIFIED="1395647790978" TEXT="LOG_AUTH  ">
<node CREATED="1395647971763" ID="ID_1917860494" MODIFIED="1395647973359" TEXT="authorization programs: login, su, getty, ... "/>
</node>
<node CREATED="1395647800808" ID="ID_795444700" MODIFIED="1395647802746" TEXT="LOG_CRON  ">
<node CREATED="1395647943419" ID="ID_155025536" MODIFIED="1395647945332" TEXT="cron and at "/>
</node>
<node CREATED="1395647811872" ID="ID_841236029" MODIFIED="1395647813617" TEXT="LOG_DAEMON  ">
<node CREATED="1395647932771" ID="ID_1433260691" MODIFIED="1395647934910" TEXT="system daemons: inetd, routed, ... "/>
</node>
<node CREATED="1395647823265" ID="ID_1190350119" MODIFIED="1395647826212" TEXT="LOG_KERN  ">
<node CREATED="1395647923129" ID="ID_1351687695" MODIFIED="1395647924829" TEXT="messages generated by the kernel "/>
</node>
<node CREATED="1395647868721" ID="ID_1109406014" MODIFIED="1395647870348" TEXT="LOG_LOCAL0  "/>
<node CREATED="1395647873121" ID="ID_758957645" MODIFIED="1395647874716" TEXT="LOG_LOCAL1  ">
<node CREATED="1395647911410" ID="ID_1109461549" MODIFIED="1395647913181" TEXT="reserved for local use "/>
</node>
<node CREATED="1395647878825" ID="ID_1793229250" MODIFIED="1395647880228" TEXT="LOG_LOCAL2  "/>
<node CREATED="1395647884938" ID="ID_1996285039" MODIFIED="1395647887044" TEXT="LOG_LOCAL3  "/>
<node CREATED="1395647901946" ID="ID_1826202520" MODIFIED="1395647903584" TEXT="LOG_MAIL  "/>
</node>
<node CREATED="1395633497208" ID="ID_1789049895" MODIFIED="1395633509918" TEXT="option ">
<node CREATED="1395646315941" ID="ID_1935635515" MODIFIED="1395646319040" TEXT="LOG_CONS  ">
<node CREATED="1395646306437" ID="ID_1507897072" MODIFIED="1395646309881" TEXT="can&apos;t be sent to syslogd via the UNIX domain datagram "/>
<node CREATED="1395646414182" ID="ID_359888115" MODIFIED="1395646415720" TEXT="the message is written to the console instead "/>
</node>
<node CREATED="1395646326421" ID="ID_454810053" MODIFIED="1395646856491" TEXT="LOG_NDELAY  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Open the UNIX domain datagram socket to the syslogd daemon immediately;
    </p>
    <p>
      don't wait until the first message is logged. Normally, the socket is not opened
    </p>
    <p>
      until the first message is logged
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1395646331397" ID="ID_1986180574" MODIFIED="1395646861864" TEXT="LOG_NOWAIT  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Do not wait for child processes that might have been created in the process of
    </p>
    <p>
      logging the message. This prevents conflicts with applications that catch
    </p>
    <p>
      SIGCHLD, since the application might have retrieved the child's status by the
    </p>
    <p>
      time that syslog calls wait.
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
</node>
<node CREATED="1395646336701" ID="ID_1071979993" MODIFIED="1395646338496" TEXT="LOG_ODELAY  ">
<node CREATED="1395646326421" ID="ID_35408599" MODIFIED="1395646856491" TEXT="LOG_NDELAY  ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Open the UNIX domain datagram socket to the syslogd daemon immediately;
    </p>
    <p>
      don't wait until the first message is logged. Normally, the socket is not opened
    </p>
    <p>
      until the first message is logged
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1395646342285" ID="ID_1316936391" MODIFIED="1395647013753" TEXT="LOG_PERROR ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Write the log message to standard error in addition to sending it to syslogd.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1395646346853" ID="ID_1314104382" MODIFIED="1395647041544" TEXT="LOG_PID ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Log the process ID with each message.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1395632422786" ID="ID_1474741487" MODIFIED="1395632424724" TEXT="void syslog(int priority, const char *format, ...); ">
<node CREATED="1395648001539" ID="ID_1685861758" MODIFIED="1395648005698" TEXT="priority">
<node CREATED="1395648011956" ID="ID_1256491163" MODIFIED="1395648014000" TEXT="LOG_EMERG  "/>
<node CREATED="1395648016788" ID="ID_719434288" MODIFIED="1395648018412" TEXT="LOG_ALERT  "/>
<node CREATED="1395648021892" ID="ID_858168545" MODIFIED="1395648023412" TEXT="LOG_CRIT  "/>
<node CREATED="1395648026628" ID="ID_1779751572" MODIFIED="1395648028612" TEXT="LOG_ERR  "/>
<node CREATED="1395648032236" ID="ID_1055712587" MODIFIED="1395648033749" TEXT="LOG_WARNING "/>
<node CREATED="1395648036389" ID="ID_1948438021" MODIFIED="1395648037925" TEXT="LOG_NOTICE  "/>
<node CREATED="1395648041452" ID="ID_967692545" MODIFIED="1395648043597" TEXT="LOG_INFO  "/>
<node CREATED="1395648047069" ID="ID_1441188114" MODIFIED="1395648048765" TEXT="LOG_DEBUG  "/>
</node>
</node>
<node CREATED="1395632431027" ID="ID_1225722448" MODIFIED="1395632432621" TEXT="void closelog(void); ">
<node CREATED="1395632518238" ID="ID_1935070618" MODIFIED="1395632519836" TEXT="Calling closelog is also optional "/>
</node>
<node CREATED="1395632436859" ID="ID_714182930" MODIFIED="1395632439029" TEXT="int setlogmask(int maskpri); ">
<node CREATED="1395649041033" ID="ID_143884527" MODIFIED="1395649044929" TEXT="set the log priority mask for the process "/>
<node CREATED="1395649069137" ID="ID_810144803" MODIFIED="1395649070810" TEXT="When the log priority mask is set, messages are not logged unless their priority is set in the log priority mask. "/>
<node CREATED="1395649105835" ID="ID_397566865" MODIFIED="1395649107721" TEXT="Note that attempts to set the log priority mask to 0 will have no effect. "/>
</node>
<node CREATED="1395649324289" ID="ID_1794320002" MODIFIED="1395649326652" TEXT="void vsyslog(int priority, const char *format, va_list arg); "/>
</node>
<node CREATED="1395649125459" ID="ID_1956233976" MODIFIED="1395649127270" TEXT="The logger(1) program is also provided by many systems as a way to send log messages to the syslog facility "/>
<node CREATED="1395649361930" ID="ID_1946751089" MODIFIED="1395649378999" TEXT="syslogd">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Most syslogd implementations will queue messages for a short time. If a duplicate message arrives
    </p>
    <p>
      during this time, the syslog daemon will not write it to the log. Instead, the daemon will print out a
    </p>
    <p>
      message similar to &quot;last message repeated N times.&quot;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1395043659850" ID="ID_1167665390" MODIFIED="1395043661599" TEXT="Single-Instance Daemons ">
<node CREATED="1395650747207" ID="ID_93597519" MODIFIED="1395650756373" TEXT="lockfile"/>
<node CREATED="1395650757359" ID="ID_424327520" MODIFIED="1395650764093" TEXT="write into pid"/>
</node>
<node CREATED="1395043665498" ID="ID_936530780" MODIFIED="1395043667370" TEXT="Daemon Conventions ">
<node CREATED="1395650794304" ID="ID_1974799489" MODIFIED="1395650796936" TEXT="If the daemon uses a lock file, the file is usually stored in /var/run ">
<node CREATED="1395650903523" ID="ID_1577111463" MODIFIED="1395650916171" TEXT="name:/var/run/crond.pid "/>
</node>
<node CREATED="1395651121489" ID="ID_57308834" MODIFIED="1395651123936" TEXT="If the daemon supports configuration options, they are usually stored in /etc ">
<node CREATED="1395651132785" ID="ID_1571809065" MODIFIED="1395651136924" TEXT="/etc/syslog.conf "/>
</node>
<node CREATED="1395651156146" ID="ID_193157329" MODIFIED="1395651157978" TEXT="Daemons can be started from the command line, but they are usually started from one of the system initialization scripts (/etc/rc* or /etc/init.d/* ).  "/>
<node CREATED="1395651631631" ID="ID_351365730" MODIFIED="1395651641296" TEXT="If a daemon has a configuration file, the daemon reads it when it starts, but usually won&apos;t look at it again ">
<node CREATED="1395651649912" ID="ID_1680932652" MODIFIED="1395651657254" TEXT="If an administrator changes the configuration ,need to restart"/>
<node CREATED="1395651675304" ID="ID_466081214" MODIFIED="1395651676840" TEXT="To avoid this, some daemons will catch SIGHUP and reread their configuration files when they receive the signal "/>
</node>
</node>
<node CREATED="1395043670914" ID="ID_1576879899" MODIFIED="1395043672898" TEXT="ClientServer Model "/>
<node CREATED="1395043675946" ID="ID_618131736" MODIFIED="1395043677093" TEXT="Summary "/>
<node CREATED="1395043679850" ID="ID_362605863" MODIFIED="1395043682081" TEXT="Exercises ">
<node CREATED="1395717042479" ID="ID_1717202845" MODIFIED="1395717044917" TEXT="13.2">
<node CREATED="1395717046575" HGAP="22" ID="ID_888545915" MODIFIED="1395717606739" TEXT="daemons" VSHIFT="-27">
<node CREATED="1395717091113" ID="ID_1785171166" MODIFIED="1395717590119" TEXT="kworker">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font face="UbuntuRegular, Ubuntu, Bitstream Vera Sans, DejaVu Sans, Tahoma, sans-serif" size="14px" color="rgb(51, 51, 51)"><span http-equiv="content-type" style="color: rgb(51, 51, 51); white-space: normal; font-weight: normal; font-variant: normal; text-align: left; font-family: UbuntuRegular, Ubuntu, Bitstream Vera Sans, DejaVu Sans, Tahoma, sans-serif; line-height: 18px; text-indent: 0px; background-color: rgb(255, 255, 255); word-spacing: 0px; font-size: 14px; display: inline !important; font-style: normal; text-transform: none; float: none; letter-spacing: normal" content="text/html; charset=utf-8">&quot;kworker&quot; is a placeholder process for kernel worker threads, which perform most of the actual processing for the kernel, especially in cases where there are interrupts, timers, I/O, etc. These typically correspond to the vast majority of any allocated &quot;system&quot; time to running processes.</span></font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1395734937232" ID="ID_1576365928" MODIFIED="1395734939175" TEXT="winbindd">
<node CREATED="1395734945496" ID="ID_1917234015" MODIFIED="1395734947438" TEXT="Name Service Switch daemon for resolving names from NT servers"/>
<node CREATED="1395734953328" ID="ID_183281170" MODIFIED="1395734955271" TEXT="This program is part of the samba(7) suite."/>
<node CREATED="1395734990818" ID="ID_533574937" MODIFIED="1395734992504" TEXT="provides a number of services to the Name Service Switch capability found in most modern C libraries, to arbitrary applications via PAM and ntlm_auth and to Samba itself"/>
</node>
<node CREATED="1395735427695" ID="ID_950921957" MODIFIED="1395735428913" TEXT="whoopsie">
<node CREATED="1395735414583" ID="ID_1199902489" MODIFIED="1395735416205" TEXT="It&apos;s the &quot;Ubuntu Error Reporting&quot; daemon, and is installed by default in both desktop/server installations."/>
</node>
<node CREATED="1395736012344" ID="ID_795109754" MODIFIED="1395736014470" TEXT="cups">
<node CREATED="1395736313810" ID="ID_1805757600" MODIFIED="1395736315033" TEXT="CUPS is the standards-based, open source printing system developed by Apple Inc"/>
</node>
</node>
</node>
</node>
<node CREATED="1395736904957" ID="ID_668430026" MODIFIED="1395736923299" POSITION="right" TEXT="14Advanted I/O">
<node CREATED="1395736924798" ID="ID_1511726348" MODIFIED="1395736929148" TEXT="introduction"/>
<node CREATED="1395736929734" FOLDED="true" ID="ID_1565147501" MODIFIED="1395797334885" TEXT="Nonblocking I/O">
<node CREATED="1395737426459" ID="ID_568376492" MODIFIED="1395737436625" TEXT="two categories system call">
<node CREATED="1395737438163" ID="ID_1293348730" MODIFIED="1395737439897" TEXT="slow">
<node CREATED="1395737511261" ID="ID_415914883" MODIFIED="1395737512339" TEXT="can block forever "/>
<node CREATED="1395737521214" ID="ID_4398257" MODIFIED="1395737528355" TEXT="includes:">
<node CREATED="1395738343868" ID="ID_1582513354" MODIFIED="1395738345120" TEXT="Reads that can block the caller forever if data isn&apos;t present with certain file types (pipes, terminal devices, and network devices) "/>
<node CREATED="1395738354716" ID="ID_1087304928" MODIFIED="1395738357016" TEXT="Writes that can block the caller forever if the data can&apos;t be accepted immediately by these same file types (no room in the pipe, network flow control, etc.) "/>
<node CREATED="1395738369397" ID="ID_1586806234" MODIFIED="1395738371624" TEXT="Opens that block until some condition occurs on certain file types (such as an open of a terminal device that waits until an attached modem answers the phone, or an open of a FIFO for writing- only when no other process has the FIFO open for reading) "/>
<node CREATED="1395738379413" ID="ID_1781221064" MODIFIED="1395738382169" TEXT="Reads and writes of files that have mandatory record locking enabled "/>
<node CREATED="1395738388189" ID="ID_1384275948" MODIFIED="1395738389945" TEXT="Certain ioctl operations "/>
<node CREATED="1395738394877" ID="ID_807877090" MODIFIED="1395738396714" TEXT="Some of the interprocess communication functions "/>
</node>
</node>
<node CREATED="1395737440371" ID="ID_375742051" MODIFIED="1395737442010" TEXT="other"/>
</node>
<node CREATED="1395738497664" ID="ID_1785262359" MODIFIED="1395738500086" TEXT="issue an I/O operation, such as an open, read, or write, and not have it block forever ">
<node CREATED="1395738516896" ID="ID_1546106735" MODIFIED="1395738519932" TEXT="two ways to specify  it">
<node CREATED="1395738520865" ID="ID_454492448" MODIFIED="1395738542791" TEXT="open  with O_NONBLOCK "/>
<node CREATED="1395738621179" ID="ID_247589080" MODIFIED="1395738622345" TEXT="we call fcntl to turn on the O_NONBLOCK file status flag "/>
</node>
</node>
</node>
<node CREATED="1395736937894" FOLDED="true" ID="ID_676453084" MODIFIED="1396403957644" TEXT="Record Locking">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Record locking is the term normally used to describe the ability of a process to prevent other
    </p>
    <p>
      processes from modifying a region of a file while the first process is reading or modifying that portion
    </p>
    <p>
      of the file
    </p>
  </body>
</html></richcontent>
<node CREATED="1395797677081" ID="ID_852701621" MODIFIED="1395797679363" TEXT="history">
<node CREATED="1395797680193" ID="ID_1857972937" MODIFIED="1395797681487" TEXT="flock">
<node CREATED="1395797692201" ID="ID_1543729129" MODIFIED="1395797693971" TEXT="locks only entire files, not regions of a file "/>
</node>
<node CREATED="1395797708905" ID="ID_900729544" MODIFIED="1395797713687" TEXT="fcntl">
<node CREATED="1395797717777" ID="ID_881344067" MODIFIED="1395797720249" TEXT="lockf"/>
</node>
</node>
<node CREATED="1395797939502" ID="ID_521638550" MODIFIED="1395803590788" TEXT="fcntl">
<node CREATED="1395802432013" ID="ID_1102705023" MODIFIED="1395802433372" TEXT="int fcntl(int filedes, int cmd, ... /* struct flock *flockptr */ ); "/>
<node CREATED="1395802458525" ID="ID_723262708" MODIFIED="1395802459284" TEXT="cmd">
<node CREATED="1395802463718" ID="ID_365207533" MODIFIED="1395802468247" TEXT="F_GETLK ">
<node CREATED="1395804069107" ID="ID_1826584241" MODIFIED="1395804122531" TEXT="if the flockptr is prevent by exiting lock,set the lock to lockptr"/>
<node CREATED="1395804123148" ID="ID_553231375" MODIFIED="1395804148219" TEXT="if no,set the l_type to F_UNLCK"/>
</node>
<node CREATED="1395802471246" ID="ID_234739400" MODIFIED="1395802472132" TEXT="F_SETLK ">
<node CREATED="1395804272903" ID="ID_81546601" MODIFIED="1395804309398" TEXT="if prevent by the compatibility rulefcntl returns immediately with errno set to either EACCES or EAGAIN "/>
<node CREATED="1395804333424" ID="ID_1034570306" MODIFIED="1395804334358" TEXT="also used to clear the lock described by flockptr (l_type of F_UNLCK). "/>
</node>
<node CREATED="1395802475718" ID="ID_455155142" MODIFIED="1395802476604" TEXT="F_SETLKW ">
<node CREATED="1395804377888" ID="ID_979038791" MODIFIED="1395804379583" TEXT="a blocking version of F_SETLK "/>
<node CREATED="1395804391409" ID="ID_1893547445" MODIFIED="1395804393116" TEXT="The process wakes up either when the lock becomes available or when interrupted by a signal "/>
</node>
</node>
<node CREATED="1395802503854" ID="ID_1588325115" MODIFIED="1395802504940" TEXT="args">
<node CREATED="1395802507102" ID="ID_505001678" MODIFIED="1395802516613" TEXT="struct flock">
<node CREATED="1395802529415" ID="ID_1618735378" MODIFIED="1395802531045" TEXT="l_type ">
<node CREATED="1395802571624" ID="ID_1284259906" MODIFIED="1395802574662" TEXT="F_RDLCK"/>
<node CREATED="1395802578376" ID="ID_301673151" MODIFIED="1395802580566" TEXT="F_WRLCK"/>
<node CREATED="1395802584176" ID="ID_1305021950" MODIFIED="1395802588086" TEXT="F_UNLCK "/>
</node>
<node CREATED="1395802536399" ID="ID_413532112" MODIFIED="1395802541357" TEXT="l_start"/>
<node CREATED="1395802546471" ID="ID_925829669" MODIFIED="1395802548373" TEXT="l_whence ">
<node CREATED="1395802596808" ID="ID_1819372879" MODIFIED="1395802600550" TEXT="SEEK_SET"/>
<node CREATED="1395802604472" ID="ID_591908674" MODIFIED="1395802606358" TEXT="SEEK_CUR"/>
<node CREATED="1395802609736" ID="ID_209969254" MODIFIED="1395802611375" TEXT="SEEK_END "/>
</node>
<node CREATED="1395802554031" ID="ID_384979380" MODIFIED="1395802555438" TEXT="l_len ">
<node CREATED="1395802645913" ID="ID_1066841427" MODIFIED="1395802647863" TEXT="0 means lock to EOF "/>
</node>
<node CREATED="1395802558967" ID="ID_621551662" MODIFIED="1395802564510" TEXT="l_pid">
<node CREATED="1395802668977" ID="ID_125716784" MODIFIED="1395802670641" TEXT="returned with F_GETLK "/>
</node>
</node>
</node>
</node>
<node CREATED="1395802752835" ID="ID_105099733" MODIFIED="1395802754503" TEXT="rules about the specification of the region to be locked or unlocked ">
<node CREATED="1395802821676" ID="ID_1164276218" MODIFIED="1395802823369" TEXT="Locks can start and extend beyond the current end of file, but cannot start or extend before the beginning of the file. "/>
<node CREATED="1395803262756" ID="ID_1130580565" MODIFIED="1395803279008" TEXT="rdlock and wlock">
<node CREATED="1395803252100" ID="ID_274215855" MODIFIED="1395803253257" TEXT="The compatibility rule applies to lock requests made from different processes, not to multiple lock requests made by a single process. If a process has an existing lock on a range of a file, a subsequent attempt to place a lock on the same range by the same process will replace the existing lock with the new one "/>
<node CREATED="1395803292213" ID="ID_1764773874" MODIFIED="1395803294297" TEXT="To obtain a read lock, the descriptor must be open for reading; to obtain a write lock, the descriptor must be open for writing "/>
</node>
<node CREATED="1395890562033" ID="ID_37403796" MODIFIED="1395890564257" TEXT="Implied Inheritance and Release of Locks ">
<node CREATED="1395889669514" ID="ID_1515837304" MODIFIED="1395889671565" TEXT="Locks are associated with a process and a file ">
<node CREATED="1395889751480" ID="ID_113087593" MODIFIED="1395889753384" TEXT="when a process terminates, all its locks are released "/>
<node CREATED="1395889762656" ID="ID_507404174" MODIFIED="1395889788152" TEXT="whenever a descriptor is closed, any locks on the file referenced by that descriptor for that process are released ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      fd1 = open(pathname, ...);
    </p>
    <p>
      read_lock(fd1, ...);
    </p>
    <p>
      fd2 = dup(fd1);
    </p>
    <p>
      close(fd2);
    </p>
    <p>
      
    </p>
    <p>
      fd1 = open(pathname, ...);
    </p>
    <p>
      read_lock(fd1, ...);
    </p>
    <p>
      fd2 = open(pathname, ...)
    </p>
    <p>
      close(fd2);
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1395889802655" ID="ID_1794491889" MODIFIED="1395889804301" TEXT="Locks are never inherited by the child across a fork "/>
<node CREATED="1395890031021" ID="ID_1564052131" MODIFIED="1395890033883" TEXT="Locks are inherited by a new program across an exec "/>
</node>
<node CREATED="1395903058393" ID="ID_1892539294" MODIFIED="1395903065297" TEXT="Locks at End of File ">
<icon BUILTIN="help"/>
<icon BUILTIN="help"/>
<icon BUILTIN="messagebox_warning"/>
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1396327206131" ID="ID_643551871" MODIFIED="1396327211014" TEXT="Advisory versus Mandatory Locking ">
<node CREATED="1396334372292" ID="ID_1408698956" MODIFIED="1396334375378" TEXT="advisory">
<node CREATED="1396339266151" ID="ID_34165115" MODIFIED="1396339303976" TEXT="need flock to lock "/>
</node>
<node CREATED="1396335894464" ID="ID_1501391546" MODIFIED="1396335968282" TEXT="Mandatory locking ">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      On Linux, if you want mandatory locking, you need to enable it on a per file
    </p>
    <p>
      system basis by using the -o mand option to the mount command
    </p>
    <p>
      
    </p>
    <p>
      Mandatory locking is enabled for a particular file by turning on the set-group-ID bit and turning off
    </p>
    <p>
      the group-execute bit
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1396335911010" ID="ID_341972030" MODIFIED="1396335912615" TEXT="causes the kernel to check every open, read, and write to verify that the calling process isn&apos;t violating a lock on the file being accessed "/>
</node>
</node>
</node>
<node CREATED="1395736945270" ID="ID_898226691" MODIFIED="1396404008730" TEXT="STREAMS">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The STREAMS mechanism is provided by System V as a general way to interface communication
    </p>
    <p>
      drivers into the kernel.
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1396427969198" ID="ID_499782989" MODIFIED="1396428072057" TEXT="14.13 what">
<icon BUILTIN="wizard"/>
<node CREATED="1396427974727" ID="ID_1304989750" MODIFIED="1396427979141" TEXT="stream head"/>
<node CREATED="1396427980023" ID="ID_375864419" MODIFIED="1396428011491" TEXT="processing modules"/>
<node CREATED="1396427985360" ID="ID_677337781" MODIFIED="1396427991127" TEXT="driver"/>
</node>
<node CREATED="1396428670620" ID="ID_143356050" MODIFIED="1396428671696" TEXT="All STREAMS devices are character special files "/>
<node CREATED="1396428540896" ID="ID_1057179373" MODIFIED="1396428546652" TEXT="access stream">
<node CREATED="1396428553685" ID="ID_1215611317" MODIFIED="1396428555152" TEXT="open, close, read, write, and ioctl "/>
<node CREATED="1396428589113" ID="ID_1102190092" MODIFIED="1396428591433" TEXT="SVR3 ">
<node CREATED="1396428633548" ID="ID_278807791" MODIFIED="1396428635561" TEXT="getmsg, putmsg, and poll "/>
</node>
<node CREATED="1396428589113" ID="ID_1019836750" MODIFIED="1396428603184" TEXT="SVR4">
<node CREATED="1396428575426" ID="ID_1251682900" MODIFIED="1396428576554" TEXT="getpmsg and putpmsg "/>
</node>
</node>
<node CREATED="1396428713200" ID="ID_319133703" MODIFIED="1396428714491" TEXT="STREAMS Messages ">
<node CREATED="1396428733602" ID="ID_25573896" MODIFIED="1396428734186" TEXT="All input and output under STREAMS is based on messages "/>
<node CREATED="1396428760414" ID="ID_136398498" MODIFIED="1396428761495" TEXT="consists of ">
<node CREATED="1396428769095" ID="ID_416506615" MODIFIED="1396429270832" TEXT="type">
<richcontent TYPE="NOTE"><html>
  <head>
    
  </head>
  <body>
    <p>
      We'll encounter only three of these message types with
    </p>
    <p>
      the functions we use (read, write, getmsg, getpmsg, putmsg, and putpmsg)
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1396429273519" ID="ID_1518082418" MODIFIED="1396429275038" TEXT="M_DATA "/>
<node CREATED="1396429285838" ID="ID_238739021" MODIFIED="1396429287045" TEXT="M_PROTO "/>
<node CREATED="1396429312501" ID="ID_1477349973" MODIFIED="1396429312501" TEXT=""/>
</node>
<node CREATED="1396428781736" ID="ID_815763198" MODIFIED="1396428783202" TEXT="optional control information, "/>
<node CREATED="1396428793920" ID="ID_1250687992" MODIFIED="1396428795156" TEXT="optional data "/>
</node>
<node CREATED="1396428963414" ID="ID_1531233223" MODIFIED="1396428982140" TEXT=" The control information and data are specified by ">
<node CREATED="1396428983622" ID="ID_383130990" MODIFIED="1396428984707" TEXT="strbuf structures ">
<node CREATED="1396429025841" ID="ID_1556661790" MODIFIED="1396429026895" TEXT="int maxlen "/>
<node CREATED="1396429031143" ID="ID_1269531382" MODIFIED="1396429031964" TEXT="int len; "/>
<node CREATED="1396429035895" ID="ID_101631997" MODIFIED="1396429036712" TEXT="char *buf; "/>
</node>
</node>
<node CREATED="1396429146908" ID="ID_21788234" MODIFIED="1396429161652" TEXT="Figure 14.15. Type of STREAMS message generated for write, putmsg, and putpmsg ">
<icon BUILTIN="wizard"/>
</node>
</node>
</node>
<node CREATED="1395736950830" ID="ID_664047134" MODIFIED="1395736962196" TEXT="I/O Multiplexing"/>
<node CREATED="1395736962862" ID="ID_538848863" MODIFIED="1395736976453" TEXT="Asynchronous I/O"/>
<node CREATED="1395736977151" ID="ID_816322505" MODIFIED="1395736986021" TEXT="readv and writev Functions"/>
<node CREATED="1395736987319" ID="ID_53986937" MODIFIED="1395736996094" TEXT="readn and writen Functions"/>
<node CREATED="1395736997175" ID="ID_1813072623" MODIFIED="1395737005070" TEXT="Memory-Mapped I/O"/>
<node CREATED="1395737006544" ID="ID_903519873" MODIFIED="1395737013734" TEXT="summary"/>
<node CREATED="1395737016720" ID="ID_567416017" MODIFIED="1395737021718" TEXT="Exercises"/>
</node>
</node>
</map>
